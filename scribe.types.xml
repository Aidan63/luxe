<haxe>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Lib" params="" file="/usr/lib/haxe/std/cpp/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Load and return a Cpp primitive from a DLL library.</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="48" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Tries to load, and always returns a valid function, but the function may throw
		if called.</haxe_doc>
		</loadLazy>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="EReg" params="" file="/usr/lib/haxe/std/cpp/_std/EReg.hx">
		<regexp_new_options line="174" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<d/>
</f></regexp_new_options>
		<regexp_match line="175" static="1"><f a=":::">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></regexp_match>
		<regexp_matched line="176" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<d/>
</f></regexp_matched>
		<regexp_matched_pos line="177" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<a>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
	</a>
</f></regexp_matched_pos>
		<r><d/></r>
		<last><c path="String"/></last>
		<global><x path="Bool"/></global>
		<match public="1" set="method" line="36">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="45">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedRight public="1" set="method" line="55">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<replace public="1" set="method" line="98">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Lambda" params="" file="/usr/lib/haxe/std/Lambda.hx">
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred" v=":null">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Luxe" params="" file="/Users/sven/dev/luxe/luxe/Luxe.hx">
		<mouse public="1" static="1">
			<t path="luxe.Vector"/>
			<haxe_doc>The last known mouse position</haxe_doc>
		</mouse>
		<core public="1" static="1">
			<c path="luxe.Core"/>
			<haxe_doc>Direct access to the core engine</haxe_doc>
		</core>
		<debug public="1" static="1">
			<c path="luxe.Debug"/>
			<haxe_doc>Access to the core debug features</haxe_doc>
		</debug>
		<draw public="1" static="1">
			<c path="luxe.Draw"/>
			<haxe_doc>Access to the drawing features</haxe_doc>
		</draw>
		<audio public="1" static="1">
			<c path="luxe.Audio"/>
			<haxe_doc>Access to the audio features</haxe_doc>
		</audio>
		<timer public="1" static="1">
			<c path="luxe.Timer"/>
			<haxe_doc>Access to the timing features</haxe_doc>
		</timer>
		<events public="1" static="1">
			<c path="luxe.Events"/>
			<haxe_doc>Access to the global event system</haxe_doc>
		</events>
		<input public="1" static="1">
			<c path="luxe.Input"/>
			<haxe_doc>Access to the input features</haxe_doc>
		</input>
		<scene public="1" static="1">
			<c path="luxe.Scene"/>
			<haxe_doc>Access to the default luxe scene</haxe_doc>
		</scene>
		<utils public="1" static="1">
			<c path="luxe.utils.Utils"/>
			<haxe_doc>Access to the different utilities</haxe_doc>
		</utils>
		<physics public="1" static="1">
			<c path="luxe.Physics"/>
			<haxe_doc>Access to the physics bindings, if any</haxe_doc>
		</physics>
		<camera public="1" static="1">
			<c path="luxe.Camera"/>
			<haxe_doc>Access to the default camera</haxe_doc>
		</camera>
		<resources public="1" static="1">
			<c path="luxe.resource.ResourceManager"/>
			<haxe_doc>Access to the default resource manager</haxe_doc>
		</resources>
		<renderer public="1" static="1">
			<c path="phoenix.Renderer"/>
			<haxe_doc>Access to the rendering system</haxe_doc>
		</renderer>
		<time public="1" get="accessor" set="null" static="1">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The current time in seconds, highest precision from the platform.</haxe_doc>
		</time>
		<screen public="1" get="accessor" set="null" static="1">
			<c path="luxe.Screen"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Access to information about the game window (sizes, cursor etc)</haxe_doc>
		</screen>
		<version public="1" line="54" static="1">
			<c path="String"/>
			<haxe_doc>The version of the engine</haxe_doc>
		</version>
		<build public="1" line="56" static="1">
			<c path="String"/>
			<haxe_doc>The version + build meta information, generated at compile time from a macro (luxe.BuildVersion)</haxe_doc>
		</build>
		<timescale public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the scale of time</haxe_doc>
		</timescale>
		<fixed_delta public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero this will be passed in</haxe_doc>
		</fixed_delta>
		<update_rate public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero, updates will be forced to this rate</haxe_doc>
		</update_rate>
		<max_frame_time public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the maximum frame time</haxe_doc>
		</max_frame_time>
		<dt public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the time the last frame took to run</haxe_doc>
		</dt>
		<delta_sim public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the simulated time the last frame took to run, relative to scale etc</haxe_doc>
		</delta_sim>
		<last_frame_start public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the start time of the last frame</haxe_doc>
		</last_frame_start>
		<current_time public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the current simulation time</haxe_doc>
		</current_time>
		<cur_frame_start public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the start time of this frame</haxe_doc>
		</cur_frame_start>
		<alpha public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<haxe_doc>the alpha time for a render between frame updates</haxe_doc>
		</alpha>
		<on public="1" params="T" set="method" line="85" static="1">
			<f a="event:handler">
				<c path="String"/>
				<f a="">
					<c path="on.T"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>listen for core events</haxe_doc>
		</on>
		<off public="1" params="T" set="method" line="90" static="1">
			<f a="event:handler">
				<c path="String"/>
				<f a="">
					<c path="off.T"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>stop listening for core events</haxe_doc>
		</off>
		<get_screen set="method" line="94" static="1"><f a=""><c path="luxe.Screen"/></f></get_screen>
		<get_time set="method" line="100" static="1"><f a=""><x path="Float"/></f></get_time>
		<shutdown public="1" set="method" line="107" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>shutdown the engine and quit</haxe_doc>
		</shutdown>
		<showConsole public="1" set="method" line="114" static="1">
			<f a="_show">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>show/hide the debug console programmatically</haxe_doc>
		</showConsole>
		<loadJSON public="1" set="method" line="121" static="1">
			<f a="_id:?_onload:?_async" v=":null:false">
				<c path="String"/>
				<f a="">
					<c path="luxe.resource.JSONResource"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="luxe.resource.JSONResource"/>
			</f>
			<haxe_doc>Load a text resource</haxe_doc>
		</loadJSON>
		<loadText public="1" set="method" line="144" static="1"><f a="_id:?_onload:?_async" v=":null:false">
	<c path="String"/>
	<f a="">
		<c path="luxe.resource.TextResource"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<c path="luxe.resource.TextResource"/>
</f></loadText>
		<loadData public="1" set="method" line="168" static="1">
			<f a="_id:?_onload:?_async" v=":null:false">
				<c path="String"/>
				<f a="">
					<c path="luxe.resource.DataResource"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="luxe.resource.DataResource"/>
			</f>
			<haxe_doc>Load a bytes/data resource</haxe_doc>
		</loadData>
		<loadSound public="1" set="method" line="192" static="1">
			<f a="_name:_id:?_is_music:?_onload" v="::false:null">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<f a="">
					<c path="luxe.resource.SoundResource"/>
					<x path="Void"/>
				</f>
				<c path="luxe.resource.SoundResource"/>
			</f>
			<haxe_doc>Load a sound resource</haxe_doc>
		</loadSound>
		<loadTexture public="1" set="method" line="221" static="1">
			<f a="_id:?_onload:?_silent" v=":null:false">
				<c path="String"/>
				<f a="">
					<c path="phoenix.Texture"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="phoenix.Texture"/>
			</f>
			<haxe_doc>Load a texture/image resource</haxe_doc>
		</loadTexture>
		<loadTextures public="1" set="method" line="228" static="1">
			<f a="_ids:?_onload:?_silent" v=":null:false">
				<c path="Array"><c path="String"/></c>
				<f a="">
					<c path="Array"><c path="phoenix.Texture"/></c>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Load multiple texture/image resources, useful for preloading</haxe_doc>
		</loadTextures>
		<loadFont public="1" set="method" line="252" static="1">
			<f a="_id:?_path:?_onload:?_silent" v=":null:null:false">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<c path="phoenix.BitmapFont"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="phoenix.BitmapFont"/>
			</f>
			<haxe_doc>Load a font resource</haxe_doc>
		</loadFont>
		<loadShader public="1" set="method" line="259" static="1">
			<f a="?_ps_id:?_vs_id:?_onload:?_silent" v="'default':'default':null:false">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<c path="phoenix.Shader"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<c path="phoenix.Shader"/>
			</f>
			<haxe_doc>Load a shader resource</haxe_doc>
		</loadShader>
		<openURL public="1" set="method" line="268" static="1">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Open the system default browser with the given URL</haxe_doc>
		</openURL>
		<get_timescale get="inline" set="null" line="277" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the scale of time</haxe_doc>
		</get_timescale>
		<get_fixed_delta get="inline" set="null" line="281" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>if this is non zero this will be passed in</haxe_doc>
		</get_fixed_delta>
		<get_update_rate get="inline" set="null" line="285" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>if this is non zero, updates will be forced to this rate</haxe_doc>
		</get_update_rate>
		<get_max_frame_time get="inline" set="null" line="289" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the maximum frame time</haxe_doc>
		</get_max_frame_time>
		<get_dt get="inline" set="null" line="293" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the time the last frame took to run</haxe_doc>
		</get_dt>
		<get_delta_sim get="inline" set="null" line="297" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the simulated time the last frame took to run, relative to scale etc</haxe_doc>
		</get_delta_sim>
		<get_last_frame_start get="inline" set="null" line="301" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the start time of the last frame</haxe_doc>
		</get_last_frame_start>
		<get_current_time get="inline" set="null" line="305" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the current simulation time</haxe_doc>
		</get_current_time>
		<get_cur_frame_start get="inline" set="null" line="309" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the start time of this frame</haxe_doc>
		</get_cur_frame_start>
		<get_alpha get="inline" set="null" line="313" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>the alpha time for a render between frame updates</haxe_doc>
		</get_alpha>
		<set_timescale get="inline" set="null" line="319" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the scale of time</haxe_doc>
		</set_timescale>
		<set_fixed_delta get="inline" set="null" line="323" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>if this is non zero this will be passed in</haxe_doc>
		</set_fixed_delta>
		<set_update_rate get="inline" set="null" line="327" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>if this is non zero, updates will be forced to this rate</haxe_doc>
		</set_update_rate>
		<set_max_frame_time get="inline" set="null" line="331" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the maximum frame time</haxe_doc>
		</set_max_frame_time>
		<set_dt get="inline" set="null" line="335" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the time the last frame took to run</haxe_doc>
		</set_dt>
		<set_delta_sim get="inline" set="null" line="339" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the simulated time the last frame took to run, relative to scale etc</haxe_doc>
		</set_delta_sim>
		<set_last_frame_start get="inline" set="null" line="343" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the start time of the last frame</haxe_doc>
		</set_last_frame_start>
		<set_current_time get="inline" set="null" line="347" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the current simulation time</haxe_doc>
		</set_current_time>
		<set_cur_frame_start get="inline" set="null" line="351" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the start time of this frame</haxe_doc>
		</set_cur_frame_start>
		<set_alpha get="inline" set="null" line="355" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>the alpha time for a render between frame updates</haxe_doc>
		</set_alpha>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="LuxeApp" params="" file="bin/mac64.build/haxe/LuxeApp.hx">
		<_game public="1" static="1"><c path="Main"/></_game>
		<_core public="1" static="1"><c path="luxe.Core"/></_core>
		<_snow public="1" static="1"><c path="snow.Snow"/></_snow>
		<main public="1" set="method" line="13" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
	</class>
	<class path="luxe.Emitter" params="" file="/Users/sven/dev/luxe/luxe/luxe/Emitter.hx">
		<bindings public="1">
			<x path="Map">
				<c path="String"/>
				<c path="Array"><t path="luxe.EmitHandler"/></c>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</bindings>
		<connected><c path="List"><t path="luxe._Emitter.EmitNode"/></c></connected>
		<_to_remove><c path="List"><t path="luxe._Emitter.EmitNode"/></c></_to_remove>
		<emit public="1" params="T" set="method" line="34">
			<f a="event:?data:?pos" v=":null:null">
				<c path="String"/>
				<c path="emit.T"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Emit a named event</haxe_doc>
		</emit>
		<on public="1" params="T" set="method" line="55">
			<f a="event:handler:?pos" v="::null">
				<c path="String"/>
				<f a="">
					<c path="on.T"/>
					<x path="Void"/>
				</f>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>connect a named event to a handler</haxe_doc>
		</on>
		<off public="1" params="T" set="method" line="77">
			<f a="event:handler:?pos" v="::null">
				<c path="String"/>
				<f a="">
					<c path="off.T"/>
					<x path="Void"/>
				</f>
				<t path="haxe.PosInfos"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>disconnect a named event and handler. returns true on success, or false if event or handler not found</haxe_doc>
		</off>
		<connections public="1" set="method" line="104">
			<f a="handler">
				<t path="luxe.EmitHandler"/>
				<c path="Array"><t path="luxe._Emitter.EmitNode"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</connections>
		<_checking><x path="Bool"/></_checking>
		<_check set="method" line="120"><f a=""><x path="Void"/></f></_check>
		<new public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<haxe_doc>create a new emitter instance, for binding functions easily to named events. similar to `Events`</haxe_doc>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Game" params="" file="/Users/sven/dev/luxe/luxe/luxe/Game.hx">
		<extends path="luxe.Emitter"/>
		<app public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</app>
		<config public="1" set="method" line="22">
			<f a="config">
				<t path="luxe.AppConfig"/>
				<t path="luxe.AppConfig"/>
			</f>
			<haxe_doc>Called by luxe to request config changes, override this to change the defaults.
            This happens before ready, so the values are available when ready is called.</haxe_doc>
		</config>
		<ready public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Your entry point. Called for you when you can initialize your application</haxe_doc>
		</ready>
		<update public="1" set="method" line="26">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide})</haxe_doc>
		</update>
		<onevent public="1" set="method" line="29">
			<f a="event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>very low level event handler from snow core. Often handled by the subsystems and by luxe, so check there first!</haxe_doc>
		</onevent>
		<ondestroy public="1" set="method" line="32">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Your exit point. Called for you when you should shut down your application</haxe_doc>
		</ondestroy>
		<onprerender public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the application is about to render</haxe_doc>
		</onprerender>
		<onrender public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the application is rendering</haxe_doc>
		</onrender>
		<onpostrender public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the application is done rendering</haxe_doc>
		</onpostrender>
		<oninputdown public="1" set="method" line="42">
			<f a="_name:e">
				<c path="String"/>
				<t path="luxe.InputEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a named input down event occurs</haxe_doc>
		</oninputdown>
		<oninputup public="1" set="method" line="44">
			<f a="_name:e">
				<c path="String"/>
				<t path="luxe.InputEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when a named input up event occurs</haxe_doc>
		</oninputup>
		<onmousedown public="1" set="method" line="47">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a mouse button is pressed</haxe_doc>
		</onmousedown>
		<onmouseup public="1" set="method" line="49">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a mouse button is released</haxe_doc>
		</onmouseup>
		<onmousewheel public="1" set="method" line="51">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when the mouse wheel moves</haxe_doc>
		</onmousewheel>
		<onmousemove public="1" set="method" line="53">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when the mouse moves</haxe_doc>
		</onmousemove>
		<onkeydown public="1" set="method" line="56">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a key is pressed down</haxe_doc>
		</onkeydown>
		<onkeyup public="1" set="method" line="58">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a key is released</haxe_doc>
		</onkeyup>
		<ontextinput public="1" set="method" line="60">
			<f a="event">
				<t path="luxe.TextEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc.</haxe_doc>
		</ontextinput>
		<ontouchdown public="1" set="method" line="63">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is first pressed, use the `touch_id` to track which</haxe_doc>
		</ontouchdown>
		<ontouchup public="1" set="method" line="65">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is released, use the `touch_id` to track which</haxe_doc>
		</ontouchup>
		<ontouchmove public="1" set="method" line="67">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is moved, use the `touch_id` to track which</haxe_doc>
		</ontouchmove>
		<ongamepadaxis public="1" set="method" line="70">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad axis moves, use `gamepad` to determine gamepad id</haxe_doc>
		</ongamepadaxis>
		<ongamepaddown public="1" set="method" line="72">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad button is pressed, use `gamepad` to determine gamepad id</haxe_doc>
		</ongamepaddown>
		<ongamepadup public="1" set="method" line="74">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad button is released, use `gamepad` to determine gamepad id</haxe_doc>
		</ongamepadup>
		<ongamepaddevice public="1" set="method" line="76">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a gamepad is connected or disconnected, use `gamepad` to determine gamepad id</haxe_doc>
		</ongamepaddevice>
		<new public="1" set="method" line="16">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empty constructor. Use `ready` instead.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
			<m n=":keepSub"/>
		</meta>
	</class>
	<class path="Main" params="" file="src/Main.hx">
		<extends path="luxe.Game"/>
		<ready public="1" set="method" line="6" override="1"><f a=""><x path="Void"/></f></ready>
		<onkeyup public="1" set="method" line="10" override="1"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></onkeyup>
		<update public="1" set="method" line="18" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1">
		<set public="1" set="method"><f a="k:v">
	<c path="IMap.K"/>
	<c path="IMap.V"/>
	<x path="Void"/>
</f></set>
		<remove public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.V"/></t></f></iterator>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter, 
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, 
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result 
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is 
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of 
		two specified numbers, in radians.
		
		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		This is the mathematical inverse operation of exp, 
		i.e. `log(exp(v)) == v` always holds.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.
		
		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0, 
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result 
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false. 
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta><m n=":include"><e>"hxMath"</e></m></meta>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/cpp/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<callMethod public="1" set="method" line="46" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="53" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<compare public="1" params="T" set="method" line="64" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<isObject public="1" set="method" line="76" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" set="method" line="23" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" line="27" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="31" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="35" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="39" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="47" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/cpp/_std/StringBuf.hx">
		<b><c path="Array"><c path="String"/></c></b>
		<add public="1" params="T" set="method" line="40">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" get="inline" set="null" line="48">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<isSpace public="1" set="method" line="165" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="204" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="226" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="270" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="291" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Sys" params="" file="/usr/lib/haxe/std/cpp/_std/Sys.hx">
		<print public="1" set="method" line="24" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="28" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline</haxe_doc>
		</println>
		<sleep public="1" set="method" line="64" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspend the current execution for the given time (in seconds).</haxe_doc>
		</sleep>
		<setCwd public="1" set="method" line="76" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the current working directory.</haxe_doc>
		</setCwd>
		<_sleep line="136" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></_sleep>
		<set_cwd line="139" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></set_cwd>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/lib/haxe/std/cpp/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="35" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<createInstance public="1" params="T" set="method" line="80" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEnum public="1" params="T" set="method" line="90" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/lib/haxe/std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned Int type is only defined for Flash9 and C#.
	Simulate it for other platforms.</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/lib/haxe/std/UInt.hx" private="1" module="UInt"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<enum path="XmlType" params="" file="/usr/lib/haxe/std/cpp/_std/Xml.hx" module="Xml"><meta><m n=":flatEnum"/></meta></enum>
	<class path="Xml" params="" file="/usr/lib/haxe/std/cpp/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<_parse line="44" static="1"><f a=":">
	<c path="String"/>
	<a>
		<xml><f a="name:att">
	<c path="String"/>
	<d><c path="String"/></d>
	<x path="Void"/>
</f></xml>
		<pcdata><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></pcdata>
		<done><f a=""><x path="Void"/></f></done>
		<doctype><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></doctype>
		<cur><c path="Xml"/></cur>
		<comment><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></comment>
		<cdata><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></cdata>
	</a>
	<unknown/>
</f></_parse>
		<parse public="1" set="method" line="46" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<_nodeName><c path="String"/></_nodeName>
		<_nodeValue><c path="String"/></_nodeValue>
		<_attributes><d><c path="String"/></d></_attributes>
		<_children><c path="Array"><c path="Xml"/></c></_children>
		<_parent><c path="Xml"/></_parent>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<get_nodeName set="method" line="168">
			<f a=""><c path="String"/></f>
			<meta><m n=":accessor"/></meta>
		</get_nodeName>
		<get_nodeValue set="method" line="180">
			<f a=""><c path="String"/></f>
			<meta><m n=":accessor"/></meta>
		</get_nodeValue>
		<get public="1" set="method" line="197">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<exists public="1" set="method" line="219">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="231">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<elements public="1" set="method" line="238">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<firstChild public="1" set="method" line="305">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="311">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="322">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<new set="method" line="41"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="cpp.vm.ThreadHandle" params="" file="/usr/lib/haxe/std/cpp/vm/Thread.hx" module="cpp.vm.Thread"><d/></typedef>
	<class path="cpp.vm.Thread" params="" file="/usr/lib/haxe/std/cpp/vm/Thread.hx">
		<current public="1" set="method" line="45" static="1">
			<f a=""><c path="cpp.vm.Thread"/></f>
			<haxe_doc>Returns the current thread.</haxe_doc>
		</current>
		<readMessage public="1" set="method" line="61" static="1">
			<f a="block">
				<x path="Bool"/>
				<d/>
			</f>
			<haxe_doc>Reads a message from the thread queue. If [block] is true, the function
		blocks until a message is available. If [block] is false, the function
		returns [null] if no message is available.</haxe_doc>
		</readMessage>
		<handle public="1" set="null"><t path="cpp.vm.ThreadHandle"/></handle>
		<new set="method" line="30"><f a="h">
	<t path="cpp.vm.ThreadHandle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="cpp.zip.Compress" params="" file="/usr/lib/haxe/std/cpp/zip/Compress.hx"><c path="haxe.zip.Compress"/></typedef>
	<typedef path="cpp.zip.Flush" params="" file="/usr/lib/haxe/std/cpp/zip/Flush.hx"><e path="haxe.zip.FlushMode"/></typedef>
	<typedef path="cpp.zip.Uncompress" params="" file="/usr/lib/haxe/std/cpp/zip/Uncompress.hx"><c path="haxe.zip.Uncompress"/></typedef>
	<enum path="haxe.StackItem" params="" file="/usr/lib/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/usr/lib/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="43" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<makeStack set="method" line="206" static="1">
			<f a="s">
				<c path="Array"><c path="String"/></c>
				<c path="Array"><e path="haxe.StackItem"/></c>
			</f>
			<meta><m n=":noStack"/></meta>
		</makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/Resource.hx">
		<getString public="1" set="method" line="30" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="33" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as an instance of
		haxe.io.Bytes.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Timer" params="" file="/usr/lib/haxe/std/haxe/Timer.hx">
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.Utf8" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/Utf8.hx">
		<charCodeAt public="1" set="method" line="61" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `String.charCodeAt` but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<__s><c path="Array"><x path="Int"/></c></__s>
		<addChar public="1" set="method" line="35">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="39">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String;</haxe_doc>
		</toString>
		<new public="1" set="method" line="29">
			<f a="?size" v="null">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since all platforms does not guarantee that String always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/usr/lib/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<rol set="method" line="168"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="172"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="176"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<doEncode set="method" line="192"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<remove public="1" set="method" line="82">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the current binding of `key`.

		If `key` has no binding, `this` BalancedTree is unchanged and false is
		returned.

		Otherwise the binding of `key` is removed and true is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="99">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `key` is bound to a value.

		This method returns true even if `key` is bound to null.

		If `key` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="115">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<setLoop set="method" line="132"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<removeLoop set="method" line="145"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<iteratorLoop set="method" line="153"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<merge set="method" line="169"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<minBinding set="method" line="176"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<removeMinBinding set="method" line="182"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<balance set="method" line="187"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="201"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<new public="1" set="method" line="220"><f a="l:k:v:r:?h" v="::::-1">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/usr/lib/haxe/std/cpp/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/lib/haxe/std/cpp/_std/haxe/ds/ObjectMap.hx">
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<__Internal><c path="haxe.ds.IntMap"><c path="haxe.ds.ObjectMap.V"/></c></__Internal>
		<__KeyRefs><c path="haxe.ds.IntMap"><c path="haxe.ds.ObjectMap.K"/></c></__KeyRefs>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="40">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<remove public="1" set="method" line="48">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="58">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<__Internal><d/></__Internal>
		<set public="1" set="method" line="31">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="35">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="39">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method" line="43">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="47">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="53">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.format.JsonParser" params="" file="/usr/lib/haxe/std/haxe/format/JsonParser.hx">
		<str><c path="String"/></str>
		<pos><x path="Int"/></pos>
		<parseRec set="method" line="17"><f a=""><d/></f></parseRec>
		<parseString set="method" line="99"><f a=""><c path="String"/></f></parseString>
		<invalidChar set="method" line="202"><f a=""><x path="Void"/></f></invalidChar>
		<invalidNumber set="method" line="207"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<new set="method" line="12"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="357" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="382" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="435" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="75"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<sub public="1" set="method" line="127"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<getString public="1" set="method" line="261"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<toString public="1" set="method" line="318"><f a=""><c path="String"/></f></toString>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/lib/haxe/std/haxe/io/BytesBuffer.hx">
		<b><t path="haxe.io.BytesData"/></b>
		<addByte public="1" get="inline" set="null" line="76"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getBytes public="1" set="method" line="173">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Unsigned_char__" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData" extern="1"/>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><c path="haxe.io.Unsigned_char__"/></c></typedef>
	<class path="haxe.io.Input" params="" file="/usr/lib/haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="37"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="46"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="67"><f a=""><x path="Void"/></f></close>
		<set_bigEndian set="method" line="70"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="77"><f a="?bufsize" v="null">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readLine public="1" set="method" line="127"><f a=""><c path="String"/></f></readLine>
		<readInt32 public="1" set="method" line="310"><f a=""><x path="Int"/></f></readInt32>
		<haxe_doc>An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="/usr/lib/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<readByte public="1" set="method" line="87" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="108" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len" v=":null:null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/lib/haxe/std/haxe/io/Output.hx">
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Eof" params="" file="/usr/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/lib/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.Path" params="" file="/usr/lib/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="117" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the file extension.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<extension public="1" set="method" line="155" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<join public="1" set="method" line="183" static="1">
			<f a="paths">
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all paths in `paths` together.

		If `paths` is empty, the empty String `""` is returned. Otherwise the
		paths are joined with a slash between them.

		If `paths` is null, the result is unspecified.</haxe_doc>
		</join>
		<normalize public="1" set="method" line="204" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Normalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').

		Also replaces backslashes \ with slashes / and afterwards turns
		multiple slashes into a single one.

		If `path` is null, the result is unspecified.</haxe_doc>
		</normalize>
		<addTrailingSlash public="1" set="method" line="268" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		"".

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="293" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="108">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.excention</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="/usr/lib/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.macro.Expr" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<c path="Array"><e path="haxe.macro.TypeParam"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.Expr"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<extra><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<typedef path="haxe.macro.TFunc" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.zip.Compress" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="45" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_deflate_init line="56" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></_deflate_init>
		<_deflate_bound line="57" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></_deflate_bound>
		<_deflate_buffer line="58" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></_deflate_buffer>
		<_deflate_end line="59" static="1"><f a="">
	<d/>
	<unknown/>
</f></_deflate_end>
		<_set_flush_mode line="60" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="33"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="37"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="41"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="29"><f a="level">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="haxe.zip.FlushMode" params="" file="/usr/lib/haxe/std/haxe/zip/FlushMode.hx">
		<NO/>
		<SYNC/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.zip.Uncompress" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="44" static="1"><f a="src:?bufsize" v=":null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_inflate_init line="62" static="1"><f a="">
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></_inflate_init>
		<_inflate_buffer line="63" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></_inflate_buffer>
		<_inflate_end line="64" static="1"><f a="">
	<d/>
	<unknown/>
</f></_inflate_end>
		<_set_flush_mode line="65" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="32"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<a>
		<write><x path="Int"/></write>
		<read><x path="Int"/></read>
		<done><x path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="36"><f a="f">
	<e path="haxe.zip.FlushMode"/>
	<x path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="40"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="28"><f a="?windowBits" v="null">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="hxcpp.StaticRegexp" params="" file="/Users/sven/dev/haxelib/hxcpp/3,1,48/hxcpp/StaticRegexp.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void regexp_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\r\n<target id='haxe'>\r\n  <lib name='${HXCPP}/lib/${BINDIR}/libregexp${LIBEXTRA}${LIBEXT}'/>\r\n</target>\r\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<class path="hxcpp.StaticStd" params="" file="/Users/sven/dev/haxelib/hxcpp/3,1,48/hxcpp/StaticStd.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void std_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\r\n<target id='haxe'>\r\n  <lib name='${HXCPP}/lib/${BINDIR}/libstd${LIBEXTRA}${LIBEXT}'/>\r\n   <lib name='ws2_32.lib' if='windows'/>\r\n</target>\r\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<class path="hxcpp.StaticZlib" params="" file="/Users/sven/dev/haxelib/hxcpp/3,1,48/hxcpp/StaticZlib.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void zlib_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\r\n<target id='haxe'>\r\n  <lib name='${HXCPP}/lib/${BINDIR}/libzlib${LIBEXTRA}${LIBEXT}'/>\r\n</target>\r\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<typedef path="luxe.AppConfig" params="" file="/Users/sven/dev/luxe/luxe/luxe/AppConfig.hx"><t path="snow.types.AppConfig"/></typedef>
	<class path="luxe.Audio" params="" file="/Users/sven/dev/luxe/luxe/luxe/Audio.hx">
		<core public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<init public="1" set="method" line="17">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<destroy public="1" set="method" line="21">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</destroy>
		<create public="1" set="method" line="32">
			<f a="_id:?_name:?_streaming" v=":'':false">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="luxe.Sound"/>
			</f>
			<haxe_doc>Create a named audio reference, with optional streaming flag   
            **id** The asset file id from which the audio is loaded/streamed.   
            **name** The name to assign the sound for the named api    
            **streaming** Whether or not to stream the audio, default `false`   
            **returns** The `Sound` instance, if needed. can be manipulated through named api as well.</haxe_doc>
		</create>
		<uncreate public="1" set="method" line="39">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroy a named audio reference.
            Use the reference directly with sound.destroy if you have an instance.</haxe_doc>
		</uncreate>
		<on public="1" set="method" line="44">
			<f a="_name:_event:_handler">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="luxe.Sound"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Listen for an event on a named sound. `load` and `end` are valid</haxe_doc>
		</on>
		<off public="1" set="method" line="49">
			<f a="_name:_event:_handler">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="luxe.Sound"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Stop listening for an event on a named sound. See `on`</haxe_doc>
		</off>
		<get public="1" set="method" line="58">
			<f a="_name">
				<c path="String"/>
				<t path="luxe.Sound"/>
			</f>
			<haxe_doc>Fetch a named audio reference   
            **name** The name to acquire audio reference   
            **returns** The `Sound` instance</haxe_doc>
		</get>
		<exists public="1" set="method" line="67">
			<f a="_name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determine whether a named audio reference exists   
            **name** The audio reference name to check   
            **returns** true/false</haxe_doc>
		</exists>
		<on_complete public="1" set="method" line="77">
			<f a="_name:handler">
				<c path="String"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the on complete handler for a named audio reference   
            **name** The audio reference name to assign to   
            **handler** The callback to call when playback is complete   
            **returns** nothing</haxe_doc>
		</on_complete>
		<loop public="1" set="method" line="86">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loop a named audio reference indefinitely. Use `stop` if needed.   
            **name** The audio reference name to loop   
            **returns** nothing</haxe_doc>
		</loop>
		<stop public="1" set="method" line="95">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stop a named audio reference from playing (or looping)   
            **name** The audio reference name to stop   
            **returns** nothing</haxe_doc>
		</stop>
		<play public="1" set="method" line="104">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Play a named audio reference   
            **name** The audio reference name to play   
            **returns** nothing</haxe_doc>
		</play>
		<pause public="1" set="method" line="113">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pause a named audio reference   
            **name** The audio reference name to pause   
            **returns** nothing</haxe_doc>
		</pause>
		<toggle public="1" set="method" line="119">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle a sound instance by name, pausing the sound or resuming it</haxe_doc>
		</toggle>
		<volume public="1" set="method" line="129">
			<f a="_name:?_volume" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>get/set the volume of a named audio reference,   
            leave the second argument empty for get   
            **name** The audio reference name to adjust   
            **volume** A new volume value</haxe_doc>
		</volume>
		<pan public="1" set="method" line="139">
			<f a="_name:?_pan" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>get/set the pan of a named audio reference,   
            leave the second argument empty for get   
            **name** The audio reference name to adjust   
            **pan** A new pan value</haxe_doc>
		</pan>
		<pitch public="1" set="method" line="149">
			<f a="_name:?_pitch" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>get/set the pitch of a named audio reference,   
            leave the second argument empty for get   
            **name** The audio reference name to adjust   
            **pitch** A new pitch value</haxe_doc>
		</pitch>
		<position public="1" set="method" line="158">
			<f a="_name:?_position" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>get/set the position in `seconds` of a named audio reference,   
            leave the second argument empty for get   
            **name** The audio reference name to adjust   
            **pan** A new pan value</haxe_doc>
		</position>
		<duration public="1" set="method" line="166">
			<f a="_name">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>get the position in seconds of a named audio reference   
            **name** The audio reference name to get</haxe_doc>
		</duration>
		<process public="1" set="method" line="170">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<new public="1" set="method" line="11">
			<f a="_core">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.ProjectionType" params="" file="/Users/sven/dev/luxe/luxe/luxe/Camera.hx" module="luxe.Camera"><e path="phoenix.ProjectionType"/></typedef>
	<enum path="luxe.SizeMode" params="" file="/Users/sven/dev/luxe/luxe/luxe/Camera.hx" module="luxe.Camera">
		<fit><haxe_doc>fit the size into the camera viewport (possible letter/pillar box)</haxe_doc></fit>
		<cover><haxe_doc>cover the viewport with the size (possible cropping)</haxe_doc></cover>
		<contain><haxe_doc>contain the size (stretch to fit the viewport)</haxe_doc></contain>
		<haxe_doc>A value to use when controlling the camera size property only.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.Objects" params="" file="/Users/sven/dev/luxe/luxe/luxe/Objects.hx">
		<extends path="luxe.Emitter"/>
		<id public="1">
			<c path="String"/>
			<haxe_doc>the id</haxe_doc>
		</id>
		<name public="1">
			<c path="String"/>
			<haxe_doc>the name</haxe_doc>
		</name>
		<new public="1" set="method" line="28">
			<f a="?_name:?_id" v="'':''">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<haxe_doc>A simple base object, event emitter, and ID.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Entity" params="" file="/Users/sven/dev/luxe/luxe/luxe/Entity.hx">
		<extends path="luxe.Objects"/>
		<components public="1" get="accessor" set="null">
			<x path="Map">
				<c path="String"/>
				<c path="luxe.Component"/>
			</x>
			<haxe_doc>The map of attached components, by name. use .get to find components in children and from other components instead of accessing this unless you need to</haxe_doc>
		</components>
		<events public="1">
			<c path="luxe.Events"/>
			<haxe_doc>A local event system for sending and receiving named events through the entity. Helps communicate between components, and more.</haxe_doc>
		</events>
		<children public="1">
			<c path="Array"><c path="luxe.Entity"/></c>
			<haxe_doc>The list of children this entity is parenting. Use `child.parent = null;` to remove, or `child.parent = entity;` to assign.</haxe_doc>
		</children>
		<destroyed public="1">
			<x path="Bool"/>
			<haxe_doc>whether or not this entity has been destroyed</haxe_doc>
		</destroyed>
		<inited public="1">
			<x path="Bool"/>
			<haxe_doc>whether or not this entity has been inited yet</haxe_doc>
		</inited>
		<started public="1">
			<x path="Bool"/>
			<haxe_doc>whether or not this entity has been started/reset by the scene</haxe_doc>
		</started>
		<fixed_rate public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>per entity fixed rate timer, if any. if 0 (default) no fixed update is called on this entity.</haxe_doc>
		</fixed_rate>
		<parent public="1" get="accessor" set="accessor">
			<c path="luxe.Entity"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The parent entity if any, set to null for no parent</haxe_doc>
		</parent>
		<scene public="1" get="accessor" set="accessor">
			<c path="luxe.Scene"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>if the entity is in a scene, this is not null</haxe_doc>
		</scene>
		<active public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>if the entity is active in the scene or not. set to inactive to stop scene events propogating into this entity and it's components and children</haxe_doc>
		</active>
		<transform public="1">
			<t path="luxe.Transform"/>
			<haxe_doc>The spatial transform of the entity.</haxe_doc>
		</transform>
		<pos public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The local position of the spatial transform</haxe_doc>
		</pos>
		<rotation public="1" get="accessor" set="accessor">
			<t path="luxe.Quaternion"/>
			<haxe_doc>The local rotation of the spatial transform</haxe_doc>
		</rotation>
		<scale public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The local scale of the spatial transform</haxe_doc>
		</scale>
		<origin public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The local origin of the spatial transform</haxe_doc>
		</origin>
		<_components>
			<c path="luxe.components.Components"/>
			<haxe_doc>the system for the entity</haxe_doc>
		</_components>
		<fixed_rate_timer>
			<c path="snow.utils.Timer"/>
			<haxe_doc>the timer for the fixed update</haxe_doc>
		</fixed_rate_timer>
		<options>
			<d/>
			<haxe_doc>the options passed in for giving to the init function</haxe_doc>
		</options>
		<init public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>called when the scene is initiated. **use this instead of new** for state setup. it respects the order of creations, children, and component ordering.</haxe_doc>
		</init>
		<update public="1" set="method" line="69">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>called once per frame, passing the delta time</haxe_doc>
		</update>
		<onfixedupdate public="1" set="method" line="71">
			<f a="rate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>called once per fixed rate, only if fixed_rate != 0</haxe_doc>
		</onfixedupdate>
		<onreset public="1" set="method" line="74">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>called when the scene starts or is reset. use this to reset state.</haxe_doc>
		</onreset>
		<ondestroy public="1" set="method" line="76">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>called when the scene, parent or entity is destroyed. use this to clean up state.</haxe_doc>
		</ondestroy>
		<onkeyup public="1" set="method" line="79">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a key is released. only called if overridden.</haxe_doc>
		</onkeyup>
		<onkeydown public="1" set="method" line="81">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a key is pressed. only called if overridden.</haxe_doc>
		</onkeydown>
		<ontextinput public="1" set="method" line="83">
			<f a="event">
				<t path="luxe.TextEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a text input event happens. only called if overridden.</haxe_doc>
		</ontextinput>
		<oninputdown public="1" set="method" line="86">
			<f a="name:event">
				<c path="String"/>
				<t path="luxe.InputEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a named input event happens. only called if overridden.</haxe_doc>
		</oninputdown>
		<oninputup public="1" set="method" line="88">
			<f a="name:event">
				<c path="String"/>
				<t path="luxe.InputEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a named input event happens. only called if overridden.</haxe_doc>
		</oninputup>
		<onmousedown public="1" set="method" line="91">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a mouse button is pressed. only called if overridden.</haxe_doc>
		</onmousedown>
		<onmouseup public="1" set="method" line="93">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a mouse button is pressed. only called if overridden.</haxe_doc>
		</onmouseup>
		<onmousemove public="1" set="method" line="95">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a mouse is moved. only called if overridden.</haxe_doc>
		</onmousemove>
		<onmousewheel public="1" set="method" line="97">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when the mouse wheel/trackpad is scrolled. only called if overridden.</haxe_doc>
		</onmousewheel>
		<ontouchdown public="1" set="method" line="100">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a touch begins. only called if overridden.</haxe_doc>
		</ontouchdown>
		<ontouchup public="1" set="method" line="102">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a touch ends. only called if overridden.</haxe_doc>
		</ontouchup>
		<ontouchmove public="1" set="method" line="104">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a touch moves. only called if overridden.</haxe_doc>
		</ontouchmove>
		<ongamepadup public="1" set="method" line="107">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad button is released. only called if overridden.</haxe_doc>
		</ongamepadup>
		<ongamepaddown public="1" set="method" line="109">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad button is pressed. only called if overridden.</haxe_doc>
		</ongamepaddown>
		<ongamepadaxis public="1" set="method" line="111">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad axis changes. only called if overridden.</haxe_doc>
		</ongamepadaxis>
		<ongamepaddevice public="1" set="method" line="113">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad device event happens. only called if overridden.</haxe_doc>
		</ongamepaddevice>
		<add public="1" params="T" set="method" line="230">
			<f a="_component">
				<c path="add.T"/>
				<c path="add.T"/>
			</f>
			<haxe_doc>attach a component to the entity</haxe_doc>
		</add>
		<remove public="1" set="method" line="235">
			<f a="_name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>remove a component from the entity</haxe_doc>
		</remove>
		<get public="1" params="T" set="method" line="240">
			<f a="_name:?_in_children" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="get.T"/>
			</f>
			<haxe_doc>get a component from the entity, by name</haxe_doc>
		</get>
		<get_any public="1" params="T" set="method" line="245">
			<f a="_name:?_in_children:?_first_only" v=":false:true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="Array"><c path="get_any.T"/></c>
			</f>
			<haxe_doc>get all component from the entity, by name</haxe_doc>
		</get_any>
		<has public="1" set="method" line="250">
			<f a="_name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the entity has a component by the given name</haxe_doc>
		</has>
		<_init public="1" set="method" line="259">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_init>
		<_reset public="1" set="method" line="287">
			<f a="_">
				<unknown/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_reset>
		<destroy public="1" set="method" line="316">
			<f a="?_from_parent" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>destroy this entity. removes it from the scene if any, from the parent etc.</haxe_doc>
		</destroy>
		<_update public="1" set="method" line="371">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_update>
		<_fixed_update public="1" set="method" line="411">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_fixed_update>
		<_listen public="1" set="method" line="439">
			<f a="_event:_handler:?_self" v="::false">
				<c path="String"/>
				<t path="luxe.EmitHandler"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_listen>
		<_unlisten public="1" set="method" line="481">
			<f a="_event:_handler:?_self" v="::false">
				<c path="String"/>
				<t path="luxe.EmitHandler"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_unlisten>
		<_detach_scene set="method" line="492"><f a=""><x path="Void"/></f></_detach_scene>
		<_attach_scene set="method" line="521"><f a=""><x path="Void"/></f></_attach_scene>
		<_keyup public="1" set="method" line="532">
			<f a="_event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_keyup>
		<_keydown public="1" set="method" line="545">
			<f a="_event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_keydown>
		<_textinput public="1" set="method" line="558">
			<f a="_event">
				<t path="luxe.TextEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_textinput>
		<_mousedown public="1" set="method" line="574">
			<f a="_event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_mousedown>
		<_mouseup public="1" set="method" line="588">
			<f a="_event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_mouseup>
		<_mousewheel public="1" set="method" line="601">
			<f a="_event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_mousewheel>
		<_mousemove public="1" set="method" line="614">
			<f a="_event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_mousemove>
		<_touchdown public="1" set="method" line="628">
			<f a="_event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_touchdown>
		<_touchup public="1" set="method" line="641">
			<f a="_event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_touchup>
		<_touchmove public="1" set="method" line="654">
			<f a="_event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_touchmove>
		<_gamepadaxis public="1" set="method" line="668">
			<f a="_event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_gamepadaxis>
		<_gamepaddown public="1" set="method" line="681">
			<f a="_event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_gamepaddown>
		<_gamepadup public="1" set="method" line="694">
			<f a="_event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_gamepadup>
		<_gamepaddevice public="1" set="method" line="707">
			<f a="_event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_gamepaddevice>
		<_inputdown public="1" set="method" line="722">
			<f a="_event">
				<a>
					<name><c path="String"/></name>
					<event><t path="luxe.InputEvent"/></event>
				</a>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_inputdown>
		<_inputup public="1" set="method" line="735">
			<f a="_event">
				<a>
					<name><c path="String"/></name>
					<event><t path="luxe.InputEvent"/></event>
				</a>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_inputup>
		<get_fixed_rate set="method" line="751"><f a=""><x path="Float"/></f></get_fixed_rate>
		<set_fixed_rate set="method" line="757"><f a="_rate">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fixed_rate>
		<_stop_fixed_rate_timer set="method" line="769"><f a=""><x path="Void"/></f></_stop_fixed_rate_timer>
		<_set_fixed_rate_timer set="method" line="778"><f a="_rate:?_pos" v=":null">
	<x path="Float"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></_set_fixed_rate_timer>
		<get_components set="method" line="794"><f a=""><x path="Map">
	<c path="String"/>
	<c path="luxe.Component"/>
</x></f></get_components>
		<_add_child public="1" set="method" line="800">
			<f a="child">
				<c path="luxe.Entity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_add_child>
		<_remove_child public="1" set="method" line="817">
			<f a="child">
				<c path="luxe.Entity"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_remove_child>
		<set_pos_from_transform set="method" line="825"><f a="_pos">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_pos_from_transform>
		<set_rotation_from_transform set="method" line="834"><f a="_rotation">
	<t path="luxe.Quaternion"/>
	<x path="Void"/>
</f></set_rotation_from_transform>
		<set_scale_from_transform set="method" line="843"><f a="_scale">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_scale_from_transform>
		<set_origin_from_transform set="method" line="852"><f a="_origin">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_origin_from_transform>
		<set_parent_from_transform set="method" line="861"><f a="_parent">
	<t path="luxe.Transform"/>
	<x path="Void"/>
</f></set_parent_from_transform>
		<set_pos set="method" line="872"><f a="_p">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<get_pos set="method" line="878"><f a=""><c path="phoenix.Vector"/></f></get_pos>
		<set_rotation set="method" line="886"><f a="_r">
	<t path="luxe.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></set_rotation>
		<get_rotation set="method" line="892"><f a=""><c path="phoenix.Quaternion"/></f></get_rotation>
		<set_scale set="method" line="900"><f a="_s">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_scale>
		<get_scale set="method" line="906"><f a=""><c path="phoenix.Vector"/></f></get_scale>
		<set_origin set="method" line="914"><f a="_origin">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_origin>
		<get_origin set="method" line="921"><f a=""><c path="phoenix.Vector"/></f></get_origin>
		<set_parent set="method" line="929"><f a="other">
	<c path="luxe.Entity"/>
	<c path="luxe.Entity"/>
</f></set_parent>
		<get_parent set="method" line="955"><f a=""><c path="luxe.Entity"/></f></get_parent>
		<set_scene set="method" line="963"><f a="_scene">
	<c path="luxe.Scene"/>
	<c path="luxe.Scene"/>
</f></set_scene>
		<get_scene set="method" line="975"><f a=""><c path="luxe.Scene"/></f></get_scene>
		<set_active set="method" line="983"><f a="_active">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_active>
		<get_active set="method" line="989"><f a=""><x path="Bool"/></f></get_active>
		<new public="1" set="method" line="117">
			<f a="?_options" v="null">
				<t path="luxe.options.EntityOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new entity with the given options</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.Camera" params="" file="/Users/sven/dev/luxe/luxe/luxe/Camera.hx">
		<extends path="luxe.Entity"/>
		<viewport public="1" get="accessor" set="accessor">
			<t path="luxe.Rectangle"/>
			<haxe_doc>The viewport size for this camera, proxy to the view</haxe_doc>
		</viewport>
		<center public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The center point of this camera, proxy to the view</haxe_doc>
		</center>
		<zoom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The current zoom value this camera can be set to, proxy to the view</haxe_doc>
		</zoom>
		<minimum_zoom public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The minimum zoom value this camera can be set to, proxy to the view</haxe_doc>
		</minimum_zoom>
		<size public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The virtual size of this camera. allows simple upscaling world coordinates, using `size_mode`. Note that this changes the view `scale` values and the `center` property.</haxe_doc>
		</size>
		<size_mode public="1" get="accessor" set="accessor">
			<e path="luxe.SizeMode"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>When the size of the world is set using the `size` property, this controls how the scaling will apply.</haxe_doc>
		</size_mode>
		<view public="1">
			<c path="phoenix.Camera"/>
			<haxe_doc>the view camera this entity wraps</haxe_doc>
		</view>
		<bounds public="1">
			<t path="luxe.Rectangle"/>
			<haxe_doc>if set, the camera will not move outside of this region (world space)</haxe_doc>
		</bounds>
		<shake_vector public="1">
			<t path="luxe.Vector"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>the current shake vector amounts in x,y,z</haxe_doc>
		</shake_vector>
		<shake_amount public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>the last shake amount</haxe_doc>
		</shake_amount>
		<shaking public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>if true, shake is busy happening</haxe_doc>
		</shaking>
		<minimum_shake public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>the threshold cutoff for shaking</haxe_doc>
		</minimum_shake>
		<update_view_pos><t path="luxe.Vector"/></update_view_pos>
		<_size_factor><t path="luxe.Vector"/></_size_factor>
		<_final_pos><t path="luxe.Vector"/></_final_pos>
		<_rotation_radian><t path="luxe.Vector"/></_rotation_radian>
		<_rotation_cache><c path="phoenix.Quaternion"/></_rotation_cache>
		<get_viewport set="method" line="101"><f a=""><t path="luxe.Rectangle"/></f></get_viewport>
		<set_viewport set="method" line="105"><f a="_v">
	<t path="luxe.Rectangle"/>
	<t path="luxe.Rectangle"/>
</f></set_viewport>
		<get_center set="method" line="109"><f a=""><t path="luxe.Vector"/></f></get_center>
		<set_center set="method" line="113"><f a="_c">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_center>
		<get_minimum_zoom set="method" line="120"><f a=""><x path="Float"/></f></get_minimum_zoom>
		<set_minimum_zoom set="method" line="124"><f a="_m">
	<x path="Float"/>
	<x path="Float"/>
</f></set_minimum_zoom>
		<get_zoom set="method" line="128"><f a=""><x path="Float"/></f></get_zoom>
		<set_zoom set="method" line="132"><f a="_z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_zoom>
		<get_size set="method" line="147"><f a=""><t path="luxe.Vector"/></f></get_size>
		<get_size_mode set="method" line="151"><f a=""><e path="luxe.SizeMode"/></f></get_size_mode>
		<set_size_mode set="method" line="155"><f a="_m">
	<e path="luxe.SizeMode"/>
	<e path="luxe.SizeMode"/>
</f></set_size_mode>
		<set_size set="method" line="168"><f a="_size">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_size>
		<focus public="1" set="method" line="221">
			<f a="_p:?_t:?oncomplete" v=":0.6f:null">
				<t path="luxe.Vector"/>
				<x path="Float"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Focus the camera on a specific point, for Ortho only.
        Use `.target` for a focus in perspective</haxe_doc>
		</focus>
		<screen_point_to_world public="1" set="method" line="232">
			<f a="_vector">
				<t path="luxe.Vector"/>
				<t path="luxe.Vector"/>
			</f>
			<haxe_doc>convert a screen point to world space for this camera. handles zoom, rotation, scale, etc</haxe_doc>
		</screen_point_to_world>
		<world_point_to_screen public="1" set="method" line="239">
			<f a="_vector:?_viewport" v=":null">
				<t path="luxe.Vector"/>
				<t path="luxe.Rectangle"/>
				<t path="luxe.Vector"/>
			</f>
			<haxe_doc>convert a world point to screen space for this camera. handles zoom, rotation, scale, etc</haxe_doc>
		</world_point_to_screen>
		<set_pos_from_transform set="method" line="246" override="1"><f a="_pos">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_pos_from_transform>
		<set_rotation_from_transform set="method" line="277" override="1"><f a="_rotation">
	<c path="phoenix.Quaternion"/>
	<x path="Void"/>
</f></set_rotation_from_transform>
		<set_scale_from_transform set="method" line="287" override="1"><f a="_scale">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_scale_from_transform>
		<shake public="1" set="method" line="298">
			<f a="amount">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Shake the camera a given amount</haxe_doc>
		</shake>
		<update public="1" set="method" line="306" override="1">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</update>
		<init public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></init>
		<ondestroy public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<new public="1" set="method" line="67">
			<f a="?options" v="null">
				<t path="luxe.options.LuxeCameraOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>create a new camera with the given options</haxe_doc>
		</new>
		<haxe_doc>An entity based camera class</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="luxe.Circle" params="" file="/Users/sven/dev/luxe/luxe/luxe/Circle.hx"><c path="phoenix.Circle"/></typedef>
	<typedef path="luxe.Color" params="" file="/Users/sven/dev/luxe/luxe/luxe/Color.hx"><c path="phoenix.Color"/></typedef>
	<typedef path="luxe.ColorHSV" params="" file="/Users/sven/dev/luxe/luxe/luxe/Color.hx" module="luxe.Color"><c path="phoenix.ColorHSV"/></typedef>
	<typedef path="luxe.ColorHSL" params="" file="/Users/sven/dev/luxe/luxe/luxe/Color.hx" module="luxe.Color"><c path="phoenix.ColorHSL"/></typedef>
	<class path="luxe.ID" params="" file="/Users/sven/dev/luxe/luxe/luxe/Objects.hx" module="luxe.Objects">
		<id public="1">
			<c path="String"/>
			<haxe_doc>the id</haxe_doc>
		</id>
		<name public="1">
			<c path="String"/>
			<haxe_doc>the name</haxe_doc>
		</name>
		<new public="1" set="method" line="10">
			<f a="?_name:?_id" v="'':''">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Component" params="" file="/Users/sven/dev/luxe/luxe/luxe/Component.hx">
		<extends path="luxe.ID"/>
		<entity public="1" get="accessor" set="accessor">
			<c path="luxe.Entity"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the entity this component is attached to</haxe_doc>
		</entity>
		<transform public="1">
			<t path="luxe.Transform"/>
			<haxe_doc>The spatial transform of the attached entity. direct proxy to the entity transform</haxe_doc>
		</transform>
		<pos public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The local position of the spatial transform. direct proxy to the entity transform</haxe_doc>
		</pos>
		<rotation public="1" get="accessor" set="accessor">
			<t path="luxe.Quaternion"/>
			<haxe_doc>The local rotation of the spatial transform. direct proxy to the entity transform</haxe_doc>
		</rotation>
		<scale public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The local scale of the spatial transform. direct proxy to the entity transform</haxe_doc>
		</scale>
		<origin public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The local origin of the spatial transform. direct proxy to the entity transform</haxe_doc>
		</origin>
		<init public="1" set="method" line="32">
			<f a=""><x path="Void"/></f>
			<haxe_doc>called when the scene is initiated. **use this instead of new** for state setup. it respects the order of creations, children, and component ordering.</haxe_doc>
		</init>
		<update public="1" set="method" line="34">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>called once per frame, passing the delta time</haxe_doc>
		</update>
		<onadded public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<haxe_doc>called when the component is attached to an entity</haxe_doc>
		</onadded>
		<onremoved public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>called when the component is removed from an entity</haxe_doc>
		</onremoved>
		<onfixedupdate public="1" set="method" line="42">
			<f a="rate">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>called when the fixed update is triggered, if the entity has a fixed_rate set. hands the fixed_rate for interchangeable update/fixedupdate convenience</haxe_doc>
		</onfixedupdate>
		<onreset public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>called when the scene starts or is reset. use this to reset state.</haxe_doc>
		</onreset>
		<ondestroy public="1" set="method" line="46">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>called when the scene, parent or entity is destroyed. use this to clean up state.</haxe_doc>
		</ondestroy>
		<onkeyup public="1" set="method" line="49">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a key is released. only called if overridden.</haxe_doc>
		</onkeyup>
		<onkeydown public="1" set="method" line="51">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a key is pressed. only called if overridden.</haxe_doc>
		</onkeydown>
		<ontextinput public="1" set="method" line="53">
			<f a="event">
				<t path="luxe.TextEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a text input event happens. only called if overridden.</haxe_doc>
		</ontextinput>
		<oninputdown public="1" set="method" line="56">
			<f a="event">
				<a>
					<name><c path="String"/></name>
					<event><t path="luxe.InputEvent"/></event>
				</a>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a named input event happens. only called if overridden.</haxe_doc>
		</oninputdown>
		<oninputup public="1" set="method" line="58">
			<f a="event">
				<a>
					<name><c path="String"/></name>
					<event><t path="luxe.InputEvent"/></event>
				</a>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a named input event happens. only called if overridden.</haxe_doc>
		</oninputup>
		<onmousedown public="1" set="method" line="61">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a mouse button is pressed. only called if overridden.</haxe_doc>
		</onmousedown>
		<onmouseup public="1" set="method" line="63">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a mouse button is pressed. only called if overridden.</haxe_doc>
		</onmouseup>
		<onmousemove public="1" set="method" line="65">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a mouse is moved. only called if overridden.</haxe_doc>
		</onmousemove>
		<onmousewheel public="1" set="method" line="67">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when the mouse wheel/trackpad is scrolled. only called if overridden.</haxe_doc>
		</onmousewheel>
		<ontouchdown public="1" set="method" line="70">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a touch begins. only called if overridden.</haxe_doc>
		</ontouchdown>
		<ontouchup public="1" set="method" line="72">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a touch ends. only called if overridden.</haxe_doc>
		</ontouchup>
		<ontouchmove public="1" set="method" line="74">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a touch moves. only called if overridden.</haxe_doc>
		</ontouchmove>
		<ongamepadup public="1" set="method" line="77">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad button is released. only called if overridden.</haxe_doc>
		</ongamepadup>
		<ongamepaddown public="1" set="method" line="79">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad button is pressed. only called if overridden.</haxe_doc>
		</ongamepaddown>
		<ongamepadaxis public="1" set="method" line="81">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad axis changes. only called if overridden.</haxe_doc>
		</ongamepadaxis>
		<ongamepaddevice public="1" set="method" line="83">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>override this to get notified when a gamepad device event happens. only called if overridden.</haxe_doc>
		</ongamepaddevice>
		<add public="1" params="T" set="method" line="103">
			<f a="component">
				<c path="add.T"/>
				<c path="add.T"/>
			</f>
			<haxe_doc>attach a component to the entity</haxe_doc>
		</add>
		<remove public="1" set="method" line="108">
			<f a="_name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>remove a component from the entity</haxe_doc>
		</remove>
		<get public="1" params="T" set="method" line="113">
			<f a="_name:?in_children" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="get.T"/>
			</f>
			<haxe_doc>get a component from the entity, by name</haxe_doc>
		</get>
		<get_any public="1" params="T" set="method" line="118">
			<f a="_name:?in_children:?first_only" v=":false:true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="Array"><c path="get_any.T"/></c>
			</f>
			<haxe_doc>get all component from the entity, by name</haxe_doc>
		</get_any>
		<has public="1" set="method" line="123">
			<f a="_name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the entity has a component by the given name</haxe_doc>
		</has>
		<_detach_entity set="method" line="131"><f a=""><x path="Void"/></f></_detach_entity>
		<_attach_entity set="method" line="139"><f a=""><x path="Void"/></f></_attach_entity>
		<set_entity set="method" line="147"><f a="_entity">
	<c path="luxe.Entity"/>
	<c path="luxe.Entity"/>
</f></set_entity>
		<get_entity set="method" line="159"><f a=""><c path="luxe.Entity"/></f></get_entity>
		<set_pos set="method" line="167"><f a="_p">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<get_pos set="method" line="171"><f a=""><c path="phoenix.Vector"/></f></get_pos>
		<set_rotation set="method" line="175"><f a="_r">
	<t path="luxe.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></set_rotation>
		<get_rotation set="method" line="179"><f a=""><c path="phoenix.Quaternion"/></f></get_rotation>
		<set_scale set="method" line="183"><f a="_s">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_scale>
		<get_scale set="method" line="187"><f a=""><c path="phoenix.Vector"/></f></get_scale>
		<set_origin set="method" line="191"><f a="_o">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_origin>
		<get_origin set="method" line="195"><f a=""><c path="phoenix.Vector"/></f></get_origin>
		<set_transform set="method" line="199"><f a="_o">
	<t path="luxe.Transform"/>
	<t path="luxe.Transform"/>
</f></set_transform>
		<get_transform set="method" line="203"><f a=""><t path="luxe.Transform"/></f></get_transform>
		<entity_pos_change public="1" set="method" line="207">
			<f a="_pos">
				<t path="luxe.Vector"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</entity_pos_change>
		<entity_scale_change public="1" set="method" line="208">
			<f a="_scale">
				<t path="luxe.Vector"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</entity_scale_change>
		<entity_rotation_change public="1" set="method" line="209">
			<f a="_rotation">
				<t path="luxe.Quaternion"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</entity_rotation_change>
		<entity_origin_change public="1" set="method" line="210">
			<f a="_origin">
				<t path="luxe.Vector"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</entity_origin_change>
		<entity_parent_change public="1" set="method" line="211">
			<f a="_parent">
				<t path="luxe.Transform"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</entity_parent_change>
		<new public="1" set="method" line="86">
			<f a="?_options" v="null">
				<t path="luxe.options.ComponentOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Use this to pass instance specific data and values to the component.</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="luxe._Core.LoadTextureInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Core.hx" private="1" module="luxe.Core"><a>
	<onloaded><f a="">
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></onloaded>
	<id><c path="String"/></id>
	<bytes><t path="snow.utils.ByteArray"/></bytes>
</a></typedef>
	<typedef path="luxe._Core.LoadShaderInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Core.hx" private="1" module="luxe.Core"><a>
	<vs_id><c path="String"/></vs_id>
	<ps_id><c path="String"/></ps_id>
	<onloaded><f a="">
	<c path="phoenix.Shader"/>
	<x path="Void"/>
</f></onloaded>
</a></typedef>
	<enum path="luxe._Core.CoreThreadRequest" params="" file="/Users/sven/dev/luxe/luxe/luxe/Core.hx" private="1" module="luxe.Core">
		<load_texture/>
		<load_shader/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="snow.App" params="" file="/Users/sven/dev/snow/snow/App.hx">
		<app public="1">
			<c path="snow.Snow"/>
			<haxe_doc>use this to access the api features. *i.e* `app.assets.text(_id)`</haxe_doc>
		</app>
		<timescale public="1">
			<x path="Float"/>
			<haxe_doc>the scale of time</haxe_doc>
		</timescale>
		<fixed_delta public="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero this will be passed in</haxe_doc>
		</fixed_delta>
		<render_rate public="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero, rendering will be forced to this rate</haxe_doc>
		</render_rate>
		<update_rate public="1">
			<x path="Float"/>
			<haxe_doc>if this is non zero, updates will be forced to this rate</haxe_doc>
		</update_rate>
		<max_frame_time public="1">
			<x path="Float"/>
			<haxe_doc>the maximum frame time</haxe_doc>
		</max_frame_time>
		<delta_time public="1">
			<x path="Float"/>
			<haxe_doc>the time the last frame took to run</haxe_doc>
		</delta_time>
		<delta_sim public="1">
			<x path="Float"/>
			<haxe_doc>the simulated time the last frame took to run, relative to scale etc</haxe_doc>
		</delta_sim>
		<last_frame_start public="1">
			<x path="Float"/>
			<haxe_doc>the start time of the last frame</haxe_doc>
		</last_frame_start>
		<current_time public="1">
			<x path="Float"/>
			<haxe_doc>the current simulation time</haxe_doc>
		</current_time>
		<cur_frame_start public="1">
			<x path="Float"/>
			<haxe_doc>the start time of this frame</haxe_doc>
		</cur_frame_start>
		<alpha public="1">
			<x path="Float"/>
			<haxe_doc>the alpha time for a render between frame updates</haxe_doc>
		</alpha>
		<next_tick>
			<x path="Float"/>
			<haxe_doc>for update_rate, the time when the next tick should occur around</haxe_doc>
		</next_tick>
		<next_render>
			<x path="Float"/>
			<haxe_doc>for update_rate, the time when the next tick should occur around</haxe_doc>
		</next_render>
		<config public="1" set="method" line="59">
			<f a="config">
				<t path="snow.types.AppConfig"/>
				<t path="snow.types.AppConfig"/>
			</f>
			<haxe_doc>Called by snow to request config changes, override this to change the defaults.
            This happens before ready, so the values are available when ready is called.</haxe_doc>
		</config>
		<ready public="1" set="method" line="61">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Your entry point. Called for you when you can initialize your application</haxe_doc>
		</ready>
		<update public="1" set="method" line="63">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide})</haxe_doc>
		</update>
		<ondestroy public="1" set="method" line="65">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Your exit point. Called for you when you should shut down your application</haxe_doc>
		</ondestroy>
		<onevent public="1" set="method" line="67">
			<f a="event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Low level event handler from snow core. Often handled by the subsystems so check there first.</haxe_doc>
		</onevent>
		<onkeydown public="1" set="method" line="70">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a key is pressed down</haxe_doc>
		</onkeydown>
		<onkeyup public="1" set="method" line="72">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a key is released</haxe_doc>
		</onkeyup>
		<ontextinput public="1" set="method" line="74">
			<f a="text:start:length:type:timestamp:window_id">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="snow.types.TextEventType"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc.</haxe_doc>
		</ontextinput>
		<onmousedown public="1" set="method" line="77">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a mouse button is pressed</haxe_doc>
		</onmousedown>
		<onmouseup public="1" set="method" line="79">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a mouse button is released</haxe_doc>
		</onmouseup>
		<onmousewheel public="1" set="method" line="81">
			<f a="x:y:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when the mouse wheel moves</haxe_doc>
		</onmousewheel>
		<onmousemove public="1" set="method" line="83">
			<f a="x:y:xrel:yrel:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when the mouse moves</haxe_doc>
		</onmousemove>
		<ontouchdown public="1" set="method" line="86">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is released, use the `touch_id` to track which</haxe_doc>
		</ontouchdown>
		<ontouchup public="1" set="method" line="88">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is first pressed, use the `touch_id` to track which</haxe_doc>
		</ontouchup>
		<ontouchmove public="1" set="method" line="90">
			<f a="x:y:dx:dy:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a touch is moved, use the `touch_id` to track which</haxe_doc>
		</ontouchmove>
		<ongamepadaxis public="1" set="method" line="93">
			<f a="gamepad:axis:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad axis moves, use `which` to determine gamepad id</haxe_doc>
		</ongamepadaxis>
		<ongamepaddown public="1" set="method" line="95">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad button is pressed, use `which` to determine gamepad id</haxe_doc>
		</ongamepaddown>
		<ongamepadup public="1" set="method" line="97">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a connected gamepad button is released, use `which` to determine gamepad id</haxe_doc>
		</ongamepadup>
		<ongamepaddevice public="1" set="method" line="99">
			<f a="gamepad:type:timestamp">
				<x path="Int"/>
				<x path="snow.types.GamepadDeviceEventType"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called for you when a gamepad is connected or disconnected, use `which` to determine gamepad id</haxe_doc>
		</ongamepaddevice>
		<on_internal_init set="method" line="108">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</on_internal_init>
		<on_internal_update set="method" line="118">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</on_internal_update>
		<new public="1" set="method" line="56">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The default constructor of an App is empty, so you can override it if you want, but take note that this happens way before snow is ready for use. Use [ready](#ready) for entry point.</haxe_doc>
		</new>
		<haxe_doc>The default type of snow application, with variable delta, update limit, render limit, timescale and more. 
    See the {App Guide} for complete details.</haxe_doc>
	</class>
	<class path="luxe.Core" params="" file="/Users/sven/dev/luxe/luxe/luxe/Core.hx">
		<extends path="snow.App"/>
		<core_tag_update line="924" static="1"><c path="String"/></core_tag_update>
		<core_tag_renderdt line="925" static="1"><c path="String"/></core_tag_renderdt>
		<game_tag_update line="926" static="1"><c path="String"/></game_tag_update>
		<core_tag_render line="927" static="1"><c path="String"/></core_tag_render>
		<core_tag_debug line="928" static="1"><c path="String"/></core_tag_debug>
		<core_tag_updates line="929" static="1"><c path="String"/></core_tag_updates>
		<core_tag_events line="930" static="1"><c path="String"/></core_tag_events>
		<core_tag_audio line="931" static="1"><c path="String"/></core_tag_audio>
		<core_tag_input line="932" static="1"><c path="String"/></core_tag_input>
		<core_tag_timer line="933" static="1"><c path="String"/></core_tag_timer>
		<core_tag_scene line="934" static="1"><c path="String"/></core_tag_scene>
		<game public="1"><c path="luxe.Game"/></game>
		<core_thread public="1"><c path="cpp.vm.Thread"/></core_thread>
		<thread_message public="1"><d/></thread_message>
		<console_visible public="1"><x path="Bool"/></console_visible>
		<headless public="1">
			<x path="Bool"/>
			<haxe_doc>Set to true if the app is running without a window</haxe_doc>
		</headless>
		<emitter public="1"><c path="luxe.Emitter"/></emitter>
		<debug public="1"><c path="luxe.Debug"/></debug>
		<draw public="1"><c path="luxe.Draw"/></draw>
		<timer public="1"><c path="luxe.Timer"/></timer>
		<events public="1"><c path="luxe.Events"/></events>
		<input public="1"><c path="luxe.Input"/></input>
		<audio public="1"><c path="luxe.Audio"/></audio>
		<scene public="1"><c path="luxe.Scene"/></scene>
		<resources public="1"><c path="luxe.resource.ResourceManager"/></resources>
		<renderer public="1"><c path="phoenix.Renderer"/></renderer>
		<screen public="1"><c path="luxe.Screen"/></screen>
		<physics public="1"><c path="luxe.Physics"/></physics>
		<_mouse_pos><t path="luxe.Vector"/></_mouse_pos>
		<_touch_pos><t path="luxe.Vector"/></_touch_pos>
		<shutting_down public="1"><x path="Bool"/></shutting_down>
		<has_shutdown public="1"><x path="Bool"/></has_shutdown>
		<has_inited public="1"><x path="Bool"/></has_inited>
		<ready public="1" set="method" line="136" override="1"><f a=""><x path="Void"/></f></ready>
		<ondestroy public="1" set="method" line="174" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<init public="1" set="method" line="215"><f a=""><x path="Void"/></f></init>
		<shutdown public="1" set="method" line="309"><f a=""><x path="Void"/></f></shutdown>
		<on public="1" params="T" set="method" line="319"><f a="event:handler">
	<c path="String"/>
	<f a="">
		<c path="on.T"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></on>
		<off public="1" params="T" set="method" line="323"><f a="event:handler">
	<c path="String"/>
	<f a="">
		<c path="off.T"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></off>
		<emit public="1" params="T" set="method" line="327"><f a="event:?data" v=":null">
	<c path="String"/>
	<c path="emit.T"/>
	<x path="Void"/>
</f></emit>
		<onevent public="1" set="method" line="332" override="1"><f a="event">
	<t path="snow.types.SystemEvent"/>
	<x path="Void"/>
</f></onevent>
		<update public="1" set="method" line="340" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<window_event set="method" line="393"><f a="_event">
	<t path="snow.types.WindowEvent"/>
	<x path="Void"/>
</f></window_event>
		<render set="method" line="433"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></render>
		<show_console public="1" set="method" line="462"><f a="?_show" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></show_console>
		<onkeydown public="1" set="method" line="486" override="1"><f a="keycode:scancode:repeat:mod:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<t path="luxe.ModState"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onkeydown>
		<onkeyup public="1" set="method" line="514" override="1"><f a="keycode:scancode:repeat:mod:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<t path="luxe.ModState"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onkeyup>
		<ontextinput public="1" set="method" line="538" override="1"><f a="text:start:length:type:timestamp:window_id">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="snow.types.TextEventType"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></ontextinput>
		<oninputdown public="1" set="method" line="571"><f a="name:event">
	<c path="String"/>
	<t path="luxe.InputEvent"/>
	<x path="Void"/>
</f></oninputdown>
		<oninputup public="1" set="method" line="583"><f a="name:event">
	<c path="String"/>
	<t path="luxe.InputEvent"/>
	<x path="Void"/>
</f></oninputup>
		<onmousedown public="1" set="method" line="597" override="1"><f a="x:y:button:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmousedown>
		<onmouseup public="1" set="method" line="625" override="1"><f a="x:y:button:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmouseup>
		<onmousemove public="1" set="method" line="652" override="1"><f a="x:y:xrel:yrel:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmousemove>
		<onmousewheel public="1" set="method" line="678" override="1"><f a="x:y:timestamp:window_id">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onmousewheel>
		<ontouchdown public="1" set="method" line="704" override="1"><f a="x:y:touch_id:timestamp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ontouchdown>
		<ontouchup public="1" set="method" line="741" override="1"><f a="x:y:touch_id:timestamp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ontouchup>
		<ontouchmove public="1" set="method" line="765" override="1"><f a="x:y:dx:dy:touch_id:timestamp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ontouchmove>
		<ongamepadaxis public="1" set="method" line="791" override="1"><f a="gamepad:axis:value:timestamp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepadaxis>
		<ongamepaddown public="1" set="method" line="812" override="1"><f a="gamepad:button:value:timestamp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepaddown>
		<ongamepadup public="1" set="method" line="833" override="1"><f a="gamepad:button:value:timestamp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepadup>
		<ongamepaddevice public="1" set="method" line="854" override="1"><f a="gamepad:type:timestamp">
	<x path="Int"/>
	<x path="snow.types.GamepadDeviceEventType"/>
	<x path="Float"/>
	<x path="Void"/>
</f></ongamepaddevice>
		<config public="1" set="method" line="887" override="1">
			<f a="config">
				<t path="snow.types.AppConfig"/>
				<t path="snow.types.AppConfig"/>
			</f>
			<haxe_doc>return what the game decides for runtime config</haxe_doc>
		</config>
		<process_loading_thread set="method" line="895"><f a=""><x path="Void"/></f></process_loading_thread>
		<new public="1" set="method" line="107">
			<f a="_game">
				<c path="luxe.Game"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
			<m n=":keep"/>
			<m n=":log_as"><e>"luxe"</e></m>
		</meta>
	</class>
	<class path="luxe.Debug" params="" file="/Users/sven/dev/luxe/luxe/luxe/Debug.hx">
		<shut_down public="1" line="28" static="1"><x path="Bool"/></shut_down>
		<views public="1" static="1"><c path="Array"><c path="luxe.debug.DebugView"/></c></views>
		<trace_callbacks static="1"><x path="Map">
	<c path="String"/>
	<f a=":?">
		<d/>
		<t path="haxe.PosInfos"/>
		<x path="Void"/>
	</f>
</x></trace_callbacks>
		<default_native_trace set="method" line="114" static="1"><f a="v:?infos" v=":null">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></default_native_trace>
		<internal_trace public="1" set="method" line="131" static="1">
			<f a="v:?inf" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</internal_trace>
		<core public="1"><c path="luxe.Core"/></core>
		<visible public="1"><x path="Bool"/></visible>
		<debug_inspector public="1"><c path="luxe.debug.Inspector"/></debug_inspector>
		<overlay public="1"><c path="phoenix.geometry.QuadGeometry"/></overlay>
		<batcher public="1"><c path="phoenix.Batcher"/></batcher>
		<view public="1"><c path="phoenix.Camera"/></view>
		<debug_font public="1"><c path="phoenix.BitmapFont"/></debug_font>
		<dt_average public="1"><x path="Float"/></dt_average>
		<dt_average_accum public="1"><x path="Float"/></dt_average_accum>
		<dt_average_span public="1"><x path="Int"/></dt_average_span>
		<dt_average_count public="1"><x path="Int"/></dt_average_count>
		<current_view_index public="1"><x path="Int"/></current_view_index>
		<last_view_index public="1"><x path="Int"/></last_view_index>
		<current_view public="1"><c path="luxe.debug.DebugView"/></current_view>
		<padding public="1"><t path="luxe.Vector"/></padding>
		<started public="1"><x path="Bool"/></started>
		<profile_path public="1"><c path="String"/></profile_path>
		<profiling public="1"><x path="Bool"/></profiling>
		<init public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<start public="1" set="method" line="86">
			<f a="_name:?_max" v=":0.0f">
				<c path="String"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>start a profiling section for the profiler debug view</haxe_doc>
		</start>
		<end public="1" set="method" line="95">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>end a profiling section for the profiler debug view</haxe_doc>
		</end>
		<remove_trace_listener public="1" set="method" line="103">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>remove a trace listener added via add_trace_listener</haxe_doc>
		</remove_trace_listener>
		<add_trace_listener public="1" set="method" line="108">
			<f a="_name:_callback">
				<c path="String"/>
				<f a=":?">
					<d/>
					<t path="haxe.PosInfos"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>since luxe captures the haxe `trace` log, you can add listeners to catch trace values for yourself.</haxe_doc>
		</add_trace_listener>
		<create_debug_console public="1" set="method" line="153">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</create_debug_console>
		<mouseup set="method" line="217"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mouseup>
		<mousedown set="method" line="225"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousedown>
		<mousewheel set="method" line="233"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousewheel>
		<mousemove set="method" line="241"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousemove>
		<keyup set="method" line="249"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></keyup>
		<keydown set="method" line="269"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></keydown>
		<onresize public="1" set="method" line="295">
			<f a="e">
				<unknown/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onresize>
		<refresh set="method" line="299"><f a=""><x path="Void"/></f></refresh>
		<switch_view public="1" set="method" line="304">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>programmatically switch the debug console view. currently cycles the view.</haxe_doc>
		</switch_view>
		<last_cursor_shown><x path="Bool"/></last_cursor_shown>
		<last_cursor_grab><x path="Bool"/></last_cursor_grab>
		<show_console public="1" set="method" line="329">
			<f a="?_show" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</show_console>
		<destroy public="1" set="method" line="369">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</destroy>
		<process public="1" set="method" line="383">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<new public="1" set="method" line="58">
			<f a="_core">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Draw" params="" file="/Users/sven/dev/luxe/luxe/luxe/Draw.hx">
		<line public="1" set="method" line="30">
			<f a="options">
				<t path="luxe.options.DrawLineOptions"/>
				<c path="phoenix.geometry.LineGeometry"/>
			</f>
			<haxe_doc>Draw a line geometry between points `p0` and `p1` with options</haxe_doc>
		</line>
		<rectangle public="1" set="method" line="42">
			<f a="options">
				<t path="luxe.options.DrawRectangleOptions"/>
				<c path="phoenix.geometry.RectangleGeometry"/>
			</f>
			<haxe_doc>Draw a rectangle outline at the specified `x`,`y`,`w`,`h` with options</haxe_doc>
		</rectangle>
		<box public="1" set="method" line="52">
			<f a="options">
				<t path="luxe.options.DrawBoxOptions"/>
				<c path="phoenix.geometry.QuadGeometry"/>
			</f>
			<haxe_doc>Draw a solid rectangle box at the specified `x`,`y`,`w`,`h` with options</haxe_doc>
		</box>
		<ring public="1" set="method" line="62">
			<f a="options">
				<t path="luxe.options.DrawRingOptions"/>
				<c path="phoenix.geometry.RingGeometry"/>
			</f>
			<haxe_doc>Draw a circle outline at the specified `x`,`y` with radius `r` (or `rx`,`ry` optionally for an ellipse), with options</haxe_doc>
		</ring>
		<circle public="1" set="method" line="72">
			<f a="options">
				<t path="luxe.options.DrawCircleOptions"/>
				<c path="phoenix.geometry.CircleGeometry"/>
			</f>
			<haxe_doc>Draw a solid circle at the specified `x`,`y` with radius `r` (or `rx`,`ry` optionally for an ellipse), with options</haxe_doc>
		</circle>
		<arc public="1" set="method" line="82">
			<f a="options">
				<t path="luxe.options.DrawArcOptions"/>
				<c path="phoenix.geometry.ArcGeometry"/>
			</f>
			<haxe_doc>Draw an arc (open circle) at the specified `x`,`y`, between `start_angle` and `end_angle` with radius `r` (or `rx`,`ry` optionally for an ellipsical arc), with options</haxe_doc>
		</arc>
		<ngon public="1" set="method" line="92">
			<f a="options">
				<t path="luxe.options.DrawNgonOptions"/>
				<c path="phoenix.geometry.Geometry"/>
			</f>
			<haxe_doc>Draw an n-sided polygon (3 sides for triangle, 6 for hexagon etc) at `x`,`y` with a radius `r` and `sides` with options</haxe_doc>
		</ngon>
		<texture public="1" set="method" line="163">
			<f a="options">
				<t path="luxe.options.DrawTextureOptions"/>
				<c path="phoenix.geometry.QuadGeometry"/>
			</f>
			<haxe_doc>Draw a textured `box` with image `texture` at `x`,`y`,`w`,`h` OR with `pos` and `size`, and `uv` with options</haxe_doc>
		</texture>
		<text public="1" set="method" line="233">
			<f a="options">
				<t path="phoenix.geometry.TextGeometryOptions"/>
				<c path="phoenix.geometry.TextGeometry"/>
			</f>
			<haxe_doc>Draw `text` with options (default font used if none specified)</haxe_doc>
		</text>
		<plane public="1" set="method" line="243">
			<f a="?options" v="null">
				<t path="luxe.options.DrawPlaneOptions"/>
				<c path="phoenix.geometry.PlaneGeometry"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Draw a plane (three dimensional quad) with options</haxe_doc>
		</plane>
		<core public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<new public="1" set="method" line="256">
			<f a="_core">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<haxe_doc>The `Luxe.draw` API class implementation.
    This class handles quick access to drawing common geometry options,
    and is a facilitator for higher level drawing. These can be used given to a `Visual` to convert
    them into a higher level entity for use with the default scene.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.EmitHandler" params="" file="/Users/sven/dev/luxe/luxe/luxe/Emitter.hx" module="luxe.Emitter">
		<f a="">
			<d/>
			<x path="Void"/>
		</f>
		<haxe_doc>A simple event emitter, used as a base class for systems that want to handle direct connections to named events</haxe_doc>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<typedef path="luxe._Emitter.EmitNode" params="" file="/Users/sven/dev/luxe/luxe/luxe/Emitter.hx" private="1" module="luxe.Emitter">
		<a>
			<pos>
				<t path="haxe.PosInfos"/>
				<meta><m n=":optional"/></meta>
			</pos>
			<handler><t path="luxe.EmitHandler"/></handler>
			<event><c path="String"/></event>
		</a>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="luxe.Events" params="" file="/Users/sven/dev/luxe/luxe/luxe/Events.hx">
		<event_queue public="1">
			<x path="Map">
				<c path="String"/>
				<c path="luxe._Events.EventObject"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</event_queue>
		<event_connections public="1">
			<x path="Map">
				<c path="String"/>
				<c path="luxe._Events.EventConnection"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</event_connections>
		<event_slots public="1">
			<x path="Map">
				<c path="String"/>
				<c path="Array"><c path="luxe._Events.EventConnection"/></c>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</event_slots>
		<event_filters public="1">
			<x path="Map">
				<c path="String"/>
				<c path="Array"><c path="luxe._Events.EventConnection"/></c>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</event_filters>
		<event_schedules public="1">
			<x path="Map">
				<c path="String"/>
				<c path="snow.utils.Timer"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</event_schedules>
		<destroy public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>destroy this `Events` instance</haxe_doc>
		</destroy>
		<clear public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>clear any scheduled or bound events. called on destroy.</haxe_doc>
		</clear>
		<does_filter_event public="1" set="method" line="60">
			<f a="_filter:_event">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>helper. Exposed for learning/testing api.</haxe_doc>
		</does_filter_event>
		<listen public="1" params="T" set="method" line="74">
			<f a="_event_name:_listener">
				<c path="String"/>
				<f a="">
					<c path="listen.T"/>
					<x path="Void"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Bind a signal (listener) to a slot (event_name)   
            event_name : The event id   
            listener : A function handler that should get called on event firing</haxe_doc>
		</listen>
		<disconnect public="1" set="method" line="119">
			<f a="event_id">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Disconnect a vound signal   
            event connection id, returned from connect()   
            returns true if the event existed and was removed</haxe_doc>
		</disconnect>
		<queue public="1" params="T" set="method" line="151"><f a="event_name:?properties" v=":null">
	<c path="String"/>
	<c path="queue.T"/>
	<c path="String"/>
</f></queue>
		<dequeue public="1" set="method" line="166">
			<f a="event_id">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove an event from the queue by id returned from queue.</haxe_doc>
		</dequeue>
		<process public="1" set="method" line="181">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Process/update the events, firing any events in the queue. if you create a custom instance, call this when you want to process.</haxe_doc>
		</process>
		<fire public="1" params="T" set="method" line="201"><f a="_event_name:?_properties" v=":null">
	<c path="String"/>
	<c path="fire.T"/>
	<x path="Bool"/>
</f></fire>
		<schedule public="1" params="T" set="method" line="249"><f a="time:event_name:?properties" v="::null">
	<x path="Float"/>
	<c path="String"/>
	<c path="schedule.T"/>
	<c path="String"/>
</f></schedule>
		<unschedule public="1" set="method" line="266"><f a="schedule_id">
	<c path="String"/>
	<x path="Bool"/>
</f></unschedule>
		<tag_properties set="method" line="283"><f a="_properties:_name:_count">
	<d/>
	<c path="String"/>
	<x path="Int"/>
	<c path="fire.T"/>
</f></tag_properties>
		<new public="1" set="method" line="15">
			<f a=""><x path="Void"/></f>
			<haxe_doc>create a new instance for sending/receiving events</haxe_doc>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe._Events.EventConnection" params="" file="/Users/sven/dev/luxe/luxe/luxe/Events.hx" private="1" module="luxe.Events">
		<listener public="1"><f a="">
	<d/>
	<x path="Void"/>
</f></listener>
		<id public="1"><c path="String"/></id>
		<event_name public="1"><c path="String"/></event_name>
		<new public="1" set="method" line="307"><f a="_id:_event_name:_listener">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe._Events.EventObject" params="" file="/Users/sven/dev/luxe/luxe/luxe/Events.hx" private="1" module="luxe.Events">
		<id public="1"><c path="String"/></id>
		<name public="1"><c path="String"/></name>
		<properties public="1"><d/></properties>
		<new public="1" set="method" line="326"><f a="_id:_event_name:_event_properties">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.ModState" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<t path="snow.types.ModState"/>
		<haxe_doc>A modifier state for key events</haxe_doc>
	</typedef>
	<typedef path="luxe.Key" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<c path="snow.input.Keycodes"/>
		<haxe_doc>A named list of keycodes. Use to compare against key event `keycode` values</haxe_doc>
	</typedef>
	<typedef path="luxe.Scan" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<c path="snow.input.Scancodes"/>
		<haxe_doc>A named list of scancodes. Use to compare against key event `scancode` values</haxe_doc>
	</typedef>
	<abstract path="luxe.MouseButton" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>A typed mouse button id</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="luxe._Input.MouseButton_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" private="1" module="luxe.Input">
	<none public="1" get="inline" set="null" line="18" static="1">
		<x path="luxe.MouseButton"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>no mouse buttons</haxe_doc>
	</none>
	<left public="1" get="inline" set="null" line="20" static="1">
		<x path="luxe.MouseButton"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>left mouse button</haxe_doc>
	</left>
	<middle public="1" get="inline" set="null" line="22" static="1">
		<x path="luxe.MouseButton"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>middle mouse button</haxe_doc>
	</middle>
	<right public="1" get="inline" set="null" line="24" static="1">
		<x path="luxe.MouseButton"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>right mouse button</haxe_doc>
	</right>
	<extra1 public="1" get="inline" set="null" line="26" static="1">
		<x path="luxe.MouseButton"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>extra button pressed (4)</haxe_doc>
	</extra1>
	<extra2 public="1" get="inline" set="null" line="28" static="1">
		<x path="luxe.MouseButton"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>extra button pressed (5)</haxe_doc>
	</extra2>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="luxe._Input.MouseButton_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" private="1" module="luxe.Input">
		<none public="1" get="inline" set="null" line="18" static="1">
			<x path="luxe.MouseButton"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>no mouse buttons</haxe_doc>
		</none>
		<left public="1" get="inline" set="null" line="20" static="1">
			<x path="luxe.MouseButton"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>left mouse button</haxe_doc>
		</left>
		<middle public="1" get="inline" set="null" line="22" static="1">
			<x path="luxe.MouseButton"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>middle mouse button</haxe_doc>
		</middle>
		<right public="1" get="inline" set="null" line="24" static="1">
			<x path="luxe.MouseButton"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>right mouse button</haxe_doc>
		</right>
		<extra1 public="1" get="inline" set="null" line="26" static="1">
			<x path="luxe.MouseButton"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>extra button pressed (4)</haxe_doc>
		</extra1>
		<extra2 public="1" get="inline" set="null" line="28" static="1">
			<x path="luxe.MouseButton"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>extra button pressed (5)</haxe_doc>
		</extra2>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<enum path="luxe.InteractState" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<unknown><haxe_doc>An unknown state</haxe_doc></unknown>
		<none><haxe_doc>An none state</haxe_doc></none>
		<down><haxe_doc>In a pressed state</haxe_doc></down>
		<up><haxe_doc>In a released state</haxe_doc></up>
		<move><haxe_doc>In a moving state</haxe_doc></move>
		<wheel><haxe_doc>A mouse wheel state</haxe_doc></wheel>
		<axis><haxe_doc>A gamepad axis state</haxe_doc></axis>
		<haxe_doc>A typed state for mouse, touch, or pressed/similar</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="luxe.TextEventType" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<unknown><haxe_doc>An unknown event</haxe_doc></unknown>
		<edit><haxe_doc>An edit text typing event</haxe_doc></edit>
		<input><haxe_doc>An input text typing event</haxe_doc></input>
		<haxe_doc>A typed text event type</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="luxe.KeyEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<a>
			<window_id>
				<x path="Int"/>
				<haxe_doc>The window id this event originated from</haxe_doc>
			</window_id>
			<timestamp>
				<x path="Float"/>
				<haxe_doc>The time in seconds when this touch event occurred, use for deltas</haxe_doc>
			</timestamp>
			<state>
				<e path="luxe.InteractState"/>
				<haxe_doc>The state of the key in this event</haxe_doc>
			</state>
			<scancode>
				<x path="Int"/>
				<haxe_doc>The `Scan` code value for this event</haxe_doc>
			</scancode>
			<repeat>
				<x path="Bool"/>
				<haxe_doc>If this value is bigger than 0 this is a key repeat event of a key held down</haxe_doc>
			</repeat>
			<mod>
				<t path="luxe.ModState"/>
				<haxe_doc>The modifier state of this event</haxe_doc>
			</mod>
			<keycode>
				<x path="Int"/>
				<haxe_doc>The `Key` code value for this event</haxe_doc>
			</keycode>
		</a>
		<haxe_doc>Information about a keyboard event</haxe_doc>
	</typedef>
	<typedef path="luxe.TouchEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<a>
			<y>
				<x path="Float"/>
				<haxe_doc>The x position in the window of the touch event</haxe_doc>
			</y>
			<x>
				<x path="Float"/>
				<haxe_doc>The x position in the window of the touch event</haxe_doc>
			</x>
			<touch_id>
				<x path="Int"/>
				<haxe_doc>The id of the touch that this event comes from, a finger id</haxe_doc>
			</touch_id>
			<timestamp>
				<x path="Float"/>
				<haxe_doc>The time in seconds when this touch event occurred, use for deltas</haxe_doc>
			</timestamp>
			<state>
				<e path="luxe.InteractState"/>
				<haxe_doc>The state this touch event is in</haxe_doc>
			</state>
			<pos>
				<t path="luxe.Vector"/>
				<haxe_doc>A convenience vector access of the x and y position</haxe_doc>
			</pos>
			<dy>
				<x path="Float"/>
				<haxe_doc>The delta y value of the touch event, if the state is `moving`</haxe_doc>
			</dy>
			<dx>
				<x path="Float"/>
				<haxe_doc>The delta x value of the touch event, if the state is `moving`</haxe_doc>
			</dx>
		</a>
		<haxe_doc>Information about a touch event</haxe_doc>
	</typedef>
	<typedef path="luxe.TextEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<a>
			<window_id>
				<x path="Int"/>
				<haxe_doc>The window id this event originated from</haxe_doc>
			</window_id>
			<type>
				<e path="luxe.TextEventType"/>
				<haxe_doc>The type of text event</haxe_doc>
			</type>
			<timestamp>
				<x path="Float"/>
				<haxe_doc>The time in seconds when this touch event occurred, use for deltas</haxe_doc>
			</timestamp>
			<text>
				<c path="String"/>
				<haxe_doc>The text that this event has generated</haxe_doc>
			</text>
			<start>
				<x path="Int"/>
				<haxe_doc>The start position, if the `type` is `edit`</haxe_doc>
			</start>
			<length>
				<x path="Int"/>
				<haxe_doc>The length position, if the `type` is `edit`</haxe_doc>
			</length>
		</a>
		<haxe_doc>Information about a text input event</haxe_doc>
	</typedef>
	<enum path="luxe.GamepadEventType" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<unknown><haxe_doc>An unknown event</haxe_doc></unknown>
		<axis><haxe_doc>An axis change event</haxe_doc></axis>
		<button><haxe_doc>A button event</haxe_doc></button>
		<device_added><haxe_doc>A device added event</haxe_doc></device_added>
		<device_removed><haxe_doc>A device removed event</haxe_doc></device_removed>
		<device_remapped><haxe_doc>A device was remapped</haxe_doc></device_remapped>
		<haxe_doc>A typed gamepad event type</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="luxe.GamepadEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<a>
			<value>
				<x path="Float"/>
				<haxe_doc>The axis value, if the event `type` is `axis`</haxe_doc>
			</value>
			<type>
				<e path="luxe.GamepadEventType"/>
				<haxe_doc>The type of gamepad event that this corresponds with</haxe_doc>
			</type>
			<timestamp>
				<x path="Float"/>
				<haxe_doc>The time in seconds when this gamepad event occurred, use for deltas</haxe_doc>
			</timestamp>
			<state>
				<e path="luxe.InteractState"/>
				<haxe_doc>The state this event is in</haxe_doc>
			</state>
			<gamepad>
				<x path="Int"/>
				<haxe_doc>The id of the gamepad this event comes from</haxe_doc>
			</gamepad>
			<button>
				<x path="Int"/>
				<haxe_doc>The button id, if the event `type` is `button`</haxe_doc>
			</button>
			<axis>
				<x path="Int"/>
				<haxe_doc>The axis id, if the event `type` is `axis`</haxe_doc>
			</axis>
		</a>
		<haxe_doc>Information about a gamepad event</haxe_doc>
	</typedef>
	<typedef path="luxe.MouseEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<a>
			<yrel>
				<x path="Int"/>
				<haxe_doc>The relative y position if `state` is `move` or a window has grabbed state</haxe_doc>
			</yrel>
			<y>
				<x path="Int"/>
				<haxe_doc>The y position in the window of the mouse event</haxe_doc>
			</y>
			<xrel>
				<x path="Int"/>
				<haxe_doc>The relative x position if `state` is `move` or a window has grabbed state</haxe_doc>
			</xrel>
			<x>
				<x path="Int"/>
				<haxe_doc>The x position in the window of the mouse event</haxe_doc>
			</x>
			<window_id>
				<x path="Int"/>
				<haxe_doc>The window id this event originated from</haxe_doc>
			</window_id>
			<timestamp>
				<x path="Float"/>
				<haxe_doc>The time in seconds when this touch event occurred, use for deltas</haxe_doc>
			</timestamp>
			<state>
				<e path="luxe.InteractState"/>
				<haxe_doc>The state this event is in</haxe_doc>
			</state>
			<pos>
				<t path="luxe.Vector"/>
				<haxe_doc>A convenience vector access of the x and y position</haxe_doc>
			</pos>
			<button>
				<x path="luxe.MouseButton"/>
				<haxe_doc>The button id, if the event `state` is `down` or `up`</haxe_doc>
			</button>
		</a>
		<haxe_doc>Information about a mouse event</haxe_doc>
	</typedef>
	<enum path="luxe.InputType" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<mouse><haxe_doc>A mouse input event</haxe_doc></mouse>
		<touch><haxe_doc>A touch input event</haxe_doc></touch>
		<keys><haxe_doc>A key input event</haxe_doc></keys>
		<gamepad><haxe_doc>A gampad input event</haxe_doc></gamepad>
		<haxe_doc>A type for a named input event</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="luxe.InputEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx" module="luxe.Input">
		<a>
			<type>
				<e path="luxe.InputType"/>
				<haxe_doc>the type of input this event was generated for</haxe_doc>
			</type>
			<touch_event>
				<t path="luxe.TouchEvent"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>null, unless type is `touch`</haxe_doc>
			</touch_event>
			<state>
				<e path="luxe.InteractState"/>
				<haxe_doc>The state of the event</haxe_doc>
			</state>
			<name>
				<c path="String"/>
				<haxe_doc>the name of the input event</haxe_doc>
			</name>
			<mouse_event>
				<t path="luxe.MouseEvent"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>null, unless type is `mouse`</haxe_doc>
			</mouse_event>
			<key_event>
				<t path="luxe.KeyEvent"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>null, unless type is `keys`</haxe_doc>
			</key_event>
			<gamepad_event>
				<t path="luxe.GamepadEvent"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>null, unless type is `gamepad`</haxe_doc>
			</gamepad_event>
		</a>
		<haxe_doc>Information about a named input event</haxe_doc>
	</typedef>
	<class path="luxe.Input" params="" file="/Users/sven/dev/luxe/luxe/luxe/Input.hx">
		<core public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<key_bindings><x path="Map">
	<c path="String"/>
	<x path="Map">
		<x path="Int"/>
		<x path="Bool"/>
	</x>
</x></key_bindings>
		<mouse_bindings><x path="Map">
	<c path="String"/>
	<x path="Map">
		<x path="Int"/>
		<x path="Bool"/>
	</x>
</x></mouse_bindings>
		<_named_input_released><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></_named_input_released>
		<_named_input_pressed><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></_named_input_pressed>
		<_named_input_down><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></_named_input_down>
		<init public="1" set="method" line="237">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<destroy public="1" set="method" line="250">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</destroy>
		<process public="1" set="method" line="254">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<inputpressed public="1" set="method" line="287">
			<f a="_event">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the pressed state of a named input. only true if pressed within one frame</haxe_doc>
		</inputpressed>
		<inputreleased public="1" set="method" line="292">
			<f a="_event">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the released state of a named input. only true if released within one frame</haxe_doc>
		</inputreleased>
		<inputdown public="1" set="method" line="297">
			<f a="_event">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the down state of a named input. only true while the key is down</haxe_doc>
		</inputdown>
		<keypressed public="1" set="method" line="304">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the pressed state of a `keycode`, use `Key` for named keycodes. only true if pressed within one frame</haxe_doc>
		</keypressed>
		<keyreleased public="1" set="method" line="309">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the released state of a `keycode`, use `Key` for named keycodes. only true if released within one frame</haxe_doc>
		</keyreleased>
		<keydown public="1" set="method" line="314">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the down state of a `keycode`, use `Key` for named keycodes. only true while the key is down</haxe_doc>
		</keydown>
		<scanpressed public="1" set="method" line="320">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the pressed state of a `scancode`, use `Scan` for named scancodes. only true if pressed within one frame</haxe_doc>
		</scanpressed>
		<scanreleased public="1" set="method" line="325">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the released state of a `scancode`, use `Scan` for named scancodes. only true if released within one frame</haxe_doc>
		</scanreleased>
		<scandown public="1" set="method" line="330">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the down state of a `scancode`, use `Scan` for named scancodes. only true while the key is down</haxe_doc>
		</scandown>
		<mousepressed public="1" set="method" line="337">
			<f a="_button">
				<x path="luxe.MouseButton"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the pressed state of a mouse button. only true if pressed within one frame</haxe_doc>
		</mousepressed>
		<mousereleased public="1" set="method" line="342">
			<f a="_button">
				<x path="luxe.MouseButton"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the released state of a mouse button. only true if released within one frame</haxe_doc>
		</mousereleased>
		<mousedown public="1" set="method" line="347">
			<f a="_button">
				<x path="luxe.MouseButton"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the down state of a mouse button. only true while the button is down. :todo: use `MouseButton` like it should be.</haxe_doc>
		</mousedown>
		<gamepadpressed public="1" set="method" line="354">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the pressed state of a gamepad button. only true if pressed within one frame</haxe_doc>
		</gamepadpressed>
		<gamepadreleased public="1" set="method" line="359">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the released state of a gamepad button. only true if released within one frame</haxe_doc>
		</gamepadreleased>
		<gamepaddown public="1" set="method" line="364">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>immediate query of the down state of a gamepad button. only true while the button is down</haxe_doc>
		</gamepaddown>
		<gamepadaxis public="1" set="method" line="369">
			<f a="_gamepad:_axis">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>immediate query of the axis value of a gamepad axis.</haxe_doc>
		</gamepadaxis>
		<bind_key public="1" set="method" line="377">
			<f a="_name:_key">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind a named input binding to a `Key`</haxe_doc>
		</bind_key>
		<bind_mouse public="1" set="method" line="389">
			<f a="_name:_button">
				<c path="String"/>
				<x path="luxe.MouseButton"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind a named input binding to a `MouseButton`</haxe_doc>
		</bind_mouse>
		<check_named_keys public="1" set="method" line="400">
			<f a="e:?_down" v=":false">
				<t path="luxe.KeyEvent"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</check_named_keys>
		<check_named_mouse public="1" set="method" line="449">
			<f a="e:?_down" v=":false">
				<t path="luxe.MouseEvent"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</check_named_mouse>
		<new public="1" set="method" line="223">
			<f a="_core">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Log" params="" file="/Users/sven/dev/luxe/luxe/luxe/Log.hx">
		<_level public="1" line="11" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</_level>
		<_filter public="1" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</_filter>
		<_exclude public="1" static="1">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":noCompletion"/></meta>
		</_exclude>
		<_log_width public="1" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</_log_width>
		<_get_spacing set="method" line="212" static="1"><f a="_file">
	<c path="String"/>
	<c path="String"/>
</f></_get_spacing>
		<haxe_doc>A macro based logging class. See the logging guide for full details.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.Matrix" params="" file="/Users/sven/dev/luxe/luxe/luxe/Matrix.hx"><c path="phoenix.Matrix"/></typedef>
	<class path="luxe.Mesh" params="" file="/Users/sven/dev/luxe/luxe/luxe/Mesh.hx">
		<geometry public="1"><c path="phoenix.geometry.Geometry"/></geometry>
		<transform public="1"><c path="phoenix.Transform"/></transform>
		<pos public="1" get="accessor" set="accessor"><t path="luxe.Vector"/></pos>
		<scale public="1" get="accessor" set="accessor"><t path="luxe.Vector"/></scale>
		<rotation public="1" get="accessor" set="accessor"><t path="luxe.Quaternion"/></rotation>
		<options><t path="luxe.options.MeshOptions"/></options>
		<onload set="method" line="70"><f a=""><x path="Void"/></f></onload>
		<set_pos set="method" line="92"><f a="_pos">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<get_pos set="method" line="98"><f a=""><c path="phoenix.Vector"/></f></get_pos>
		<get_rotation set="method" line="102"><f a=""><c path="phoenix.Quaternion"/></f></get_rotation>
		<get_scale set="method" line="106"><f a=""><c path="phoenix.Vector"/></f></get_scale>
		<set_pos_from_transform set="method" line="110"><f a="_pos">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_pos_from_transform>
		<set_rotation set="method" line="122"><f a="_rotation">
	<t path="luxe.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></set_rotation>
		<set_rotation_from_transform set="method" line="128"><f a="_rotation">
	<t path="luxe.Quaternion"/>
	<x path="Void"/>
</f></set_rotation_from_transform>
		<set_scale set="method" line="138"><f a="_scale">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_scale>
		<set_scale_from_transform set="method" line="144"><f a="_scale">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_scale_from_transform>
		<_obj_add_vert set="method" line="156"><f a="v:_scale">
	<t path="luxe.importers.obj.Vertex"/>
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></_obj_add_vert>
		<from_string public="1" set="method" line="175"><f a="string_data:texture:?_scale:_batcher" v="::null:">
	<c path="String"/>
	<c path="phoenix.Texture"/>
	<t path="luxe.Vector"/>
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></from_string>
		<from_obj_file public="1" set="method" line="200"><f a="asset_id:texture:?_scale:_batcher" v="::null:">
	<c path="String"/>
	<c path="phoenix.Texture"/>
	<t path="luxe.Vector"/>
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></from_obj_file>
		<destroy public="1" set="method" line="210"><f a=""><x path="Void"/></f></destroy>
		<new public="1" set="method" line="26"><f a="?_options" v="null">
	<t path="luxe.options.MeshOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe._NineSlice.Slice" params="" file="/Users/sven/dev/luxe/luxe/luxe/NineSlice.hx" private="1" module="luxe.NineSlice"><a>
	<width><x path="Float"/></width>
	<source_y><x path="Float"/></source_y>
	<source_x><x path="Float"/></source_x>
	<source_width><x path="Float"/></source_width>
	<source_height><x path="Float"/></source_height>
	<pos><t path="luxe.Vector"/></pos>
	<height><x path="Float"/></height>
	<geometry_id><x path="Int"/></geometry_id>
</a></typedef>
	<class path="luxe.Visual" params="" file="/Users/sven/dev/luxe/luxe/luxe/Visual.hx">
		<extends path="luxe.Entity"/>
		<size public="1" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the size of this geometry (only makes sense for QuadGeometry)</haxe_doc>
		</size>
		<geometry public="1" set="accessor">
			<c path="phoenix.geometry.Geometry"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the geometry this visual contains</haxe_doc>
		</geometry>
		<locked public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the geometry static flag. This is a hint on how to render the geometry for performance</haxe_doc>
		</locked>
		<texture public="1" set="accessor">
			<c path="phoenix.Texture"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the texture for the geometry</haxe_doc>
		</texture>
		<shader public="1" set="accessor">
			<c path="phoenix.Shader"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the shader for the geometry</haxe_doc>
		</shader>
		<color public="1" set="accessor">
			<t path="luxe.Color"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the base color</haxe_doc>
		</color>
		<visible public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the visibility</haxe_doc>
		</visible>
		<depth public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the geometry depth value (see guides)</haxe_doc>
		</depth>
		<group public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>the geometry group id (see guides)</haxe_doc>
		</group>
		<clip_rect public="1" set="accessor">
			<t path="luxe.Rectangle"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>If note null, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
		</clip_rect>
		<radians public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>convenience: controls the rotation around the z axis, in radians.</haxe_doc>
		</radians>
		<rotation_z public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>convenience: controls the rotation around the z axis, in degrees.</haxe_doc>
		</rotation_z>
		<_rotation_euler><t path="luxe.Vector"/></_rotation_euler>
		<_rotation_quat><c path="phoenix.Quaternion"/></_rotation_quat>
		<_has_custom_origin><x path="Bool"/></_has_custom_origin>
		<_creating_geometry><x path="Bool"/></_creating_geometry>
		<_create_geometry public="1" set="method" line="141">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_create_geometry>
		<ondestroy public="1" set="method" line="207" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<on_geometry_created set="method" line="220"><f a=""><x path="Void"/></f></on_geometry_created>
		<set_visible set="method" line="228"><f a="_v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_depth set="method" line="241"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_depth>
		<set_group set="method" line="251"><f a="_v">
	<x path="Int"/>
	<x path="Int"/>
</f></set_group>
		<set_color set="method" line="263"><f a="_c">
	<t path="luxe.Color"/>
	<t path="luxe.Color"/>
</f></set_color>
		<set_texture set="method" line="273"><f a="_t">
	<c path="phoenix.Texture"/>
	<c path="phoenix.Texture"/>
</f></set_texture>
		<set_shader set="method" line="282"><f a="_s">
	<c path="phoenix.Shader"/>
	<c path="phoenix.Shader"/>
</f></set_shader>
		<ignore_texture_on_geometry_change><x path="Bool"/></ignore_texture_on_geometry_change>
		<set_geometry set="method" line="295"><f a="_g">
	<c path="phoenix.geometry.Geometry"/>
	<c path="phoenix.geometry.Geometry"/>
</f></set_geometry>
		<set_parent_from_transform set="method" line="347" override="1"><f a="_parent">
	<t path="luxe.Transform"/>
	<x path="Void"/>
</f></set_parent_from_transform>
		<set_rotation_from_transform set="method" line="358" override="1"><f a="_rotation">
	<c path="phoenix.Quaternion"/>
	<x path="Void"/>
</f></set_rotation_from_transform>
		<set_size set="method" line="370"><f a="_v">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_size>
		<get_rotation_z set="method" line="383"><f a=""><x path="Float"/></f></get_rotation_z>
		<set_rotation_z set="method" line="389"><f a="_degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation_z>
		<set_radians set="method" line="397"><f a="_r">
	<x path="Float"/>
	<x path="Float"/>
</f></set_radians>
		<get_radians set="method" line="408"><f a=""><x path="Float"/></f></get_radians>
		<set_locked set="method" line="414"><f a="_l">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_locked>
		<set_clip_rect set="method" line="427"><f a="_val">
	<t path="luxe.Rectangle"/>
	<t path="luxe.Rectangle"/>
</f></set_clip_rect>
		<_size_change set="method" line="439"><f a="_v">
	<x path="Float"/>
	<x path="Void"/>
</f></_size_change>
		<init public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="58">
			<f a="_options">
				<t path="luxe.options.VisualOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new visual based on the given options</haxe_doc>
		</new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.Sprite" params="" file="/Users/sven/dev/luxe/luxe/luxe/Sprite.hx">
		<extends path="luxe.Visual"/>
		<centered public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</centered>
		<flipx public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</flipx>
		<flipy public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</flipy>
		<uv public="1" set="accessor">
			<t path="luxe.Rectangle"/>
			<meta><m n=":isVar"/></meta>
		</uv>
		<geometry_quad public="1"><c path="phoenix.geometry.QuadGeometry"/></geometry_quad>
		<on_geometry_created set="method" line="52" override="1"><f a=""><x path="Void"/></f></on_geometry_created>
		<set_geometry set="method" line="91" override="1"><f a="_g">
	<c path="phoenix.geometry.Geometry"/>
	<c path="phoenix.geometry.Geometry"/>
</f></set_geometry>
		<point_inside public="1" set="method" line="101"><f a="_p">
	<t path="luxe.Vector"/>
	<x path="Bool"/>
</f></point_inside>
		<point_inside_AABB public="1" set="method" line="112">
			<f a="_p">
				<t path="luxe.Vector"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if a point is inside the AABB unrotated</haxe_doc>
		</point_inside_AABB>
		<set_uv set="method" line="144"><f a="_uv">
	<t path="luxe.Rectangle"/>
	<t path="luxe.Rectangle"/>
</f></set_uv>
		<set_flipy set="method" line="159"><f a="_v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_flipy>
		<set_flipx set="method" line="173"><f a="_v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_flipx>
		<set_size set="method" line="189" override="1"><f a="_v">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_size>
		<set_centered set="method" line="214"><f a="_c">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_centered>
		<_uv_change set="method" line="231"><f a="_v">
	<x path="Float"/>
	<x path="Void"/>
</f></_uv_change>
		<init public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></init>
		<ondestroy public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<new public="1" set="method" line="24"><f a="options">
	<t path="luxe.options.SpriteOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.NineSlice" params="" file="/Users/sven/dev/luxe/luxe/luxe/NineSlice.hx">
		<extends path="luxe.Sprite"/>
		<top public="1"><x path="Float"/></top>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<width public="1"><x path="Float"/></width>
		<bottom public="1"><x path="Float"/></bottom>
		<height public="1"><x path="Float"/></height>
		<source_x public="1"><x path="Float"/></source_x>
		<source_y public="1"><x path="Float"/></source_y>
		<source_w public="1"><x path="Float"/></source_w>
		<source_h public="1"><x path="Float"/></source_h>
		<is_set public="1"><x path="Bool"/></is_set>
		<midwidth public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</midwidth>
		<midheight public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</midheight>
		<slices public="1">
			<c path="Array"><t path="luxe._NineSlice.Slice"/></c>
			<meta><m n=":noCompletion"/></meta>
		</slices>
		<added public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</added>
		<nineslice_options public="1">
			<t path="luxe.options.NineSliceOptions"/>
			<meta><m n=":noCompletion"/></meta>
		</nineslice_options>
		<_geometry public="1">
			<c path="phoenix.geometry.QuadPackGeometry"/>
			<meta><m n=":noCompletion"/></meta>
		</_geometry>
		<_batcher><c path="phoenix.Batcher"/></_batcher>
		<lock public="1" set="method" line="103"><f a=""><x path="Void"/></f></lock>
		<dirty public="1" set="method" line="109"><f a=""><x path="Void"/></f></dirty>
		<update_size public="1" set="method" line="115">
			<f a="_width:_height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</update_size>
		<set public="1" set="method" line="208">
			<f a="_width:_height">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</set>
		<set_size set="method" line="330" override="1"><f a="_v">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_size>
		<set_pos set="method" line="346" override="1"><f a="_v">
	<t path="luxe.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<ondestroy public="1" set="method" line="360" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<set_visible set="method" line="368" override="1"><f a="_v">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_depth set="method" line="380" override="1"><f a="_d">
	<x path="Float"/>
	<x path="Float"/>
</f></set_depth>
		<set_clip_rect set="method" line="393" override="1"><f a="val">
	<t path="luxe.Rectangle"/>
	<t path="luxe.Rectangle"/>
</f></set_clip_rect>
		<set_color set="method" line="404" override="1"><f a="_color">
	<t path="luxe.Color"/>
	<t path="luxe.Color"/>
</f></set_color>
		<_create set="method" line="414"><f a="_pos:_w:_h:?_reset" v=":::false">
	<t path="luxe.Vector"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></_create>
		<create public="1" set="method" line="454"><f a="_pos:_w:_h:?_reset" v=":::false">
	<t path="luxe.Vector"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></create>
		<init public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="51">
			<f a="_options">
				<t path="luxe.options.NineSliceOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>create a new nineslice with given options</haxe_doc>
		</new>
		<haxe_doc>A nineslice based sprite, for scaling</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="luxe._Parcel.ShaderInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Parcel.hx" private="1" module="luxe.Parcel"><a>
	<vs_id><c path="String"/></vs_id>
	<ps_id><c path="String"/></ps_id>
</a></typedef>
	<typedef path="luxe._Parcel.FontInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Parcel.hx" private="1" module="luxe.Parcel"><a>
	<path><c path="String"/></path>
	<id><c path="String"/></id>
</a></typedef>
	<typedef path="luxe._Parcel.DataInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Parcel.hx" private="1" module="luxe.Parcel"><a>
	<id><c path="String"/></id>
	<async><x path="Bool"/></async>
</a></typedef>
	<typedef path="luxe._Parcel.TextInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Parcel.hx" private="1" module="luxe.Parcel"><t path="luxe._Parcel.DataInfo"/></typedef>
	<typedef path="luxe._Parcel.SoundInfo" params="" file="/Users/sven/dev/luxe/luxe/luxe/Parcel.hx" private="1" module="luxe.Parcel"><a>
	<name><c path="String"/></name>
	<is_stream><x path="Bool"/></is_stream>
	<id><c path="String"/></id>
</a></typedef>
	<class path="luxe.resource.ResourceManager" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/ResourceManager.hx">
		<resourcelist public="1"><c path="Array"><c path="luxe.resource.Resource"/></c></resourcelist>
		<render_textures public="1"><x path="Map">
	<c path="String"/>
	<c path="phoenix.RenderTexture"/>
</x></render_textures>
		<textures public="1"><x path="Map">
	<c path="String"/>
	<c path="phoenix.Texture"/>
</x></textures>
		<shaders public="1"><x path="Map">
	<c path="String"/>
	<c path="phoenix.Shader"/>
</x></shaders>
		<fonts public="1"><x path="Map">
	<c path="String"/>
	<c path="phoenix.BitmapFont"/>
</x></fonts>
		<data public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.resource.DataResource"/>
</x></data>
		<text public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.resource.TextResource"/>
</x></text>
		<json public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.resource.JSONResource"/>
</x></json>
		<sounds public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.resource.SoundResource"/>
</x></sounds>
		<stats public="1"><c path="luxe.resource.ResourceStats"/></stats>
		<add public="1" set="method" line="98"><f a="res">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" line="129"><f a="res">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></remove>
		<uncache public="1" set="method" line="160"><f a="res">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></uncache>
		<cache public="1" set="method" line="186"><f a="res">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></cache>
		<find_render_texture public="1" set="method" line="212"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="phoenix.RenderTexture"/></t>
</f></find_render_texture>
		<find_texture public="1" set="method" line="216"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="phoenix.Texture"/></t>
</f></find_texture>
		<find_shader public="1" set="method" line="220"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="phoenix.Shader"/></t>
</f></find_shader>
		<find_font public="1" set="method" line="224"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="phoenix.BitmapFont"/></t>
</f></find_font>
		<find_sound public="1" set="method" line="228"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="luxe.resource.SoundResource"/></t>
</f></find_sound>
		<find_text public="1" set="method" line="232"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="luxe.resource.TextResource"/></t>
</f></find_text>
		<find_json public="1" set="method" line="236"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="luxe.resource.JSONResource"/></t>
</f></find_json>
		<find_data public="1" set="method" line="240"><f a="_name">
	<c path="String"/>
	<t path="Null"><c path="luxe.resource.DataResource"/></t>
</f></find_data>
		<clear public="1" set="method" line="244"><f a="?and_persistent" v="false">
	<x path="Bool"/>
	<x path="Void"/>
</f></clear>
		<find public="1" set="method" line="270"><f a="id">
	<c path="String"/>
	<c path="luxe.resource.Resource"/>
</f></find>
		<new public="1" set="method" line="83"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Parcel" params="" file="/Users/sven/dev/luxe/luxe/luxe/Parcel.hx">
		<extends path="luxe.resource.ResourceManager"/>
		<time_to_load public="1"><x path="Float"/></time_to_load>
		<time_start_load><x path="Float"/></time_start_load>
		<texture_list><c path="Array"><c path="String"/></c></texture_list>
		<shader_list><c path="Array"><t path="luxe._Parcel.ShaderInfo"/></c></shader_list>
		<font_list><c path="Array"><t path="luxe._Parcel.FontInfo"/></c></font_list>
		<sound_list><c path="Array"><t path="luxe._Parcel.SoundInfo"/></c></sound_list>
		<text_list><c path="Array"><t path="luxe._Parcel.TextInfo"/></c></text_list>
		<data_list><c path="Array"><t path="luxe._Parcel.DataInfo"/></c></data_list>
		<total_items public="1"><x path="Int"/></total_items>
		<current_count public="1"><x path="Int"/></current_count>
		<options public="1"><t path="luxe.options.ParcelOptions"/></options>
		<index_textures><x path="Int"/></index_textures>
		<index_fonts><x path="Int"/></index_fonts>
		<index_shaders><x path="Int"/></index_shaders>
		<index_sounds><x path="Int"/></index_sounds>
		<index_datas><x path="Int"/></index_datas>
		<index_texts><x path="Int"/></index_texts>
		<refresh_total_items set="method" line="90"><f a=""><x path="Void"/></f></refresh_total_items>
		<load public="1" set="method" line="101"><f a=""><x path="Void"/></f></load>
		<from_json public="1" set="method" line="147"><f a="_json_object">
	<d/>
	<x path="Void"/>
</f></from_json>
		<start_textures_load set="method" line="247"><f a=""><x path="Void"/></f></start_textures_load>
		<start_fonts_load set="method" line="279"><f a=""><x path="Void"/></f></start_fonts_load>
		<start_shaders_load set="method" line="310"><f a=""><x path="Void"/></f></start_shaders_load>
		<start_sounds_load set="method" line="341"><f a=""><x path="Void"/></f></start_sounds_load>
		<start_datas_load set="method" line="372"><f a=""><x path="Void"/></f></start_datas_load>
		<start_texts_load set="method" line="399"><f a=""><x path="Void"/></f></start_texts_load>
		<load_textures set="method" line="425"><f a=""><x path="Void"/></f></load_textures>
		<load_fonts set="method" line="433"><f a=""><x path="Void"/></f></load_fonts>
		<load_shaders set="method" line="441"><f a=""><x path="Void"/></f></load_shaders>
		<load_sounds set="method" line="449"><f a=""><x path="Void"/></f></load_sounds>
		<load_datas set="method" line="457"><f a=""><x path="Void"/></f></load_datas>
		<load_texts set="method" line="465"><f a=""><x path="Void"/></f></load_texts>
		<recursive_load_textures set="method" line="474"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></recursive_load_textures>
		<recursive_load_shaders set="method" line="505"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></recursive_load_shaders>
		<recursive_load_fonts set="method" line="536"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></recursive_load_fonts>
		<recursive_load_sounds set="method" line="567"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></recursive_load_sounds>
		<recursive_load_datas set="method" line="598"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></recursive_load_datas>
		<recursive_load_texts set="method" line="623"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></recursive_load_texts>
		<add_texture public="1" set="method" line="656"><f a="_id">
	<c path="String"/>
	<x path="Void"/>
</f></add_texture>
		<add_textures public="1" set="method" line="660"><f a="list">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></add_textures>
		<add_shader public="1" set="method" line="668"><f a="?ps_id:?vs_id" v="'default':'default'">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></add_shader>
		<add_shaders public="1" set="method" line="672"><f a="list">
	<c path="Array"><t path="luxe._Parcel.ShaderInfo"/></c>
	<x path="Void"/>
</f></add_shaders>
		<add_font public="1" set="method" line="680"><f a="_id:_path">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></add_font>
		<add_fonts public="1" set="method" line="684"><f a="list">
	<c path="Array"><t path="luxe._Parcel.FontInfo"/></c>
	<x path="Void"/>
</f></add_fonts>
		<add_sound public="1" set="method" line="692"><f a="_id:_name:?_is_stream" v="::false">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></add_sound>
		<add_sounds public="1" set="method" line="696"><f a="list">
	<c path="Array"><t path="luxe._Parcel.SoundInfo"/></c>
	<x path="Void"/>
</f></add_sounds>
		<add_text public="1" set="method" line="704"><f a="_id:?_async" v=":false">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></add_text>
		<add_texts public="1" set="method" line="708"><f a="list">
	<c path="Array"><t path="luxe._Parcel.TextInfo"/></c>
	<x path="Void"/>
</f></add_texts>
		<add_data public="1" set="method" line="716"><f a="_id:?_async" v=":false">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></add_data>
		<add_datas public="1" set="method" line="720"><f a="list">
	<c path="Array"><t path="luxe._Parcel.DataInfo"/></c>
	<x path="Void"/>
</f></add_datas>
		<load_texture set="method" line="729"><f a="_tex:_complete">
	<c path="String"/>
	<t path="Null"><f a="">
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></t>
	<x path="Void"/>
</f></load_texture>
		<load_shader set="method" line="762"><f a="_shader:_complete">
	<t path="luxe._Parcel.ShaderInfo"/>
	<t path="Null"><f a="">
	<c path="phoenix.Shader"/>
	<x path="Void"/>
</f></t>
	<x path="Void"/>
</f></load_shader>
		<load_font set="method" line="787"><f a="_font:_complete">
	<t path="luxe._Parcel.FontInfo"/>
	<t path="Null"><f a="">
	<c path="phoenix.BitmapFont"/>
	<x path="Void"/>
</f></t>
	<x path="Void"/>
</f></load_font>
		<load_data set="method" line="796"><f a="_data_info:_complete">
	<t path="luxe._Parcel.DataInfo"/>
	<t path="Null"><f a="">
	<c path="luxe.resource.DataResource"/>
	<x path="Void"/>
</f></t>
	<x path="Void"/>
</f></load_data>
		<load_text set="method" line="805"><f a="_text_info:_complete">
	<t path="luxe._Parcel.TextInfo"/>
	<t path="Null"><f a="">
	<c path="luxe.resource.TextResource"/>
	<x path="Void"/>
</f></t>
	<x path="Void"/>
</f></load_text>
		<load_sound set="method" line="814"><f a="_sound:_complete">
	<t path="luxe._Parcel.SoundInfo"/>
	<t path="Null"><f a="">
	<c path="luxe.resource.SoundResource"/>
	<x path="Void"/>
</f></t>
	<x path="Void"/>
</f></load_sound>
		<do_complete set="method" line="825"><f a=""><x path="Void"/></f></do_complete>
		<single_item_complete set="method" line="839"><f a="item">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></single_item_complete>
		<new public="1" set="method" line="60"><f a="?_options" v="null">
	<t path="luxe.options.ParcelOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.ParcelProgress" params="" file="/Users/sven/dev/luxe/luxe/luxe/ParcelProgress.hx">
		<parcel><c path="luxe.Parcel"/></parcel>
		<progress_bar><c path="luxe.Sprite"/></progress_bar>
		<progress_border><c path="luxe.Visual"/></progress_border>
		<background><c path="luxe.Sprite"/></background>
		<image_logo><c path="luxe.Sprite"/></image_logo>
		<options><t path="luxe.options.ParcelProgressOptions"/></options>
		<width><x path="Float"/></width>
		<height><x path="Float"/></height>
		<set_progress public="1" set="method" line="121"><f a="amount">
	<x path="Float"/>
	<x path="Void"/>
</f></set_progress>
		<onprogress public="1" set="method" line="130"><f a="r">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></onprogress>
		<oncomplete public="1" set="method" line="140"><f a="p">
	<c path="luxe.Parcel"/>
	<x path="Void"/>
</f></oncomplete>
		<do_complete set="method" line="157"><f a=""><x path="Void"/></f></do_complete>
		<new public="1" set="method" line="27"><f a="_options">
	<t path="luxe.options.ParcelProgressOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.ParticleSystem" params="" file="/Users/sven/dev/luxe/luxe/luxe/Particles.hx" module="luxe.Particles">
		<extends path="luxe.Entity"/>
		<enabled public="1"><x path="Bool"/></enabled>
		<emitters public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.ParticleEmitter"/>
</x></emitters>
		<init public="1" set="method" line="15" override="1"><f a=""><x path="Void"/></f></init>
		<add_emitter public="1" set="method" line="23"><f a="_template">
	<t path="luxe.options.ParticleEmitterOptions"/>
	<x path="Void"/>
</f></add_emitter>
		<start public="1" set="method" line="45"><f a="?duration" v="-1">
	<x path="Float"/>
	<x path="Void"/>
</f></start>
		<stop public="1" set="method" line="52"><f a=""><x path="Void"/></f></stop>
		<ondestroy public="1" set="method" line="59" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<update public="1" set="method" line="65" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="8"><f a="?_options">
	<t path="luxe.options.EntityOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="luxe.ParticleEmitterInitData" params="" file="/Users/sven/dev/luxe/luxe/luxe/Particles.hx" module="luxe.Particles"><a>
	<template><t path="luxe.options.ParticleEmitterOptions"/></template>
	<system><c path="luxe.ParticleSystem"/></system>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</name>
</a></typedef>
	<class path="luxe.ParticleEmitter" params="" file="/Users/sven/dev/luxe/luxe/luxe/Particles.hx" module="luxe.Particles">
		<extends path="luxe.Component"/>
		<particle_system public="1"><c path="luxe.ParticleSystem"/></particle_system>
		<enabled public="1"><x path="Bool"/></enabled>
		<emit_count public="1"><x path="Int"/></emit_count>
		<active_particles public="1"><c path="Array"><c path="luxe.Particle"/></c></active_particles>
		<elapsed_time public="1"><x path="Float"/></elapsed_time>
		<duration public="1"><x path="Float"/></duration>
		<emission_rate public="1"><x path="Float"/></emission_rate>
		<emit_next public="1"><x path="Float"/></emit_next>
		<emit_last public="1"><x path="Float"/></emit_last>
		<particle_index public="1"><x path="Int"/></particle_index>
		<particle_cache public="1"><c path="Array"><c path="luxe.Sprite"/></c></particle_cache>
		<cache_size public="1"><x path="Int"/></cache_size>
		<cache_index public="1"><x path="Int"/></cache_index>
		<depth public="1"><x path="Float"/></depth>
		<group public="1"><x path="Int"/></group>
		<particle_image public="1"><c path="phoenix.Texture"/></particle_image>
		<pos_value public="1"><t path="luxe.Vector"/></pos_value>
		<pos_offset public="1"><t path="luxe.Vector"/></pos_offset>
		<pos_random public="1"><t path="luxe.Vector"/></pos_random>
		<emit_time public="1"><x path="Float"/></emit_time>
		<direction public="1"><x path="Float"/></direction>
		<direction_random public="1"><x path="Float"/></direction_random>
		<gravity public="1"><t path="luxe.Vector"/></gravity>
		<zrotation public="1"><x path="Float"/></zrotation>
		<_position public="1"><t path="luxe.Vector"/></_position>
		<radius public="1"><x path="Float"/></radius>
		<radius_random public="1"><x path="Float"/></radius_random>
		<start_size public="1"><t path="luxe.Vector"/></start_size>
		<start_size_random public="1"><t path="luxe.Vector"/></start_size_random>
		<end_size public="1"><t path="luxe.Vector"/></end_size>
		<end_size_random public="1"><t path="luxe.Vector"/></end_size_random>
		<speed public="1"><x path="Float"/></speed>
		<end_speed public="1"><x path="Float"/></end_speed>
		<speed_random public="1"><x path="Float"/></speed_random>
		<life public="1"><x path="Float"/></life>
		<life_random public="1"><x path="Float"/></life_random>
		<rotation_value public="1"><x path="Float"/></rotation_value>
		<rotation_random public="1"><x path="Float"/></rotation_random>
		<end_rotation public="1"><x path="Float"/></end_rotation>
		<end_rotation_random public="1"><x path="Float"/></end_rotation_random>
		<rotation_offset public="1"><x path="Float"/></rotation_offset>
		<start_color public="1"><t path="luxe.Color"/></start_color>
		<start_color_random public="1"><t path="luxe.Color"/></start_color_random>
		<end_color public="1"><t path="luxe.Color"/></end_color>
		<end_color_random public="1"><t path="luxe.Color"/></end_color_random>
		<template public="1"><t path="luxe.options.ParticleEmitterOptions"/></template>
		<emit_timer><x path="Float"/></emit_timer>
		<finish_time><x path="Float"/></finish_time>
		<direction_vector><t path="luxe.Vector"/></direction_vector>
		<has_end_rotation><x path="Bool"/></has_end_rotation>
		<_temp_speed><t path="luxe.Vector"/></_temp_speed>
		<_to_remove><c path="Array"><c path="luxe.Particle"/></c></_to_remove>
		<init public="1" set="method" line="163" override="1"><f a=""><x path="Void"/></f></init>
		<apply public="1" set="method" line="182"><f a="_template">
	<t path="luxe.options.ParticleEmitterOptions"/>
	<x path="Void"/>
</f></apply>
		<destroy public="1" set="method" line="315"><f a=""><x path="Void"/></f></destroy>
		<start public="1" set="method" line="330"><f a="t">
	<x path="Float"/>
	<x path="Void"/>
</f></start>
		<stop public="1" set="method" line="344"><f a=""><x path="Void"/></f></stop>
		<spawn set="method" line="350"><f a=""><x path="Void"/></f></spawn>
		<random_1_to_1 set="method" line="359"><f a=""><x path="Float"/></f></random_1_to_1>
		<init_particle set="method" line="361"><f a="particle">
	<c path="luxe.Particle"/>
	<x path="Void"/>
</f></init_particle>
		<update public="1" set="method" line="464" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<ondestroy public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<onremoved public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></onremoved>
		<new public="1" set="method" line="157"><f a="_data">
	<t path="luxe.ParticleEmitterInitData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.Particle" params="" file="/Users/sven/dev/luxe/luxe/luxe/Particles.hx" module="luxe.Particles">
		<particle_system public="1"><c path="luxe.ParticleSystem"/></particle_system>
		<particle_emitter public="1"><c path="luxe.ParticleEmitter"/></particle_emitter>
		<sprite public="1"><c path="luxe.Sprite"/></sprite>
		<start_size public="1"><t path="luxe.Vector"/></start_size>
		<end_size public="1"><t path="luxe.Vector"/></end_size>
		<size public="1"><t path="luxe.Vector"/></size>
		<position public="1"><t path="luxe.Vector"/></position>
		<direction public="1"><t path="luxe.Vector"/></direction>
		<move_direction public="1"><t path="luxe.Vector"/></move_direction>
		<speed public="1"><t path="luxe.Vector"/></speed>
		<time_to_live public="1"><x path="Float"/></time_to_live>
		<rotation public="1"><x path="Float"/></rotation>
		<color public="1"><t path="luxe.Color"/></color>
		<end_color public="1"><t path="luxe.Color"/></end_color>
		<color_delta public="1"><t path="luxe.Color"/></color_delta>
		<size_delta public="1"><t path="luxe.Vector"/></size_delta>
		<speed_delta public="1"><x path="Float"/></speed_delta>
		<rotation_delta public="1"><x path="Float"/></rotation_delta>
		<draw_size public="1"><t path="luxe.Vector"/></draw_size>
		<draw_color public="1"><t path="luxe.Color"/></draw_color>
		<new public="1" set="method" line="580"><f a="e">
	<c path="luxe.ParticleEmitter"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Physics" params="" file="/Users/sven/dev/luxe/luxe/luxe/Physics.hx">
		<tag_physics line="75" static="1"><c path="String"/></tag_physics>
		<core public="1"><c path="luxe.Core"/></core>
		<engines public="1"><c path="Array"><c path="luxe.PhysicsEngine"/></c></engines>
		<step_rate public="1" set="accessor"><x path="Float"/></step_rate>
		<step_delta public="1"><x path="Float"/></step_delta>
		<timer public="1">
			<c path="snow.utils.Timer"/>
			<meta><m n=":noCompletion"/></meta>
		</timer>
		<init public="1" set="method" line="44"><f a=""><x path="Void"/></f></init>
		<reset public="1" set="method" line="58"><f a=""><x path="Void"/></f></reset>
		<fixed_update set="method" line="78"><f a=""><x path="Void"/></f></fixed_update>
		<add_engine public="1" params="T1:T2" set="method" line="88">
			<f a="type:?_data" v=":null">
				<x path="Class"><c path="add_engine.T1"/></x>
				<c path="add_engine.T2"/>
				<c path="add_engine.T1"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</add_engine>
		<update public="1" set="method" line="105">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Only call this manually if step_rate is 0!</haxe_doc>
		</update>
		<process public="1" set="method" line="111"><f a=""><x path="Void"/></f></process>
		<render public="1" set="method" line="117"><f a=""><x path="Void"/></f></render>
		<destroy public="1" set="method" line="123"><f a=""><x path="Void"/></f></destroy>
		<set_step_rate set="method" line="138"><f a="_rate">
	<x path="Float"/>
	<x path="Float"/>
</f></set_step_rate>
		<new public="1" set="method" line="38"><f a="_core">
	<c path="luxe.Core"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.PhysicsEngine" params="" file="/Users/sven/dev/luxe/luxe/luxe/Physics.hx" module="luxe.Physics">
		<name public="1"><c path="String"/></name>
		<paused public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</paused>
		<gravity public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</gravity>
		<draw public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</draw>
		<init public="1" set="method" line="173"><f a=""><x path="Void"/></f></init>
		<_render set="method" line="177"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></_render>
		<process public="1" set="method" line="181"><f a=""><x path="Void"/></f></process>
		<update public="1" set="method" line="185"><f a=""><x path="Void"/></f></update>
		<render public="1" set="method" line="189"><f a=""><x path="Void"/></f></render>
		<get_paused public="1" set="method" line="193"><f a=""><x path="Bool"/></f></get_paused>
		<set_paused public="1" set="method" line="199"><f a="?_pause" v="null">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_paused>
		<get_draw public="1" set="method" line="205"><f a=""><x path="Bool"/></f></get_draw>
		<set_draw public="1" set="method" line="211"><f a="_draw">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_draw>
		<get_gravity public="1" set="method" line="217"><f a=""><t path="luxe.Vector"/></f></get_gravity>
		<set_gravity public="1" set="method" line="223"><f a="_gravity">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_gravity>
		<destroy public="1" set="method" line="229"><f a=""><x path="Void"/></f></destroy>
		<new public="1" set="method" line="166"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.Quaternion" params="" file="/Users/sven/dev/luxe/luxe/luxe/Quaternion.hx"><c path="phoenix.Quaternion"/></typedef>
	<typedef path="luxe.Rectangle" params="" file="/Users/sven/dev/luxe/luxe/luxe/Rectangle.hx"><c path="phoenix.Rectangle"/></typedef>
	<class path="luxe.Scene" params="" file="/Users/sven/dev/luxe/luxe/luxe/Scene.hx">
		<extends path="luxe.Objects"/>
		<entities public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.Entity"/>
</x></entities>
		<inited public="1"><x path="Bool"/></inited>
		<started public="1"><x path="Bool"/></started>
		<_delayed_init_entities><c path="Array"><c path="luxe.Entity"/></c></_delayed_init_entities>
		<_delayed_reset_entities><c path="Array"><c path="luxe.Entity"/></c></_delayed_reset_entities>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<add public="1" set="method" line="69">
			<f a="entity">
				<c path="luxe.Entity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>add given entity to this scene</haxe_doc>
		</add>
		<remove public="1" set="method" line="100">
			<f a="entity">
				<c path="luxe.Entity"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>removes given entity from this scene</haxe_doc>
		</remove>
		<empty public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>destroy all entities in this scene, emptying it.</haxe_doc>
		</empty>
		<get_named_like public="1" set="method" line="147">
			<f a="_name:into">
				<c path="String"/>
				<c path="Array"><c path="luxe.Entity"/></c>
				<c path="Array"><c path="luxe.Entity"/></c>
			</f>
			<haxe_doc>Return a list of similarly named entities in the scene.
            For example, enemy.1 enemy.2 enemy.3 with 'enemy' will return all of these.
            Useful for the EntityOptions name_unique flag.
            Iterates all entities in the scene, use carefully.
            Note that this is a function that will likely become a part of a set of functions so it may change slightly.
            Current behavior works based on (name.)* from the beginning of the name only.
            `enemy.1` will match, `enemy` will not (no .), `this.enemy.name` will not.
            `^((?:enemy)[.]{1})`</haxe_doc>
		</get_named_like>
		<render set="method" line="162"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></render>
		<prerender set="method" line="168"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></prerender>
		<postrender set="method" line="174"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></postrender>
		<keydown set="method" line="182"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></keydown>
		<keyup set="method" line="190"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></keyup>
		<textinput set="method" line="198"><f a="e">
	<t path="luxe.TextEvent"/>
	<x path="Void"/>
</f></textinput>
		<mousedown set="method" line="208"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousedown>
		<mousewheel set="method" line="216"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousewheel>
		<mouseup set="method" line="224"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mouseup>
		<mousemove set="method" line="232"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousemove>
		<touchdown set="method" line="242"><f a="event">
	<t path="luxe.TouchEvent"/>
	<x path="Void"/>
</f></touchdown>
		<touchup set="method" line="248"><f a="event">
	<t path="luxe.TouchEvent"/>
	<x path="Void"/>
</f></touchup>
		<touchmove set="method" line="254"><f a="event">
	<t path="luxe.TouchEvent"/>
	<x path="Void"/>
</f></touchmove>
		<gamepadaxis set="method" line="262"><f a="event">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepadaxis>
		<gamepadup set="method" line="268"><f a="event">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepadup>
		<gamepaddown set="method" line="274"><f a="event">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepaddown>
		<gamepaddevice set="method" line="280"><f a="event">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepaddevice>
		<inputdown set="method" line="288"><f a="event">
	<a>
		<event><t path="luxe.InputEvent"/></event>
		<_name><c path="String"/></_name>
	</a>
	<x path="Void"/>
</f></inputdown>
		<inputup set="method" line="294"><f a="event">
	<a>
		<event><t path="luxe.InputEvent"/></event>
		<_name><c path="String"/></_name>
	</a>
	<x path="Void"/>
</f></inputup>
		<_destroy set="method" line="302"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></_destroy>
		<destroy public="1" set="method" line="308"><f a=""><x path="Void"/></f></destroy>
		<_do_init set="method" line="343"><f a=""><x path="Bool"/></f></_do_init>
		<init public="1" set="method" line="364"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></init>
		<reset public="1" set="method" line="380">
			<f a=""><x path="Void"/></f>
			<haxe_doc>reset this scene, allowing all entities, children and attached components to be notified of the reset</haxe_doc>
		</reset>
		<update set="method" line="390"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<handle_delayed_additions set="method" line="410"><f a=""><x path="Void"/></f></handle_delayed_additions>
		<get_length set="method" line="434"><f a=""><x path="Int"/></f></get_length>
		<toString set="method" line="440"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="22"><f a="?_name" v="'untitled scene'">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.Screen" params="" file="/Users/sven/dev/luxe/luxe/luxe/Screen.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<w public="1"><x path="Float"/></w>
		<h public="1"><x path="Float"/></h>
		<cursor public="1"><c path="luxe.Cursor"/></cursor>
		<core public="1"><c path="luxe.Core"/></core>
		<mid public="1" get="accessor" set="null">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</mid>
		<size public="1" get="accessor" set="null">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</size>
		<toString set="method" line="34"><f a=""><c path="String"/></f></toString>
		<get_mid set="method" line="39"><f a=""><t path="luxe.Vector"/></f></get_mid>
		<internal_resized set="method" line="45">
			<f a="_w:_h">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</internal_resized>
		<get_size set="method" line="54"><f a=""><t path="luxe.Vector"/></f></get_size>
		<point_inside public="1" set="method" line="60"><f a="_p">
	<t path="luxe.Vector"/>
	<x path="Bool"/>
</f></point_inside>
		<new public="1" set="method" line="19"><f a="?_core:_x:_y:_w:_h" v="null::::">
	<c path="luxe.Core"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":allow"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.Cursor" params="" file="/Users/sven/dev/luxe/luxe/luxe/Screen.hx" module="luxe.Screen">
		<screen><c path="luxe.Screen"/></screen>
		<visible public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</visible>
		<grab public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</grab>
		<lock public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</lock>
		<pos public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</pos>
		<get_visible set="method" line="95"><f a=""><x path="Bool"/></f></get_visible>
		<set_visible set="method" line="101"><f a="_visible">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<get_grab set="method" line="109"><f a=""><x path="Bool"/></f></get_grab>
		<get_lock set="method" line="115"><f a=""><x path="Bool"/></f></get_lock>
		<set_grab set="method" line="121"><f a="_grab">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_grab>
		<set_lock set="method" line="129"><f a="_lock">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_lock>
		<get_pos set="method" line="137"><f a=""><t path="luxe.Vector"/></f></get_pos>
		<set_pos set="method" line="147"><f a="_p">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_pos>
		<new public="1" set="method" line="87"><f a="_screen">
	<c path="luxe.Screen"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.Sound" params="" file="/Users/sven/dev/luxe/luxe/luxe/Sound.hx"><t path="snow.audio.Sound"/></typedef>
	<class path="luxe.State" params="" file="/Users/sven/dev/luxe/luxe/luxe/States.hx" module="luxe.States">
		<extends path="luxe.ID"/>
		<machine public="1"><c path="luxe.States"/></machine>
		<active public="1"><x path="Bool"/></active>
		<enabled public="1"><x path="Bool"/></enabled>
		<enable public="1" params="T" set="method" line="25"><f a="?_enable_with" v="null">
	<c path="enable.T"/>
	<x path="Void"/>
</f></enable>
		<disable public="1" params="T" set="method" line="31"><f a="?_disable_with" v="null">
	<c path="disable.T"/>
	<x path="Void"/>
</f></disable>
		<destroy public="1" set="method" line="37"><f a=""><x path="Void"/></f></destroy>
		<init public="1" set="method" line="44"><f a=""><x path="Void"/></f></init>
		<update public="1" set="method" line="45"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<onfixedupdate public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onfixedupdate>
		<onleave public="1" params="T" set="method" line="50">
			<f a="d">
				<c path="onleave.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onleave>
		<onenter public="1" params="T" set="method" line="51">
			<f a="d">
				<c path="onenter.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onenter>
		<onenabled public="1" params="T" set="method" line="52">
			<f a="d">
				<c path="onenabled.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onenabled>
		<ondisabled public="1" params="T" set="method" line="53">
			<f a="d">
				<c path="ondisabled.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ondisabled>
		<onadded public="1" set="method" line="54">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onadded>
		<onremoved public="1" set="method" line="55">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onremoved>
		<onrender public="1" set="method" line="57">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onrender>
		<onprerender public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onprerender>
		<onpostrender public="1" set="method" line="59">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onpostrender>
		<onreset public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</onreset>
		<ondestroy public="1" set="method" line="63">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</ondestroy>
		<onkeyup public="1" set="method" line="66">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onkeyup>
		<onkeydown public="1" set="method" line="67">
			<f a="event">
				<t path="luxe.KeyEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onkeydown>
		<ontextinput public="1" set="method" line="68">
			<f a="event">
				<t path="luxe.TextEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ontextinput>
		<oninputdown public="1" set="method" line="70">
			<f a="name:event">
				<c path="String"/>
				<t path="luxe.InputEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</oninputdown>
		<oninputup public="1" set="method" line="71">
			<f a="name:event">
				<c path="String"/>
				<t path="luxe.InputEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</oninputup>
		<onmousedown public="1" set="method" line="73">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onmousedown>
		<onmouseup public="1" set="method" line="74">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onmouseup>
		<onmousemove public="1" set="method" line="75">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onmousemove>
		<onmousewheel public="1" set="method" line="76">
			<f a="event">
				<t path="luxe.MouseEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</onmousewheel>
		<ontouchdown public="1" set="method" line="78">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ontouchdown>
		<ontouchup public="1" set="method" line="79">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ontouchup>
		<ontouchmove public="1" set="method" line="80">
			<f a="event">
				<t path="luxe.TouchEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ontouchmove>
		<ongamepadup public="1" set="method" line="82">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ongamepadup>
		<ongamepaddown public="1" set="method" line="83">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ongamepaddown>
		<ongamepadaxis public="1" set="method" line="84">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ongamepadaxis>
		<ongamepaddevice public="1" set="method" line="85">
			<f a="event">
				<t path="luxe.GamepadEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</ongamepaddevice>
		<new public="1" set="method" line="19"><f a="_options">
	<t path="luxe.options.StateOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.States" params="" file="/Users/sven/dev/luxe/luxe/luxe/States.hx">
		<extends path="luxe.Objects"/>
		<_states public="1">
			<x path="Map">
				<c path="String"/>
				<c path="luxe.State"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</_states>
		<active_states public="1"><c path="Array"><c path="luxe.State"/></c></active_states>
		<current_state public="1"><c path="luxe.State"/></current_state>
		<add public="1" params="T" set="method" line="141"><f a="_state">
	<c path="add.T"/>
	<c path="add.T"/>
</f></add>
		<remove public="1" params="T:T1" set="method" line="157"><f a="_name:?_leave_with" v=":null">
	<c path="String"/>
	<c path="remove.T1"/>
	<c path="remove.T"/>
</f></remove>
		<kill public="1" set="method" line="194"><f a="_name">
	<c path="String"/>
	<x path="Void"/>
</f></kill>
		<enabled public="1" set="method" line="205"><f a="_name">
	<c path="String"/>
	<x path="Bool"/>
</f></enabled>
		<enable public="1" params="T" set="method" line="217"><f a="_name:?_enable_with" v=":null">
	<c path="String"/>
	<c path="enable.T"/>
	<x path="Void"/>
</f></enable>
		<disable public="1" params="T" set="method" line="229"><f a="_name:?_disable_with" v=":null">
	<c path="String"/>
	<c path="disable.T"/>
	<x path="Void"/>
</f></disable>
		<enter params="T" set="method" line="241"><f a="_state:?_enter_with" v=":null">
	<c path="luxe.State"/>
	<c path="enter.T"/>
	<x path="Void"/>
</f></enter>
		<leave params="T" set="method" line="250"><f a="_state:?_leave_with" v=":null">
	<c path="luxe.State"/>
	<c path="leave.T"/>
	<x path="Void"/>
</f></leave>
		<set public="1" params="T1:T2" set="method" line="259"><f a="name:?_enter_with:?_leave_with:?pos" v=":null:null:null">
	<c path="String"/>
	<c path="set.T1"/>
	<c path="set.T2"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></set>
		<destroy public="1" set="method" line="289"><f a=""><x path="Void"/></f></destroy>
		<init set="method" line="329"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></init>
		<reset set="method" line="335"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></reset>
		<update set="method" line="341"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<ondestroy set="method" line="348"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></ondestroy>
		<render set="method" line="354"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></render>
		<prerender set="method" line="360"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></prerender>
		<postrender set="method" line="366"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></postrender>
		<keydown set="method" line="374"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></keydown>
		<keyup set="method" line="380"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></keyup>
		<textinput set="method" line="386"><f a="e">
	<t path="luxe.TextEvent"/>
	<x path="Void"/>
</f></textinput>
		<inputup set="method" line="394"><f a="_event">
	<a>
		<name><c path="String"/></name>
		<event><t path="luxe.InputEvent"/></event>
	</a>
	<x path="Void"/>
</f></inputup>
		<inputdown set="method" line="400"><f a="_event">
	<a>
		<name><c path="String"/></name>
		<event><t path="luxe.InputEvent"/></event>
	</a>
	<x path="Void"/>
</f></inputdown>
		<mousedown set="method" line="408"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousedown>
		<mousewheel set="method" line="414"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousewheel>
		<mouseup set="method" line="420"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mouseup>
		<mousemove set="method" line="426"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></mousemove>
		<touchdown set="method" line="434"><f a="e">
	<t path="luxe.TouchEvent"/>
	<x path="Void"/>
</f></touchdown>
		<touchup set="method" line="440"><f a="e">
	<t path="luxe.TouchEvent"/>
	<x path="Void"/>
</f></touchup>
		<touchmove set="method" line="446"><f a="e">
	<t path="luxe.TouchEvent"/>
	<x path="Void"/>
</f></touchmove>
		<gamepadaxis set="method" line="454"><f a="e">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepadaxis>
		<gamepadup set="method" line="460"><f a="e">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepadup>
		<gamepaddown set="method" line="466"><f a="e">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepaddown>
		<gamepaddevice set="method" line="472"><f a="e">
	<t path="luxe.GamepadEvent"/>
	<x path="Void"/>
</f></gamepaddevice>
		<new public="1" set="method" line="97"><f a="?_options" v="null">
	<t path="luxe.options.StatesOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.TextAlign" params="" file="/Users/sven/dev/luxe/luxe/luxe/Text.hx" module="luxe.Text"><x path="phoenix.TextAlign"/></typedef>
	<class path="luxe.Text" params="" file="/Users/sven/dev/luxe/luxe/luxe/Text.hx">
		<extends path="luxe.Visual"/>
		<geom public="1"><c path="phoenix.geometry.TextGeometry"/></geom>
		<text public="1" get="accessor" set="accessor"><c path="String"/></text>
		<get_text set="method" line="22"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="23"><f a="_s">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<font public="1" get="accessor" set="accessor"><c path="phoenix.BitmapFont"/></font>
		<get_font set="method" line="25"><f a=""><c path="phoenix.BitmapFont"/></f></get_font>
		<set_font set="method" line="26"><f a="_f">
	<c path="phoenix.BitmapFont"/>
	<c path="phoenix.BitmapFont"/>
</f></set_font>
		<point_size public="1" get="accessor" set="accessor"><x path="Float"/></point_size>
		<get_point_size set="method" line="28"><f a=""><x path="Float"/></f></get_point_size>
		<set_point_size set="method" line="29"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_point_size>
		<letter_spacing public="1" get="accessor" set="accessor"><x path="Float"/></letter_spacing>
		<get_letter_spacing set="method" line="31"><f a=""><x path="Float"/></f></get_letter_spacing>
		<set_letter_spacing set="method" line="32"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_letter_spacing>
		<line_spacing public="1" get="accessor" set="accessor"><x path="Float"/></line_spacing>
		<get_line_spacing set="method" line="34"><f a=""><x path="Float"/></f></get_line_spacing>
		<set_line_spacing set="method" line="35"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_line_spacing>
		<bounds public="1" get="accessor" set="accessor"><t path="luxe.Rectangle"/></bounds>
		<get_bounds set="method" line="38"><f a=""><c path="phoenix.Rectangle"/></f></get_bounds>
		<set_bounds set="method" line="39"><f a="_b">
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Rectangle"/>
</f></set_bounds>
		<bounds_wrap public="1" get="accessor" set="accessor"><x path="Bool"/></bounds_wrap>
		<get_bounds_wrap set="method" line="41"><f a=""><x path="Bool"/></f></get_bounds_wrap>
		<set_bounds_wrap set="method" line="42"><f a="_b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bounds_wrap>
		<align public="1" get="accessor" set="accessor"><t path="luxe.TextAlign"/></align>
		<get_align set="method" line="45"><f a=""><x path="phoenix.TextAlign"/></f></get_align>
		<set_align set="method" line="46"><f a="_a">
	<x path="phoenix.TextAlign"/>
	<x path="phoenix.TextAlign"/>
</f></set_align>
		<align_vertical public="1" get="accessor" set="accessor"><t path="luxe.TextAlign"/></align_vertical>
		<get_align_vertical set="method" line="48"><f a=""><x path="phoenix.TextAlign"/></f></get_align_vertical>
		<set_align_vertical set="method" line="49"><f a="_a">
	<x path="phoenix.TextAlign"/>
	<x path="phoenix.TextAlign"/>
</f></set_align_vertical>
		<sdf public="1" get="accessor" set="accessor"><x path="Bool"/></sdf>
		<get_sdf set="method" line="54"><f a=""><x path="Bool"/></f></get_sdf>
		<set_sdf set="method" line="55"><f a="_s">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_sdf>
		<smoothness public="1" get="accessor" set="accessor"><x path="Float"/></smoothness>
		<get_smoothness set="method" line="58"><f a=""><x path="Float"/></f></get_smoothness>
		<set_smoothness set="method" line="59"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_smoothness>
		<thickness public="1" get="accessor" set="accessor"><x path="Float"/></thickness>
		<get_thickness set="method" line="61"><f a=""><x path="Float"/></f></get_thickness>
		<set_thickness set="method" line="62"><f a="_t">
	<x path="Float"/>
	<x path="Float"/>
</f></set_thickness>
		<outline public="1" get="accessor" set="accessor"><x path="Float"/></outline>
		<get_outline set="method" line="65"><f a=""><x path="Float"/></f></get_outline>
		<set_outline set="method" line="66"><f a="_o">
	<x path="Float"/>
	<x path="Float"/>
</f></set_outline>
		<outline_color public="1" get="accessor" set="accessor"><t path="luxe.Color"/></outline_color>
		<get_outline_color set="method" line="68"><f a=""><c path="phoenix.Color"/></f></get_outline_color>
		<set_outline_color set="method" line="69"><f a="_c">
	<c path="phoenix.Color"/>
	<c path="phoenix.Color"/>
</f></set_outline_color>
		<glow_threshold public="1" get="accessor" set="accessor"><x path="Float"/></glow_threshold>
		<get_glow_threshold set="method" line="72"><f a=""><x path="Float"/></f></get_glow_threshold>
		<set_glow_threshold set="method" line="73"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_glow_threshold>
		<glow_amount public="1" get="accessor" set="accessor"><x path="Float"/></glow_amount>
		<get_glow_amount set="method" line="75"><f a=""><x path="Float"/></f></get_glow_amount>
		<set_glow_amount set="method" line="76"><f a="_e">
	<x path="Float"/>
	<x path="Float"/>
</f></set_glow_amount>
		<glow_color public="1" get="accessor" set="accessor"><t path="luxe.Color"/></glow_color>
		<get_glow_color set="method" line="78"><f a=""><c path="phoenix.Color"/></f></get_glow_color>
		<set_glow_color set="method" line="79"><f a="_c">
	<c path="phoenix.Color"/>
	<c path="phoenix.Color"/>
</f></set_glow_color>
		<text_options public="1"><t path="luxe.options.TextOptions"/></text_options>
		<point_inside public="1" set="method" line="145"><f a="p">
	<t path="luxe.Vector"/>
	<x path="Bool"/>
</f></point_inside>
		<set_pos_from_transform set="method" line="151" override="1"><f a="_p">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></set_pos_from_transform>
		<init public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></init>
		<ondestroy public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<new public="1" set="method" line="83"><f a="_options">
	<t path="luxe.options.TextOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.Timer" params="" file="/Users/sven/dev/luxe/luxe/luxe/Timer.hx">
		<core public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<timers public="1">
			<c path="Array"><c path="snow.utils.Timer"/></c>
			<meta><m n=":noCompletion"/></meta>
		</timers>
		<init public="1" set="method" line="19">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<destroy public="1" set="method" line="25">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</destroy>
		<process public="1" set="method" line="31">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<reset public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Kill all existing scheduled timers created through `schedule`</haxe_doc>
		</reset>
		<schedule public="1" set="method" line="48"><f a="_time_in_seconds:_on_time:?repeat" v="::false">
	<x path="Float"/>
	<f a=""><x path="Void"/></f>
	<x path="Bool"/>
	<c path="snow.utils.Timer"/>
</f></schedule>
		<new public="1" set="method" line="14">
			<f a="_core">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.Transform" params="" file="/Users/sven/dev/luxe/luxe/luxe/Transform.hx"><c path="phoenix.Transform"/></typedef>
	<typedef path="luxe.Vector" params="" file="/Users/sven/dev/luxe/luxe/luxe/Vector.hx"><c path="phoenix.Vector"/></typedef>
	<typedef path="luxe.Vec" params="" file="/Users/sven/dev/luxe/luxe/luxe/Vector.hx" module="luxe.Vector"><x path="phoenix.Vec"/></typedef>
	<class path="luxe.collision.Collision" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/Collision.hx">
		<test public="1" set="method" line="18" static="1">
			<f a="shape1:shape2">
				<c path="luxe.collision.shapes.Shape"/>
				<c path="luxe.collision.shapes.Shape"/>
				<c path="luxe.collision.CollisionData"/>
			</f>
			<haxe_doc>Test a single shape against another shape.
            When no collision is found between them, this function returns null.
            Returns a `CollisionData` if a collision is found.</haxe_doc>
		</test>
		<testShapes public="1" set="method" line="57" static="1">
			<f a="shape1:shapes">
				<c path="luxe.collision.shapes.Shape"/>
				<c path="Array"><c path="luxe.collision.shapes.Shape"/></c>
				<c path="Array"><c path="luxe.collision.CollisionData"/></c>
			</f>
			<haxe_doc>Test a single shape against multiple other shapes.
            Will never return null, always length 0 array.
            Returns a list of `CollisionData` information for each collision found.</haxe_doc>
		</testShapes>
		<ray public="1" set="method" line="75" static="1">
			<f a="lineStart:lineEnd:shapes">
				<t path="luxe.Vector"/>
				<t path="luxe.Vector"/>
				<c path="Array"><c path="luxe.collision.shapes.Shape"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Test a line between two points against a list of shapes.
            If a collision is found, returns true, otherwise false.</haxe_doc>
		</ray>
		<testCircleLine public="1" set="method" line="107" static="1">
			<f a="circle:lineStart:lineEnd">
				<c path="luxe.collision.shapes.Circle"/>
				<t path="luxe.Vector"/>
				<t path="luxe.Vector"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Test a circle vs a line between two points</haxe_doc>
		</testCircleLine>
		<pointInPoly public="1" set="method" line="142" static="1">
			<f a="point:poly">
				<t path="luxe.Vector"/>
				<c path="luxe.collision.shapes.Polygon"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Test if a given point lands inside the given polygon</haxe_doc>
		</pointInPoly>
		<bresenhamLine public="1" set="method" line="180" static="1">
			<f a="start:end">
				<t path="luxe.Vector"/>
				<t path="luxe.Vector"/>
				<c path="Array"><t path="luxe.Vector"/></c>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Internal api - generate a bresenham line between given start and end points</haxe_doc>
		</bresenhamLine>
		<checkCircleVsPolygon set="method" line="249" static="1">
			<f a="circle:polygon:flip">
				<c path="luxe.collision.shapes.Circle"/>
				<c path="luxe.collision.shapes.Polygon"/>
				<x path="Bool"/>
				<c path="luxe.collision.CollisionData"/>
			</f>
			<haxe_doc>Internal api - check a circle against a polygon</haxe_doc>
		</checkCircleVsPolygon>
		<checkCircles set="method" line="404" static="1">
			<f a="circle1:circle2">
				<c path="luxe.collision.shapes.Circle"/>
				<c path="luxe.collision.shapes.Circle"/>
				<c path="luxe.collision.CollisionData"/>
			</f>
			<haxe_doc>Internal api - check a circle against a circle</haxe_doc>
		</checkCircles>
		<checkPolygons set="method" line="427" static="1">
			<f a="polygon1:polygon2:flip">
				<c path="luxe.collision.shapes.Polygon"/>
				<c path="luxe.collision.shapes.Polygon"/>
				<x path="Bool"/>
				<c path="luxe.collision.CollisionData"/>
			</f>
			<haxe_doc>Internal api - check a polygon against a polygon</haxe_doc>
		</checkPolygons>
		<findNormalAxis set="method" line="519" static="1">
			<f a="vertices:index">
				<c path="Array"><t path="luxe.Vector"/></c>
				<x path="Int"/>
				<t path="luxe.Vector"/>
			</f>
			<haxe_doc>Internal api - find the normal axis of a vert in the list at index</haxe_doc>
		</findNormalAxis>
		<swap set="method" line="532" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<t path="luxe.Vector"/>
			</f>
			<haxe_doc>Internal api - swap a and b</haxe_doc>
		</swap>
		<new public="1" set="method" line="175">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.collision.CollisionData" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/CollisionData.hx">
		<overlap public="1">
			<x path="Float"/>
			<haxe_doc>the overlap amount</haxe_doc>
		</overlap>
		<separation public="1">
			<t path="luxe.Vector"/>
			<haxe_doc>a vector that when subtracted to shape 1 will separate it from shape 2</haxe_doc>
		</separation>
		<shape1 public="1">
			<c path="luxe.collision.shapes.Shape"/>
			<haxe_doc>the first shape</haxe_doc>
		</shape1>
		<shape2 public="1">
			<c path="luxe.collision.shapes.Shape"/>
			<haxe_doc>the second shape</haxe_doc>
		</shape2>
		<unitVector public="1">
			<t path="luxe.Vector"/>
			<haxe_doc>unit vector on the axis of the collision (the normal of the face that was collided with)</haxe_doc>
		</unitVector>
		<new public="1" set="method" line="20">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.collision.ShapeDrawer" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/ShapeDrawer.hx">
		<drawLine public="1" set="method" line="22">
			<f a="p0:p1:?color:?immediate" v="::null:false">
				<t path="luxe.Vector"/>
				<t path="luxe.Vector"/>
				<t path="luxe.Color"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw a line between p0 and p1. Implement this function at minimum in custom drawing handlers</haxe_doc>
		</drawLine>
		<drawShape public="1" set="method" line="27">
			<f a="shape">
				<c path="luxe.collision.shapes.Shape"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw a `Shape`, it will determine the type and draw it for you.</haxe_doc>
		</drawShape>
		<drawPolygon public="1" set="method" line="40">
			<f a="poly:?color:?immediate" v=":null:false">
				<c path="luxe.collision.shapes.Polygon"/>
				<t path="luxe.Color"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw a `Polygon`</haxe_doc>
		</drawPolygon>
		<drawVector public="1" set="method" line="49">
			<f a="v:start:?color:?immediate" v="::null:false">
				<t path="luxe.Vector"/>
				<t path="luxe.Vector"/>
				<t path="luxe.Color"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw a `Vector` (with magnitude)</haxe_doc>
		</drawVector>
		<drawCircle public="1" set="method" line="56">
			<f a="circle:?color:?immediate" v=":null:false">
				<c path="luxe.collision.shapes.Circle"/>
				<t path="luxe.Color"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw a circle `Shape`</haxe_doc>
		</drawCircle>
		<drawVertList set="method" line="102">
			<f a="_verts:?color:?immediate" v=":null:false">
				<c path="Array"><t path="luxe.Vector"/></c>
				<t path="luxe.Color"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Draw a list of points as lines</haxe_doc>
		</drawVertList>
		<new public="1" set="method" line="17">
			<f a=""><x path="Void"/></f>
			<haxe_doc>empty constructor</haxe_doc>
		</new>
		<haxe_doc>To implement your own debug drawing class, you only need to override drawLine function and implement it
    the rest is handled internally. You can override specifics if you want, but it's not required</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.collision.ShapeDrawerLuxe" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/ShapeDrawerLuxe.hx">
		<extends path="luxe.collision.ShapeDrawer"/>
		<drawLine public="1" set="method" line="10" override="1"><f a="start:end:?color:?immediate" v="::null:false">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
	<t path="luxe.Color"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></drawLine>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.collision.shapes.Shape" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/shapes/Shape.hx">
		<active public="1">
			<x path="Bool"/>
			<haxe_doc>The state of this shape, if inactive can be ignored in results</haxe_doc>
		</active>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this shape, to help in debugging</haxe_doc>
		</name>
		<data public="1">
			<d/>
			<haxe_doc>A generic data object where you can store anything you want, for later use</haxe_doc>
		</data>
		<tags public="1">
			<x path="Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<haxe_doc>A list of tags to use for marking shapes with data for later use, by key/value</haxe_doc>
		</tags>
		<position public="1" get="accessor" set="accessor">
			<t path="luxe.Vector"/>
			<haxe_doc>The position of this shape</haxe_doc>
		</position>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The x position of this shape</haxe_doc>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The y position of this shape</haxe_doc>
		</y>
		<rotation public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The rotation of this shape, in degrees</haxe_doc>
		</rotation>
		<scaleX public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The scale in the x direction of this shape</haxe_doc>
		</scaleX>
		<scaleY public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<haxe_doc>The scale in the y direction of this shape</haxe_doc>
		</scaleY>
		<transformedVertices public="1" get="accessor" set="null">
			<c path="Array"><t path="luxe.Vector"/></c>
			<haxe_doc>The transformed (rotated/scale) vertices cache</haxe_doc>
		</transformedVertices>
		<vertices public="1" get="accessor" set="null">
			<c path="Array"><t path="luxe.Vector"/></c>
			<haxe_doc>The vertices of this shape</haxe_doc>
		</vertices>
		<_position><t path="luxe.Vector"/></_position>
		<_rotation><x path="Float"/></_rotation>
		<_rotation_radians><x path="Float"/></_rotation_radians>
		<_rotation_quat><t path="luxe.Quaternion"/></_rotation_quat>
		<_scale><t path="luxe.Vector"/></_scale>
		<_scaleX><x path="Float"/></_scaleX>
		<_scaleY><x path="Float"/></_scaleY>
		<_transformed><x path="Bool"/></_transformed>
		<_transformMatrix><t path="luxe.Matrix"/></_transformMatrix>
		<_transformedVertices><c path="Array"><t path="luxe.Vector"/></c></_transformedVertices>
		<_vertices><c path="Array"><t path="luxe.Vector"/></c></_vertices>
		<destroy public="1" set="method" line="78">
			<f a=""><x path="Void"/></f>
			<haxe_doc>clean up and destroy this shape</haxe_doc>
		</destroy>
		<refresh_transform set="method" line="91"><f a=""><x path="Void"/></f></refresh_transform>
		<get_position set="method" line="102"><f a=""><t path="luxe.Vector"/></f></get_position>
		<set_position set="method" line="106"><f a="v">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_position>
		<get_x set="method" line="114"><f a=""><x path="Float"/></f></get_x>
		<set_x set="method" line="118"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<get_y set="method" line="126"><f a=""><x path="Float"/></f></get_y>
		<set_y set="method" line="130"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_rotation set="method" line="138"><f a=""><x path="Float"/></f></get_rotation>
		<set_rotation set="method" line="142"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_rotation>
		<get_scaleX set="method" line="154"><f a=""><x path="Float"/></f></get_scaleX>
		<set_scaleX set="method" line="158"><f a="scale">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleX>
		<get_scaleY set="method" line="167"><f a=""><x path="Float"/></f></get_scaleY>
		<set_scaleY set="method" line="171"><f a="scale">
	<x path="Float"/>
	<x path="Float"/>
</f></set_scaleY>
		<get_transformedVertices set="method" line="180"><f a=""><c path="Array"><t path="luxe.Vector"/></c></f></get_transformedVertices>
		<get_vertices set="method" line="198"><f a=""><c path="Array"><t path="luxe.Vector"/></c></f></get_vertices>
		<new public="1" set="method" line="57">
			<f a="_x:_y">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new shape at give position x,y</haxe_doc>
		</new>
		<haxe_doc>A base collision class shape</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.collision.shapes.Circle" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/shapes/Circle.hx">
		<extends path="luxe.collision.shapes.Shape"/>
		<radius public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The radius of this circle. Set on construction</haxe_doc>
		</radius>
		<transformedRadius public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The transformed radius of this circle, based on the scale/rotation</haxe_doc>
		</transformedRadius>
		<_radius><x path="Float"/></_radius>
		<get_radius set="method" line="25"><f a=""><x path="Float"/></f></get_radius>
		<get_transformedRadius set="method" line="31"><f a=""><x path="Float"/></f></get_transformedRadius>
		<new public="1" set="method" line="15"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A circle collision shape</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.collision.shapes.Polygon" params="" file="/Users/sven/dev/luxe/luxe/luxe/collision/shapes/Polygon.hx">
		<extends path="luxe.collision.shapes.Shape"/>
		<create public="1" set="method" line="35" static="1">
			<f a="x:y:sides:?radius" v=":::100">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<c path="luxe.collision.shapes.Polygon"/>
			</f>
			<haxe_doc>Helper to create an Ngon at x,y with given number of sides, and radius.
            A default radius of 100 if unspecified. Returns a ready made `Polygon` collision `Shape`</haxe_doc>
		</create>
		<rectangle public="1" set="method" line="60" static="1">
			<f a="x:y:width:height:?centered" v="::::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="luxe.collision.shapes.Polygon"/>
			</f>
			<haxe_doc>Helper generate a rectangle at x,y with a given width/height and centered state.
            Centered by default. Returns a ready made `Polygon` collision `Shape`</haxe_doc>
		</rectangle>
		<square public="1" set="method" line="86" static="1">
			<f a="x:y:width:?centered" v=":::true">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="luxe.collision.shapes.Polygon"/>
			</f>
			<haxe_doc>Helper generate a square at x,y with a given width/height with given centered state.
            Centered by default. Returns a ready made `Polygon` collision `Shape`</haxe_doc>
		</square>
		<triangle public="1" set="method" line="92" static="1">
			<f a="x:y:radius">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="luxe.collision.shapes.Polygon"/>
			</f>
			<haxe_doc>Helper generate a triangle at x,y with a given radius. 
            Returns a ready made `Polygon` collision `Shape`</haxe_doc>
		</triangle>
		<destroy public="1" set="method" line="21" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy this polygon and clean up.</haxe_doc>
		</destroy>
		<new public="1" set="method" line="10">
			<f a="x:y:vertices">
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><t path="luxe.Vector"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new polygon with a given set of vertices at position x,y.</haxe_doc>
		</new>
		<haxe_doc>A polygon collision shape</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.components.Components" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/Components.hx">
		<components public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.Component"/>
</x></components>
		<entity public="1"><c path="luxe.Entity"/></entity>
		<add public="1" params="T" set="method" line="23"><f a="_component">
	<c path="add.T"/>
	<c path="add.T"/>
</f></add>
		<remove public="1" set="method" line="55"><f a="_name">
	<c path="String"/>
	<x path="Bool"/>
</f></remove>
		<get public="1" params="T" set="method" line="75"><f a="_name:?in_children" v=":false">
	<c path="String"/>
	<x path="Bool"/>
	<c path="get.T"/>
</f></get>
		<get_any public="1" params="T" set="method" line="114"><f a="_name:?in_children:?first_only" v=":false:true">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="Array"><c path="get_any.T"/></c>
</f></get_any>
		<has public="1" set="method" line="163"><f a="_name">
	<c path="String"/>
	<x path="Bool"/>
</f></has>
		<new public="1" set="method" line="16"><f a="_entity">
	<c path="luxe.Entity"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.components.cameras.FlyCamera" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/cameras/FlyCamera.hx">
		<extends path="luxe.Camera"/>
		<halfPI line="41" static="1"><x path="Float"/></halfPI>
		<twoPI line="42" static="1"><x path="Float"/></twoPI>
		<move_forward public="1"><x path="Bool"/></move_forward>
		<move_back public="1"><x path="Bool"/></move_back>
		<move_left public="1"><x path="Bool"/></move_left>
		<move_right public="1"><x path="Bool"/></move_right>
		<move_speed public="1"><x path="Float"/></move_speed>
		<move_speed_scale public="1"><x path="Float"/></move_speed_scale>
		<sensitivity_x public="1"><x path="Float"/></sensitivity_x>
		<sensitivity_y public="1"><x path="Float"/></sensitivity_y>
		<newpos><t path="luxe.Vector"/></newpos>
		<mouse_delta><t path="luxe.Vector"/></mouse_delta>
		<forward public="1"><t path="luxe.Vector"/></forward>
		<right public="1"><t path="luxe.Vector"/></right>
		<up public="1"><t path="luxe.Vector"/></up>
		<yaw><x path="Float"/></yaw>
		<pitch><x path="Float"/></pitch>
		<pitch_rotation_matrix><c path="phoenix.Matrix"/></pitch_rotation_matrix>
		<yaw_rotation_matrix><c path="phoenix.Matrix"/></yaw_rotation_matrix>
		<ready><x path="Bool"/></ready>
		<reset public="1" set="method" line="61"><f a=""><x path="Void"/></f></reset>
		<update public="1" set="method" line="67" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<move_look set="method" line="146"><f a="xDelta:yDelta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></move_look>
		<onmouseup public="1" set="method" line="170" override="1"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmouseup>
		<enable public="1" set="method" line="185"><f a=""><x path="Void"/></f></enable>
		<onmousemove public="1" set="method" line="193" override="1"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousemove>
		<onkeydown public="1" set="method" line="204" override="1"><f a="e">
	<a>
		<scancode set="null"><x path="Int"/></scancode>
		<keycode set="null"><x path="Int"/></keycode>
	</a>
	<x path="Void"/>
</f></onkeydown>
		<onkeyup public="1" set="method" line="230" override="1"><f a="e">
	<a><keycode set="null"><x path="Int"/></keycode></a>
	<x path="Void"/>
</f></onkeyup>
		<init public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></init>
		<ondestroy public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<new public="1" set="method" line="44"><f a="_options">
	<t path="luxe.options.LuxeCameraOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.components.render.MeshComponent" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/render/MeshComponent.hx">
		<extends path="luxe.Component"/>
		<mesh public="1"><c path="luxe.Mesh"/></mesh>
		<options public="1"><t path="luxe.options.MeshOptions"/></options>
		<init public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></init>
		<entity_pos_change public="1" set="method" line="43" override="1"><f a="_pos">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></entity_pos_change>
		<entity_rotation_change public="1" set="method" line="51" override="1"><f a="_rotation">
	<t path="luxe.Quaternion"/>
	<x path="Void"/>
</f></entity_rotation_change>
		<entity_scale_change public="1" set="method" line="59" override="1"><f a="_scale">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></entity_scale_change>
		<update public="1" set="method" line="66" override="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<ondestroy public="1" set="method" line="70" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<onremoved public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></onremoved>
		<new public="1" set="method" line="13"><f a="_options">
	<t path="luxe.options.MeshOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="luxe.components.sprite.SpriteAnimationEventData" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx" module="luxe.components.sprite.SpriteAnimation"><a>
	<image_frame><x path="Int"/></image_frame>
	<frame_event><t path="luxe.components.sprite.SpriteAnimationFrameEvent"/></frame_event>
	<frame><t path="luxe.components.sprite.SpriteAnimationFrame"/></frame>
	<event><c path="String"/></event>
	<animation><c path="String"/></animation>
</a></typedef>
	<typedef path="luxe.components.sprite.SpriteAnimationFrameEvent" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx" module="luxe.components.sprite.SpriteAnimation"><a>
	<frame><x path="Int"/></frame>
	<event><c path="String"/></event>
</a></typedef>
	<typedef path="luxe.components.sprite.SpriteAnimationFrameSource" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx" module="luxe.components.sprite.SpriteAnimation"><a>
	<source><t path="luxe.Rectangle"/></source>
	<size><t path="luxe.Vector"/></size>
	<pos><t path="luxe.Vector"/></pos>
	<frame><x path="Int"/></frame>
</a></typedef>
	<typedef path="luxe.components.sprite.SpriteAnimationFrame" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx" module="luxe.components.sprite.SpriteAnimation"><a>
	<image_source>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
	</image_source>
	<image_frame><x path="Int"/></image_frame>
	<frame_source><t path="luxe.Rectangle"/></frame_source>
	<frame_size><t path="luxe.Vector"/></frame_size>
	<frame_pos><t path="luxe.Vector"/></frame_pos>
	<events><c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameEvent"/></c></events>
</a></typedef>
	<enum path="luxe.components.sprite.SpriteAnimationType" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx" module="luxe.components.sprite.SpriteAnimation">
		<animated_texture/>
		<animated_uv/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.components.sprite.SpriteAnimationData" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx" module="luxe.components.sprite.SpriteAnimation">
		<frame_range_regex public="1" line="50" static="1"><c path="EReg"/></frame_range_regex>
		<frame_hold_regex public="1" line="51" static="1"><c path="EReg"/></frame_hold_regex>
		<frame_hold_prev_regex public="1" line="52" static="1"><c path="EReg"/></frame_hold_prev_regex>
		<frame_regex public="1" line="53" static="1"><c path="EReg"/></frame_regex>
		<name public="1"><c path="String"/></name>
		<type public="1"><e path="luxe.components.sprite.SpriteAnimationType"/></type>
		<filter_type public="1"><e path="phoenix.FilterType"/></filter_type>
		<frameset public="1"><c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrame"/></c></frameset>
		<image_set_list public="1"><c path="Array"><c path="String"/></c></image_set_list>
		<image_set public="1"><c path="Array"><c path="phoenix.Texture"/></c></image_set>
		<frame_size public="1"><t path="luxe.Vector"/></frame_size>
		<frame_sources public="1"><c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameSource"/></c></frame_sources>
		<frame_time public="1"><x path="Float"/></frame_time>
		<loop public="1"><x path="Bool"/></loop>
		<pingpong public="1"><x path="Bool"/></pingpong>
		<reverse public="1"><x path="Bool"/></reverse>
		<sprite><c path="luxe.Sprite"/></sprite>
		<frame_count public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</frame_count>
		<get_frame_count set="method" line="71"><f a=""><x path="Int"/></f></get_frame_count>
		<on_image_sequence_loaded set="method" line="83"><f a="_textures">
	<c path="Array"><c path="phoenix.Texture"/></c>
	<x path="Void"/>
</f></on_image_sequence_loaded>
		<from_json public="1" set="method" line="99"><f a="_animdata">
	<d/>
	<c path="luxe.components.sprite.SpriteAnimationData"/>
</f></from_json>
		<parse_event_for_frame set="method" line="229"><f a="_events:_frame">
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameEvent"/></c>
	<x path="Int"/>
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameEvent"/></c>
</f></parse_event_for_frame>
		<parse_source_size_for_frame set="method" line="245"><f a="_sources:_frame">
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameSource"/></c>
	<x path="Int"/>
	<t path="luxe.Vector"/>
</f></parse_source_size_for_frame>
		<parse_source_pos_for_frame set="method" line="259"><f a="_sources:_frame">
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameSource"/></c>
	<x path="Int"/>
	<t path="luxe.Vector"/>
</f></parse_source_pos_for_frame>
		<parse_source_for_frame set="method" line="273"><f a="_sources:_frame">
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameSource"/></c>
	<x path="Int"/>
	<t path="luxe.Rectangle"/>
</f></parse_source_for_frame>
		<parse_frame_sources_set set="method" line="324"><f a="_sources">
	<c path="Array"><d/></c>
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameSource"/></c>
</f></parse_frame_sources_set>
		<parse_event_set set="method" line="377"><f a="_events">
	<c path="Array"><d/></c>
	<c path="Array"><t path="luxe.components.sprite.SpriteAnimationFrameEvent"/></c>
</f></parse_event_set>
		<parse_frameset_range set="method" line="400"><f a="_frameset:regex:_frame">
	<c path="Array"><x path="Int"/></c>
	<c path="EReg"/>
	<c path="String"/>
	<x path="Void"/>
</f></parse_frameset_range>
		<parse_frameset_hold set="method" line="426"><f a="_frameset:regex:_frame">
	<c path="Array"><x path="Int"/></c>
	<c path="EReg"/>
	<c path="String"/>
	<x path="Void"/>
</f></parse_frameset_hold>
		<parse_frameset_prev_hold set="method" line="437"><f a="_frameset:regex:_frame">
	<c path="Array"><x path="Int"/></c>
	<c path="EReg"/>
	<c path="String"/>
	<x path="Void"/>
</f></parse_frameset_prev_hold>
		<parse_frameset_frame set="method" line="452"><f a="_frameset:regex:_frame">
	<c path="Array"><x path="Int"/></c>
	<c path="EReg"/>
	<c path="String"/>
	<x path="Void"/>
</f></parse_frameset_frame>
		<parse_frameset set="method" line="460"><f a="_json_frameset">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><x path="Int"/></c>
</f></parse_frameset>
		<new public="1" set="method" line="75"><f a="_sprite:?_name" v=":'anim'">
	<c path="luxe.Sprite"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.components.sprite.SpriteAnimation" params="" file="/Users/sven/dev/luxe/luxe/luxe/components/sprite/SpriteAnimation.hx">
		<extends path="luxe.Component"/>
		<sprite><c path="luxe.Sprite"/></sprite>
		<animation_list public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.components.sprite.SpriteAnimationData"/>
</x></animation_list>
		<current public="1"><c path="luxe.components.sprite.SpriteAnimationData"/></current>
		<current_frame public="1"><t path="luxe.components.sprite.SpriteAnimationFrame"/></current_frame>
		<animation public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</animation>
		<speed public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</speed>
		<frame public="1"><x path="Int"/></frame>
		<image_frame public="1"><x path="Int"/></image_frame>
		<time><x path="Float"/></time>
		<frame_time public="1"><x path="Float"/></frame_time>
		<next_frame_time public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</next_frame_time>
		<loop public="1"><x path="Bool"/></loop>
		<pingpong public="1"><x path="Bool"/></pingpong>
		<reverse public="1"><x path="Bool"/></reverse>
		<playing public="1"><x path="Bool"/></playing>
		<uv_cache><t path="luxe.Rectangle"/></uv_cache>
		<init public="1" set="method" line="520" override="1"><f a=""><x path="Void"/></f></init>
		<add_from_json_object public="1" set="method" line="539"><f a="_json_object">
	<d/>
	<x path="Void"/>
</f></add_from_json_object>
		<add_from_json public="1" set="method" line="562"><f a="_json_string">
	<c path="String"/>
	<x path="Void"/>
</f></add_from_json>
		<remove_event public="1" set="method" line="572"><f a="_animation:_image_frame:?_event" v="::''">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></remove_event>
		<remove_events public="1" set="method" line="594"><f a="_animation:_image_frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></remove_events>
		<add_event public="1" set="method" line="610"><f a="_animation:_image_frame:?_event" v="::''">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></add_event>
		<get_speed set="method" line="649"><f a=""><x path="Float"/></f></get_speed>
		<set_speed set="method" line="653"><f a="_speed">
	<x path="Float"/>
	<x path="Float"/>
</f></set_speed>
		<get_animation set="method" line="661"><f a=""><c path="String"/></f></get_animation>
		<set_animation set="method" line="665"><f a="_name">
	<c path="String"/>
	<c path="String"/>
</f></set_animation>
		<restart public="1" set="method" line="686"><f a=""><x path="Void"/></f></restart>
		<play public="1" set="method" line="691"><f a=""><x path="Void"/></f></play>
		<stop public="1" set="method" line="695"><f a=""><x path="Void"/></f></stop>
		<set_frame public="1" set="method" line="699"><f a="_frame">
	<x path="Int"/>
	<x path="Void"/>
</f></set_frame>
		<refresh_sprite set="method" line="746"><f a=""><x path="Void"/></f></refresh_sprite>
		<update public="1" set="method" line="787" override="1">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</update>
		<ondestroy public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></ondestroy>
		<onremoved public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></onremoved>
		<new public="1" set="method" line="492"><f a="?_options">
	<t path="luxe.options.ComponentOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="luxe.debug.DebugView" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/DebugView.hx">
		<extends path="luxe.Objects"/>
		<visible public="1"><x path="Bool"/></visible>
		<refresh public="1" set="method" line="14"><f a=""><x path="Void"/></f></refresh>
		<process public="1" set="method" line="17"><f a=""><x path="Void"/></f></process>
		<onmousedown public="1" set="method" line="20"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousedown>
		<onmousewheel public="1" set="method" line="23"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousewheel>
		<onmouseup public="1" set="method" line="26"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmouseup>
		<onmousemove public="1" set="method" line="29"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousemove>
		<onkeydown public="1" set="method" line="32"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></onkeydown>
		<onkeyup public="1" set="method" line="35"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></onkeyup>
		<create public="1" set="method" line="38"><f a=""><x path="Void"/></f></create>
		<show public="1" set="method" line="41"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="44"><f a=""><x path="Void"/></f></hide>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.debug.BatcherDebugView" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/BatcherDebugView.hx">
		<extends path="luxe.debug.DebugView"/>
		<batcher><c path="phoenix.Batcher"/></batcher>
		<create public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></create>
		<refresh public="1" set="method" line="30" override="1"><f a=""><x path="Void"/></f></refresh>
		<dragging><x path="Bool"/></dragging>
		<dragstart><t path="luxe.Vector"/></dragstart>
		<dragmstart><t path="luxe.Vector"/></dragmstart>
		<onmousedown public="1" set="method" line="39" override="1"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousedown>
		<onmouseup public="1" set="method" line="44" override="1"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmouseup>
		<onmousemove public="1" set="method" line="47" override="1"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousemove>
		<onmousewheel public="1" set="method" line="54" override="1"><f a="e">
	<t path="luxe.MouseEvent"/>
	<x path="Void"/>
</f></onmousewheel>
		<_tree_geom><c path="phoenix.geometry.CompositeGeometry"/></_tree_geom>
		<as_immediate><x path="Bool"/></as_immediate>
		<clear_batcher_tree public="1" set="method" line="65"><f a=""><x path="Void"/></f></clear_batcher_tree>
		<keystr set="method" line="72"><f a="key:key2">
	<c path="phoenix.geometry.GeometryKey"/>
	<c path="phoenix.geometry.GeometryKey"/>
	<c path="String"/>
</f></keystr>
		<draw_geom_node public="1" set="method" line="85"><f a="l:_leaf:_p:?_bbw" v=":::20">
	<x path="Bool"/>
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<t path="luxe.Vector"/>
	<x path="Float"/>
	<x path="Void"/>
</f></draw_geom_node>
		<draw_geom_leaf public="1" set="method" line="175"><f a="L:_leaf:_p">
	<x path="Bool"/>
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></draw_geom_leaf>
		<draw_batcher_tree public="1" set="method" line="238"><f a=""><x path="Void"/></f></draw_batcher_tree>
		<process public="1" set="method" line="256" override="1"><f a=""><x path="Void"/></f></process>
		<show public="1" set="method" line="264" override="1"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="269" override="1"><f a=""><x path="Void"/></f></hide>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.debug.DebugInspectorOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/Inspector.hx" module="luxe.debug.Inspector"><a>
	<title>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</title>
	<size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</size>
	<pos>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</pos>
	<font>
		<c path="phoenix.BitmapFont"/>
		<meta><m n=":optional"/></meta>
	</font>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
	</batcher>
</a></typedef>
	<class path="luxe.debug.Inspector" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/Inspector.hx">
		<title public="1"><c path="String"/></title>
		<font public="1"><c path="phoenix.BitmapFont"/></font>
		<pos public="1"><t path="luxe.Vector"/></pos>
		<size public="1" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</size>
		<_title_text public="1"><c path="luxe.Text"/></_title_text>
		<_version_text public="1"><c path="luxe.Text"/></_version_text>
		<uitexture public="1"><c path="phoenix.Texture"/></uitexture>
		<uibutton public="1"><c path="phoenix.Texture"/></uibutton>
		<_window public="1"><c path="luxe.NineSlice"/></_window>
		<onrefresh public="1"><f a=""><x path="Void"/></f></onrefresh>
		<_batcher><c path="phoenix.Batcher"/></_batcher>
		<refresh public="1" set="method" line="62"><f a=""><x path="Void"/></f></refresh>
		<show public="1" set="method" line="72"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="78"><f a=""><x path="Void"/></f></hide>
		<set_size set="method" line="84"><f a="_size">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_size>
		<_create_window set="method" line="93"><f a=""><x path="Void"/></f></_create_window>
		<new public="1" set="method" line="36"><f a="_options">
	<t path="luxe.debug.DebugInspectorOptions"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.debug.ProfilerDebugView" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/ProfilerDebugView.hx">
		<extends path="luxe.debug.DebugView"/>
		<lists public="1" static="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.debug._ProfilerDebugView.ProfilerValue"/>
</x></lists>
		<add_offset public="1" set="method" line="26" static="1"><f a="_id:_offset">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></add_offset>
		<hide_item public="1" set="method" line="37" static="1"><f a="_id">
	<c path="String"/>
	<x path="Void"/>
</f></hide_item>
		<show_item public="1" set="method" line="44" static="1"><f a="_id">
	<c path="String"/>
	<x path="Void"/>
</f></show_item>
		<start public="1" set="method" line="52" static="1"><f a="_id:?_max" v=":0.0f">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></start>
		<end public="1" set="method" line="64" static="1"><f a="_id">
	<c path="String"/>
	<x path="Void"/>
</f></end>
		<_setup><x path="Bool"/></_setup>
		<show public="1" set="method" line="73" override="1"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="88" override="1"><f a=""><x path="Void"/></f></hide>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.debug._ProfilerDebugView.ProfilerValue" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/ProfilerDebugView.hx" private="1" module="luxe.debug.ProfilerDebugView">
		<offsets public="1"><c path="Array"><c path="luxe.debug._ProfilerDebugView.ProfilerValue"/></c></offsets>
		<bar public="1"><c path="luxe.debug._ProfilerDebugView.ProfilerBar"/></bar>
		<name public="1"><c path="String"/></name>
		<start public="1"><x path="Float"/></start>
		<history public="1"><c path="Array"><x path="Float"/></c></history>
		<avg public="1"><x path="Int"/></avg>
		<hidden public="1"><x path="Bool"/></hidden>
		<count><x path="Int"/></count>
		<accum><x path="Float"/></accum>
		<set public="1" set="method" line="114"><f a=""><x path="Void"/></f></set>
		<new public="1" set="method" line="108"><f a="_name:_bar">
	<c path="String"/>
	<c path="luxe.debug._ProfilerDebugView.ProfilerBar"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.debug._ProfilerDebugView.ProfilerBar" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/ProfilerDebugView.hx" private="1" module="luxe.debug.ProfilerDebugView">
		<bar_geometry public="1"><c path="phoenix.geometry.QuadGeometry"/></bar_geometry>
		<bg_geometry public="1"><c path="phoenix.geometry.QuadGeometry"/></bg_geometry>
		<graphbg_geometry public="1"><c path="phoenix.geometry.QuadGeometry"/></graphbg_geometry>
		<graph_geometry public="1"><c path="phoenix.geometry.Geometry"/></graph_geometry>
		<text_item public="1"><c path="luxe.Text"/></text_item>
		<name public="1"><c path="String"/></name>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<height2 public="1"><x path="Float"/></height2>
		<max public="1"><x path="Float"/></max>
		<history public="1"><x path="Int"/></history>
		<visible public="1"><x path="Bool"/></visible>
		<segment><x path="Float"/></segment>
		<color_red><t path="luxe.Color"/></color_red>
		<color_green><t path="luxe.Color"/></color_green>
		<color_normal><t path="luxe.Color"/></color_normal>
		<text public="1" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</text>
		<pos public="1" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</pos>
		<value public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</value>
		<ping public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</ping>
		<hide public="1" set="method" line="238"><f a=""><x path="Void"/></f></hide>
		<show public="1" set="method" line="246"><f a=""><x path="Void"/></f></show>
		<set_ping set="method" line="255"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_ping>
		<set_value set="method" line="291"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_value>
		<set_pos set="method" line="315"><f a="_p">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_pos>
		<set_text set="method" line="324"><f a="_t">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<new public="1" set="method" line="177"><f a="_name:?_max:_color" v=":0.0f:">
	<c path="String"/>
	<x path="Float"/>
	<t path="luxe.Color"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.debug.RenderStats" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/StatsDebugView.hx" module="luxe.debug.StatsDebugView"><a>
	<visible_count><x path="Int"/></visible_count>
	<vert_count><x path="Int"/></vert_count>
	<static_batched_count><x path="Int"/></static_batched_count>
	<group_count><x path="Int"/></group_count>
	<geometry_count><x path="Int"/></geometry_count>
	<dynamic_batched_count><x path="Int"/></dynamic_batched_count>
	<draw_calls><x path="Int"/></draw_calls>
	<batchers><x path="Int"/></batchers>
</a></typedef>
	<class path="luxe.debug.StatsDebugView" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/StatsDebugView.hx">
		<extends path="luxe.debug.DebugView"/>
		<_last_render_stats public="1"><t path="luxe.debug.RenderStats"/></_last_render_stats>
		<_render_stats public="1"><t path="luxe.debug.RenderStats"/></_render_stats>
		<debug_draw_call_count public="1"><x path="Int"/></debug_draw_call_count>
		<debug_geometry_count public="1"><x path="Int"/></debug_geometry_count>
		<font_size public="1"><x path="Int"/></font_size>
		<render_stats_text public="1"><c path="luxe.Text"/></render_stats_text>
		<resource_stats_text public="1"><c path="luxe.Text"/></resource_stats_text>
		<resource_list_text public="1"><c path="luxe.Text"/></resource_list_text>
		<get_resource_stats_string public="1" set="method" line="62"><f a=""><c path="String"/></f></get_resource_stats_string>
		<get_render_stats_string public="1" set="method" line="66"><f a=""><c path="String"/></f></get_render_stats_string>
		<create public="1" set="method" line="78" override="1"><f a=""><x path="Void"/></f></create>
		<refresh public="1" set="method" line="124" override="1"><f a=""><x path="Void"/></f></refresh>
		<process public="1" set="method" line="158" override="1"><f a=""><x path="Void"/></f></process>
		<onkeydown public="1" set="method" line="190" override="1"><f a="e">
	<t path="luxe.KeyEvent"/>
	<x path="Void"/>
</f></onkeydown>
		<show public="1" set="method" line="196" override="1"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="204" override="1"><f a=""><x path="Void"/></f></hide>
		<refresh_render_stats public="1" set="method" line="211"><f a=""><x path="Void"/></f></refresh_render_stats>
		<hide_debug public="1"><x path="Bool"/></hide_debug>
		<toggle_debug_stats public="1" set="method" line="231"><f a=""><x path="Void"/></f></toggle_debug_stats>
		<update_render_stats public="1" set="method" line="235"><f a=""><x path="Void"/></f></update_render_stats>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.debug.TraceDebugView" params="" file="/Users/sven/dev/luxe/luxe/luxe/debug/TraceDebugView.hx">
		<extends path="luxe.debug.DebugView"/>
		<logged public="1"><c path="Array"><c path="String"/></c></logged>
		<lines public="1"><c path="luxe.Text"/></lines>
		<max_lines public="1"><x path="Int"/></max_lines>
		<on_trace public="1" set="method" line="24"><f a="v:?inf" v=":null">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></on_trace>
		<create public="1" set="method" line="28" override="1"><f a=""><x path="Void"/></f></create>
		<add_line public="1" set="method" line="52"><f a="_t">
	<c path="String"/>
	<x path="Void"/>
</f></add_line>
		<_last_logged_length><x path="Int"/></_last_logged_length>
		<refresh_lines set="method" line="71"><f a=""><x path="Void"/></f></refresh_lines>
		<refresh public="1" set="method" line="107" override="1"><f a=""><x path="Void"/></f></refresh>
		<process public="1" set="method" line="111" override="1"><f a=""><x path="Void"/></f></process>
		<show public="1" set="method" line="115" override="1"><f a=""><x path="Void"/></f></show>
		<hide public="1" set="method" line="121" override="1"><f a=""><x path="Void"/></f></hide>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.importers.obj.Data" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/obj/Data.hx"><a><vertices><c path="Array"><t path="luxe.importers.obj.Vertex"/></c></vertices></a></typedef>
	<typedef path="luxe.importers.obj.Vertex" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/obj/Data.hx" module="luxe.importers.obj.Data"><a>
	<uv><t path="luxe.importers.obj.UV"/></uv>
	<pos><t path="luxe.importers.obj.Vector"/></pos>
	<normal><t path="luxe.importers.obj.Normal"/></normal>
</a></typedef>
	<typedef path="luxe.importers.obj.Normal" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/obj/Data.hx" module="luxe.importers.obj.Data"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
</a></typedef>
	<typedef path="luxe.importers.obj.Vector" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/obj/Data.hx" module="luxe.importers.obj.Data"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
</a></typedef>
	<typedef path="luxe.importers.obj.UV" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/obj/Data.hx" module="luxe.importers.obj.Data"><a>
	<v><x path="Float"/></v>
	<u><x path="Float"/></u>
</a></typedef>
	<class path="luxe.importers.obj.Reader" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/obj/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<vertexIndices><c path="Array"><x path="Int"/></c></vertexIndices>
		<uvIndices><c path="Array"><x path="Int"/></c></uvIndices>
		<normalIndices><c path="Array"><x path="Int"/></c></normalIndices>
		<read public="1" set="method" line="17"><f a=""><t path="luxe.importers.obj.Data"/></f></read>
		<parse set="method" line="27"><f a="lines">
	<c path="Array"><c path="String"/></c>
	<t path="luxe.importers.obj.Data"/>
</f></parse>
		<parse_vert set="method" line="88"><f a="line">
	<c path="String"/>
	<t path="luxe.importers.obj.Vector"/>
</f></parse_vert>
		<parse_uv set="method" line="112"><f a="line">
	<c path="String"/>
	<t path="luxe.importers.obj.UV"/>
</f></parse_uv>
		<parse_normal set="method" line="133"><f a="line">
	<c path="String"/>
	<t path="luxe.importers.obj.Normal"/>
</f></parse_normal>
		<parse_face set="method" line="157"><f a="line">
	<c path="String"/>
	<x path="Void"/>
</f></parse_face>
		<new public="1" set="method" line="12"><f a="input">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.importers.texturepacker.TexturePackerSize" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerData.hx" module="luxe.importers.texturepacker.TexturePackerData"><a>
	<w><x path="Float"/></w>
	<h><x path="Float"/></h>
</a></typedef>
	<typedef path="luxe.importers.texturepacker.TexturePackerRect" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerData.hx" module="luxe.importers.texturepacker.TexturePackerData"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<h><x path="Float"/></h>
</a></typedef>
	<typedef path="luxe.importers.texturepacker.TexturePackerMeta" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerData.hx" module="luxe.importers.texturepacker.TexturePackerData"><a>
	<version>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</version>
	<size>
		<t path="luxe.importers.texturepacker.TexturePackerSize"/>
		<meta><m n=":optional"/></meta>
	</size>
	<scale>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</scale>
	<image>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</image>
	<format>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</format>
	<app>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</app>
</a></typedef>
	<typedef path="luxe.importers.texturepacker.TexturePackerFrame" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerData.hx" module="luxe.importers.texturepacker.TexturePackerData"><a>
	<uv><t path="luxe.Rectangle"/></uv>
	<trimmed>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</trimmed>
	<spriteSourceSize><t path="luxe.importers.texturepacker.TexturePackerRect"/></spriteSourceSize>
	<sourceSize><t path="luxe.importers.texturepacker.TexturePackerSize"/></sourceSize>
	<size><t path="luxe.Vector"/></size>
	<rotated>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</rotated>
	<origin><t path="luxe.Vector"/></origin>
	<frame><t path="luxe.importers.texturepacker.TexturePackerRect"/></frame>
	<filename>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</filename>
</a></typedef>
	<class path="luxe.importers.texturepacker.TexturePackerData" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerData.hx">
		<meta public="1"><t path="luxe.importers.texturepacker.TexturePackerMeta"/></meta>
		<frames public="1"><c path="Array"><t path="luxe.importers.texturepacker.TexturePackerFrame"/></c></frames>
		<frame_map public="1"><x path="Map">
	<c path="String"/>
	<t path="luxe.importers.texturepacker.TexturePackerFrame"/>
</x></frame_map>
		<frame public="1" set="method" line="48"><f a="name">
	<c path="String"/>
	<t path="Null"><t path="luxe.importers.texturepacker.TexturePackerFrame"/></t>
</f></frame>
		<new public="1" set="method" line="36"><f a="_meta:_frames">
	<t path="luxe.importers.texturepacker.TexturePackerMeta"/>
	<c path="Array"><t path="luxe.importers.texturepacker.TexturePackerFrame"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="luxe.importers.texturepacker.TexturePackerJSONType" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerJSON.hx" module="luxe.importers.texturepacker.TexturePackerJSON">
		<hash/>
		<array/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.importers.texturepacker.TexturePackerJSON" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerJSON.hx">
		<parse public="1" set="method" line="12" static="1"><f a="json:?json_type" v=":null">
	<d/>
	<e path="luxe.importers.texturepacker.TexturePackerJSONType"/>
	<c path="luxe.importers.texturepacker.TexturePackerData"/>
</f></parse>
		<parse_frame set="method" line="66" static="1"><f a="name:json">
	<c path="String"/>
	<d/>
	<a>
		<uv><t path="luxe.Rectangle"/></uv>
		<trimmed><x path="Bool"/></trimmed>
		<spriteSourceSize><t path="luxe.importers.texturepacker.TexturePackerRect"/></spriteSourceSize>
		<sourceSize><t path="luxe.importers.texturepacker.TexturePackerSize"/></sourceSize>
		<size><t path="luxe.Vector"/></size>
		<rotated><x path="Bool"/></rotated>
		<origin><t path="luxe.Vector"/></origin>
		<frame><t path="luxe.importers.texturepacker.TexturePackerRect"/></frame>
		<filename><c path="String"/></filename>
	</a>
</f></parse_frame>
		<parse_frames_hash set="method" line="91" static="1"><f a="json">
	<d/>
	<c path="Array"><t path="luxe.importers.texturepacker.TexturePackerFrame"/></c>
</f></parse_frames_hash>
		<parse_frames_array set="method" line="110" static="1"><f a="json">
	<d/>
	<c path="Array"><t path="luxe.importers.texturepacker.TexturePackerFrame"/></c>
</f></parse_frames_array>
		<parse_meta set="method" line="129" static="1"><f a="json">
	<d/>
	<t path="luxe.importers.texturepacker.TexturePackerMeta"/>
</f></parse_meta>
		<parse_rect set="method" line="151" static="1"><f a="json">
	<d/>
	<t path="luxe.importers.texturepacker.TexturePackerRect"/>
</f></parse_rect>
		<parse_size set="method" line="164" static="1"><f a="json">
	<d/>
	<t path="luxe.importers.texturepacker.TexturePackerSize"/>
</f></parse_size>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.texturepacker.TexturePackerSpriteAnimation" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/texturepacker/TexturePackerSpriteAnimation.hx">
		<parse public="1" set="method" line="19" static="1"><f a="data:?anim_name" v=":'anim'">
	<c path="luxe.importers.texturepacker.TexturePackerData"/>
	<c path="String"/>
	<d/>
</f></parse>
		<parse_by_sequence public="1" set="method" line="63" static="1">
			<f a="data:name">
				<c path="luxe.importers.texturepacker.TexturePackerData"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</parse_by_sequence>
		<parse_by_sequences public="1" set="method" line="115" static="1"><f a="data:names">
	<c path="luxe.importers.texturepacker.TexturePackerData"/>
	<c path="Array"><c path="String"/></c>
	<d/>
</f></parse_by_sequences>
		<parse_source set="method" line="135" static="1"><f a="_frame">
	<t path="luxe.importers.texturepacker.TexturePackerFrame"/>
	<d/>
</f></parse_source>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledLayer" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledLayer.hx">
		<tiled_base64_to_IntArray set="method" line="172" static="1"><f a="base64_data:lineWidth:compression">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></tiled_base64_to_IntArray>
		<BASE64_CHARS get="inline" set="null" line="218" static="1"><c path="String"/></BASE64_CHARS>
		<tiled_base64_to_ByteArray set="method" line="219" static="1"><f a="data">
	<c path="String"/>
	<t path="snow.utils.ByteArray"/>
</f></tiled_base64_to_ByteArray>
		<opacity public="1"><x path="Float"/></opacity>
		<visible public="1"><x path="Bool"/></visible>
		<name public="1"><c path="String"/></name>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<map public="1"><c path="luxe.importers.tiled.TiledMapData"/></map>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<tiles public="1"><c path="Array"><c path="luxe.importers.tiled.TiledTile"/></c></tiles>
		<is_valid_xml_element set="method" line="28"><f a="element">
	<c path="Xml"/>
	<x path="Bool"/>
</f></is_valid_xml_element>
		<from_xml public="1" set="method" line="32"><f a="xml">
	<c path="Xml"/>
	<x path="Void"/>
</f></from_xml>
		<from_json public="1" set="method" line="113"><f a="json">
	<d/>
	<x path="Void"/>
</f></from_json>
		<csv_to_IntArray set="method" line="149"><f a="input">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></csv_to_IntArray>
		<new public="1" set="method" line="22"><f a="_map">
	<c path="luxe.importers.tiled.TiledMapData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.importers.tiled.TiledMapOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledMap.hx" module="luxe.importers.tiled.TiledMap"><a>
	<pos>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</pos>
	<format>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</format>
	<file><c path="String"/></file>
	<asset_path>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</asset_path>
</a></typedef>
	<class path="luxe.tilemaps.Tilemap" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx">
		<layers public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.tilemaps.TileLayer"/>
</x></layers>
		<layers_ordered public="1"><c path="Array"><c path="luxe.tilemaps.TileLayer"/></c></layers_ordered>
		<tilesets public="1"><x path="Map">
	<c path="String"/>
	<c path="luxe.tilemaps.Tileset"/>
</x></tilesets>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<orientation public="1"><e path="luxe.tilemaps.TilemapOrientation"/></orientation>
		<visual public="1"><c path="luxe.tilemaps.TilemapVisual"/></visual>
		<pos public="1"><t path="luxe.Vector"/></pos>
		<tile_width public="1"><x path="Int"/></tile_width>
		<tile_height public="1"><x path="Int"/></tile_height>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<total_width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</total_width>
		<total_height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</total_height>
		<bounds public="1" get="accessor" set="null">
			<t path="luxe.Rectangle"/>
			<meta><m n=":isVar"/></meta>
		</bounds>
		<display public="1" set="method" line="400"><f a="options">
	<t path="luxe.options.TilemapVisualOptions"/>
	<x path="Void"/>
</f></display>
		<inside public="1" set="method" line="413"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></inside>
		<tile_pos public="1" set="method" line="439"><f a="layer_name:x:y:?scale:?offset_x:?offset_y" v=":::1.0f:null:null">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<e path="luxe.tilemaps.TileOffset"/>
	<e path="luxe.tilemaps.TileOffset"/>
	<c path="phoenix.Vector"/>
</f></tile_pos>
		<tile_at_pos public="1" set="method" line="467"><f a="layer_name:worldpos:?_scale" v="::1.0f">
	<c path="String"/>
	<t path="luxe.Vector"/>
	<x path="Float"/>
	<c path="luxe.tilemaps.Tile"/>
</f></tile_at_pos>
		<worldpos_to_map public="1" set="method" line="495"><f a="worldpos:?_scale" v=":1.0f">
	<t path="luxe.Vector"/>
	<x path="Float"/>
	<t path="luxe.Vector"/>
</f></worldpos_to_map>
		<layer public="1" set="method" line="515"><f a="layer_name">
	<c path="String"/>
	<t path="Null"><c path="luxe.tilemaps.TileLayer"/></t>
</f></layer>
		<tileset public="1" set="method" line="519"><f a="layer_name">
	<c path="String"/>
	<t path="Null"><c path="luxe.tilemaps.Tileset"/></t>
</f></tileset>
		<tile_at public="1" set="method" line="524"><f a="layer_name:x:y">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="luxe.tilemaps.Tile"/>
</f></tile_at>
		<iterator public="1" set="method" line="541"><f a=""><t path="Iterator"><c path="luxe.tilemaps.TileLayer"/></t></f></iterator>
		<add_tileset public="1" set="method" line="547"><f a="options">
	<t path="luxe.options.TilesetOptions"/>
	<c path="luxe.tilemaps.Tileset"/>
</f></add_tileset>
		<_sort_layers set="method" line="557"><f a="a:b">
	<c path="luxe.tilemaps.TileLayer"/>
	<c path="luxe.tilemaps.TileLayer"/>
	<x path="Int"/>
</f></_sort_layers>
		<sort_layers set="method" line="563"><f a=""><x path="Void"/></f></sort_layers>
		<tileset_from_id public="1" set="method" line="567"><f a="_id">
	<x path="Int"/>
	<c path="luxe.tilemaps.Tileset"/>
</f></tileset_from_id>
		<remove_tile public="1" set="method" line="584"><f a="layer_name:x:y">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></remove_tile>
		<remove_tileset public="1" set="method" line="599"><f a="name:?_destroy_textures" v=":false">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></remove_tileset>
		<remove_layer public="1" set="method" line="611"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></remove_layer>
		<add_layer public="1" set="method" line="623"><f a="options">
	<t path="luxe.options.TileLayerOptions"/>
	<c path="luxe.tilemaps.TileLayer"/>
</f></add_layer>
		<add_tiles_fill_by_id public="1" set="method" line="640"><f a="layer_name:?_tileid" v=":0">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></add_tiles_fill_by_id>
		<add_tiles_from_grid public="1" set="method" line="676"><f a="layer_name:grid">
	<c path="String"/>
	<c path="Array"><c path="Array"><x path="Int"/></c></c>
	<x path="Void"/>
</f></add_tiles_from_grid>
		<get_total_width set="method" line="721"><f a=""><x path="Int"/></f></get_total_width>
		<get_total_height set="method" line="725"><f a=""><x path="Int"/></f></get_total_height>
		<get_bounds set="method" line="729"><f a=""><t path="luxe.Rectangle"/></f></get_bounds>
		<new public="1" set="method" line="376"><f a="options">
	<t path="luxe.options.TilemapOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledMap" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledMap.hx">
		<extends path="luxe.tilemaps.Tilemap"/>
		<tiledmap_data public="1"><c path="luxe.importers.tiled.TiledMapData"/></tiledmap_data>
		<_load_tilesets set="method" line="63"><f a="options">
	<t path="luxe.importers.tiled.TiledMapOptions"/>
	<x path="Void"/>
</f></_load_tilesets>
		<_load_layers set="method" line="83"><f a="options">
	<t path="luxe.importers.tiled.TiledMapOptions"/>
	<x path="Void"/>
</f></_load_layers>
		<new public="1" set="method" line="19"><f a="options">
	<t path="luxe.importers.tiled.TiledMapOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledMapData" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledMapData.hx">
		<version public="1"><c path="String"/></version>
		<background_color public="1"><c path="String"/></background_color>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<orientation public="1"><e path="luxe.tilemaps.TilemapOrientation"/></orientation>
		<tile_width public="1"><x path="Int"/></tile_width>
		<tile_height public="1"><x path="Int"/></tile_height>
		<tilesets public="1"><c path="Array"><c path="luxe.importers.tiled.TiledTileset"/></c></tilesets>
		<layers public="1"><c path="Array"><c path="luxe.importers.tiled.TiledLayer"/></c></layers>
		<object_groups public="1"><c path="Array"><c path="luxe.importers.tiled.TiledObjectGroup"/></c></object_groups>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<toString set="method" line="50"><f a=""><c path="String"/></f></toString>
		<is_valid_xml_element set="method" line="54"><f a="element">
	<c path="Xml"/>
	<x path="Bool"/>
</f></is_valid_xml_element>
		<orientation_from_string set="method" line="58"><f a="_orientation_string">
	<c path="String"/>
	<e path="luxe.tilemaps.TilemapOrientation"/>
</f></orientation_from_string>
		<parseFromXML public="1" set="method" line="73"><f a="xml">
	<c path="Xml"/>
	<x path="Void"/>
</f></parseFromXML>
		<parseFromJSON public="1" set="method" line="141"><f a="json">
	<d/>
	<x path="Void"/>
</f></parseFromJSON>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledPropertyTile" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledMapData.hx" module="luxe.importers.tiled.TiledMapData">
		<id public="1"><x path="Int"/></id>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<new public="1" set="method" line="221"><f a="_id:_properties">
	<x path="Int"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="luxe.importers.tiled.TiledObjectType" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledObjectGroup.hx" module="luxe.importers.tiled.TiledObjectGroup">
		<polyline/>
		<polygon/>
		<rectangle/>
		<ellipse/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.importers.tiled.TiledPolyObject" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledObjectGroup.hx" module="luxe.importers.tiled.TiledObjectGroup">
		<origin public="1"><t path="luxe.Vector"/></origin>
		<points public="1"><c path="Array"><t path="luxe.Vector"/></c></points>
		<new public="1" set="method" line="16"><f a="_origin:_points">
	<t path="luxe.Vector"/>
	<c path="Array"><t path="luxe.Vector"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledObject" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledObjectGroup.hx" module="luxe.importers.tiled.TiledObjectGroup">
		<group public="1"><c path="luxe.importers.tiled.TiledObjectGroup"/></group>
		<gid public="1"><x path="Int"/></gid>
		<name public="1"><c path="String"/></name>
		<type public="1"><c path="String"/></type>
		<visible public="1"><x path="Bool"/></visible>
		<pos public="1"><t path="luxe.Vector"/></pos>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<polyobject public="1"><c path="luxe.importers.tiled.TiledPolyObject"/></polyobject>
		<object_type public="1"><e path="luxe.importers.tiled.TiledObjectType"/></object_type>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<is_valid_xml_element set="method" line="52"><f a="element">
	<c path="Xml"/>
	<x path="Bool"/>
</f></is_valid_xml_element>
		<polyobject_from_xml set="method" line="56"><f a="xml">
	<c path="Xml"/>
	<c path="luxe.importers.tiled.TiledPolyObject"/>
</f></polyobject_from_xml>
		<polyobject_from_json set="method" line="71"><f a="json">
	<d/>
	<c path="luxe.importers.tiled.TiledPolyObject"/>
</f></polyobject_from_json>
		<from_xml public="1" set="method" line="87"><f a="xml">
	<c path="Xml"/>
	<x path="Void"/>
</f></from_xml>
		<from_json public="1" set="method" line="140"><f a="json">
	<d/>
	<x path="Void"/>
</f></from_json>
		<new public="1" set="method" line="46"><f a="_group">
	<c path="luxe.importers.tiled.TiledObjectGroup"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledObjectGroup" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledObjectGroup.hx">
		<map public="1"><c path="luxe.importers.tiled.TiledMapData"/></map>
		<name public="1"><c path="String"/></name>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<visible public="1"><x path="Bool"/></visible>
		<opacity public="1"><x path="Float"/></opacity>
		<color public="1"><c path="String"/></color>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<objects public="1"><c path="Array"><c path="luxe.importers.tiled.TiledObject"/></c></objects>
		<is_valid_xml_element set="method" line="221"><f a="element">
	<c path="Xml"/>
	<x path="Bool"/>
</f></is_valid_xml_element>
		<from_xml public="1" set="method" line="225"><f a="xml">
	<c path="Xml"/>
	<x path="Void"/>
</f></from_xml>
		<from_json public="1" set="method" line="254"><f a="json">
	<d/>
	<x path="Void"/>
</f></from_json>
		<new public="1" set="method" line="209"><f a="_map">
	<c path="luxe.importers.tiled.TiledMapData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledTile" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledTile.hx">
		<layer public="1"><c path="luxe.importers.tiled.TiledLayer"/></layer>
		<id public="1"><x path="Int"/></id>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</width>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</height>
		<get_width public="1" set="method" line="18"><f a=""><x path="Int"/></f></get_width>
		<get_height public="1" set="method" line="22"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="13"><f a="_layer:_id">
	<c path="luxe.importers.tiled.TiledLayer"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.importers.tiled.TiledTileset" params="" file="/Users/sven/dev/luxe/luxe/luxe/importers/tiled/TiledTileset.hx">
		<name public="1"><c path="String"/></name>
		<texture_name public="1"><c path="String"/></texture_name>
		<first_id public="1"><x path="Int"/></first_id>
		<tile_width public="1"><x path="Int"/></tile_width>
		<tile_height public="1"><x path="Int"/></tile_height>
		<margin public="1"><x path="Int"/></margin>
		<spacing public="1"><x path="Int"/></spacing>
		<properties public="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></properties>
		<property_tiles public="1"><x path="Map">
	<x path="Int"/>
	<c path="luxe.importers.tiled.TiledPropertyTile"/>
</x></property_tiles>
		<is_valid_xml_element set="method" line="27"><f a="element">
	<c path="Xml"/>
	<x path="Bool"/>
</f></is_valid_xml_element>
		<from_xml public="1" set="method" line="31"><f a="xml">
	<c path="Xml"/>
	<x path="Void"/>
</f></from_xml>
		<from_json public="1" set="method" line="93"><f a="json">
	<d/>
	<x path="Void"/>
</f></from_json>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.macros.BuildVersion" params="" file="/Users/sven/dev/luxe/luxe/luxe/macros/BuildVersion.hx">
		<_save public="1" line="17" static="1"><x path="Bool"/></_save>
		<try_git set="method" line="53" static="1"><f a="root">
	<c path="String"/>
	<c path="String"/>
</f></try_git>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.macros.ComponentRules" params="" file="/Users/sven/dev/luxe/luxe/luxe/macros/ComponentRules.hx"><meta>
	<m n=":keep"/>
	<m n=":noCompletion"/>
</meta></class>
	<class path="luxe.macros.EntityRules" params="" file="/Users/sven/dev/luxe/luxe/luxe/macros/EntityRules.hx"><meta>
	<m n=":keep"/>
	<m n=":noCompletion"/>
</meta></class>
	<typedef path="luxe.options.BatcherOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/BatcherOptions.hx"><a>
	<no_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>set to true, to disable adding to the renderer</haxe_doc>
	</no_add>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The name of this batcher. highly recommended you set this.</haxe_doc>
	</name>
	<layer>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the order/layer for this batcher in the renderer.</haxe_doc>
	</layer>
	<camera>
		<c path="phoenix.Camera"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>a phoenix camera view for the batcher. If you have a luxe.Camera, use the .view property from it.</haxe_doc>
	</camera>
</a></typedef>
	<typedef path="luxe.options.CameraOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/CameraOptions.hx"><a>
	<viewport>
		<c path="phoenix.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the bounds of the viewport, common to ortho + perspective</haxe_doc>
	</viewport>
	<projection>
		<e path="phoenix.ProjectionType"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The type of projection to use. ortho, perspective</haxe_doc>
	</projection>
	<near>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the near clipping plane, common to ortho + perspective</haxe_doc>
	</near>
	<fov_type>
		<e path="phoenix.FOVType"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the field of view type (vertical or horizontal). perspective only</haxe_doc>
	</fov_type>
	<fov>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the vertical field of view, in degrees. perspective only</haxe_doc>
	</fov>
	<far>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the far clipping plane, common to ortho + perspective</haxe_doc>
	</far>
	<depth_test>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether or not depth testing should be enabled. defaults: ortho(false), perspective(true)</haxe_doc>
	</depth_test>
	<cull_backfaces>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether or not to cull backfaces, defaults: ortho(false), perspective(true)</haxe_doc>
	</cull_backfaces>
	<camera_name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The camera view name. highly recommended you set this.</haxe_doc>
	</camera_name>
	<aspect>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The aspect ratio. usually `view width/view height`. perspective only</haxe_doc>
	</aspect>
</a></typedef>
	<typedef path="luxe.options.LuxeCameraOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/CameraOptions.hx" module="luxe.options.CameraOptions">
		<a>
			<viewport>
				<c path="phoenix.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the bounds of the viewport, common to ortho + perspective</haxe_doc>
			</viewport>
			<view>
				<c path="phoenix.Camera"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Give this luxe entity camera a pre-existing phoenix view camera</haxe_doc>
			</view>
			<scene>
				<c path="luxe.Scene"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, add to given scene. If not set, will add to default scene (unless no_scene)</haxe_doc>
			</scene>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<projection>
				<e path="phoenix.ProjectionType"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of projection to use. ortho, perspective</haxe_doc>
			</projection>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<parent>
				<c path="luxe.Entity"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, set parent to given entity</haxe_doc>
			</parent>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_scene>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if true, do not add to any scene</haxe_doc>
			</no_scene>
			<near>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the near clipping plane, common to ortho + perspective</haxe_doc>
			</near>
			<name_unique>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If shared names prefer a unique name, set this to true.   
            For example, `{ name:'enemy', name_unique:true }` would   
            generate a unique enemy.tp28h type of name for later filtering,   
            where the unique part would be the entity id</haxe_doc>
			</name_unique>
			<name>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the entity name. highly recommended you set this.</haxe_doc>
			</name>
			<fov_type>
				<e path="phoenix.FOVType"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the field of view type (vertical or horizontal). perspective only</haxe_doc>
			</fov_type>
			<fov>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the vertical field of view, in degrees. perspective only</haxe_doc>
			</fov>
			<far>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the far clipping plane, common to ortho + perspective</haxe_doc>
			</far>
			<depth_test>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not depth testing should be enabled. defaults: ortho(false), perspective(true)</haxe_doc>
			</depth_test>
			<cull_backfaces>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not to cull backfaces, defaults: ortho(false), perspective(true)</haxe_doc>
			</cull_backfaces>
			<camera_name>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The camera view name. highly recommended you set this.</haxe_doc>
			</camera_name>
			<aspect>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The aspect ratio. usually `view width/view height`. perspective only</haxe_doc>
			</aspect>
		</a>
		<haxe_doc>Don't like this naming here, tentative. Will have to do for now.</haxe_doc>
	</typedef>
	<typedef path="luxe.options.ColorOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ColorOptions.hx"><a>
	<v>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The value component. applies to `ColorHSV` only.</haxe_doc>
	</v>
	<s>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The saturation component. applies to `ColorHSV` and `ColorHSL` only.</haxe_doc>
	</s>
	<r>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The blue component. applies to `Color` only.</haxe_doc>
	</r>
	<l>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The lightness component. applies to `ColorHSL` only.</haxe_doc>
	</l>
	<h>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The hue component. applies to `ColorHSV` and `ColorHSL` only.</haxe_doc>
	</h>
	<g>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The green component. applies to `Color` only.</haxe_doc>
	</g>
	<b>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The blue component. applies to `Color` only.</haxe_doc>
	</b>
	<a>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The alpha component. applies to all `Color` types.</haxe_doc>
	</a>
</a></typedef>
	<typedef path="luxe.options.ComponentOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ComponentOptions.hx">
		<a><name>
	<c path="String"/>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The component name. This is extremely important,
            as it is the named under which this component will be attached,
            and referenced in functions like `get`.
            Think of the name like the attachment slot for a component.</haxe_doc>
</name></a>
		<haxe_doc>Options for a luxe.Component instance</haxe_doc>
	</typedef>
	<typedef path="luxe.options.DrawLineOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><t path="luxe.options.LineGeometryOptions"/></typedef>
	<typedef path="luxe.options.DrawBoxOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><t path="luxe.options.QuadGeometryOptions"/></typedef>
	<typedef path="luxe.options.DrawRectangleOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><t path="luxe.options.RectangleGeometryOptions"/></typedef>
	<typedef path="luxe.options.DrawRingOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><t path="luxe.options.CircleGeometryOptions"/></typedef>
	<typedef path="luxe.options.DrawArcOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><t path="luxe.options.CircleGeometryOptions"/></typedef>
	<typedef path="luxe.options.DrawCircleOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><t path="luxe.options.CircleGeometryOptions"/></typedef>
	<typedef path="luxe.options.DrawNgonOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><a>
	<y>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>center point y</haxe_doc>
	</y>
	<x>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>center point x</haxe_doc>
	</x>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<solid>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>whether or not this is an outline or a solid filled ngon</haxe_doc>
	</solid>
	<sides>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The number of sides. For a triangle, 3. For a square, 4, etc.</haxe_doc>
	</sides>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<r>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the radius of the ngon,
        around the center point x,y</haxe_doc>
	</r>
	<primitive_type>
		<t path="Null"><x path="phoenix.PrimitiveType"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
	</primitive_type>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
	</id>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color</haxe_doc>
	</color>
	<clip_rect>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
	</clip_rect>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
	<angle>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>an offset rotation angle in degrees</haxe_doc>
	</angle>
</a></typedef>
	<typedef path="luxe.options.DrawTextureOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions"><a>
	<y>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>y position</haxe_doc>
	</y>
	<x>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>x position</haxe_doc>
	</x>
	<w>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>width</haxe_doc>
	</w>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<uv>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the uv coordinates for the created quad, in texture size (pixels)</haxe_doc>
	</uv>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the size to draw the texture at. An alternative to `w`,`h`. If this is specifed, w,h is ignored.</haxe_doc>
	</size>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<rect>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>optional existing rect. oveerrides x/y/w/h</haxe_doc>
	</rect>
	<primitive_type>
		<t path="Null"><x path="phoenix.PrimitiveType"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
	</primitive_type>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
	</id>
	<h>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>height</haxe_doc>
	</h>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<flipy>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether or not the quad is flipped vertically</haxe_doc>
	</flipy>
	<flipx>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether or not the quad is flipped horizontally</haxe_doc>
	</flipx>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color</haxe_doc>
	</color>
	<clip_rect>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
	</clip_rect>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<typedef path="luxe.options.DrawPlaneOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" module="luxe.options.DrawOptions">
		<t path="luxe.options.PlaneGeometryOptions"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="luxe.options._DrawOptions.DrawOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/DrawOptions.hx" private="1" module="luxe.options.DrawOptions"><meta>
	<m n=":keep"/>
	<m n=":noCompletion"/>
</meta></class>
	<typedef path="luxe.options.EntityOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/EntityOptions.hx"><a>
	<scene>
		<c path="luxe.Scene"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, add to given scene. If not set, will add to default scene (unless no_scene)</haxe_doc>
	</scene>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<parent>
		<c path="luxe.Entity"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, set parent to given entity</haxe_doc>
	</parent>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_scene>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if true, do not add to any scene</haxe_doc>
	</no_scene>
	<name_unique>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If shared names prefer a unique name, set this to true.   
            For example, `{ name:'enemy', name_unique:true }` would   
            generate a unique enemy.tp28h type of name for later filtering,   
            where the unique part would be the entity id</haxe_doc>
	</name_unique>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the entity name. highly recommended you set this.</haxe_doc>
	</name>
</a></typedef>
	<typedef path="luxe.options._FontOptions.FontOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/FontOptions.hx" private="1" module="luxe.options.FontOptions"><a><resources>
	<c path="luxe.resource.ResourceManager"/>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The resource manager to associate this font with. default: `Luxe.resources`</haxe_doc>
</resources></a></typedef>
	<typedef path="luxe.options.BitmapFontOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/FontOptions.hx" module="luxe.options.FontOptions">
		<a>
			<silent>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not this and it's resources load without logging. default: false</haxe_doc>
			</silent>
			<resources>
				<c path="luxe.resource.ResourceManager"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The resource manager to associate this font with. default: `Luxe.resources`</haxe_doc>
			</resources>
			<path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The path of the font textures. Textures are separate using embedded paths. default: 'assets/'</haxe_doc>
			</path>
			<onload>
				<t path="Null"><f a="">
	<c path="phoenix.BitmapFont"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The callback to call when the font finishes loading</haxe_doc>
			</onload>
			<mipmaps>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the texture pages generate mipmaps automatically. default: false</haxe_doc>
			</mipmaps>
			<id>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The file asset id of the font data to use/load, exluding paths/folder. Required if using load.</haxe_doc>
			</id>
			<filter_min>
				<e path="phoenix.FilterType"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Loaded/assigned textures will use this filter minification mode. default: linear</haxe_doc>
			</filter_min>
			<filter_mag>
				<e path="phoenix.FilterType"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Loaded/assigned textures will use this filter magnification mode. default: linear</haxe_doc>
			</filter_mag>
			<filter>
				<e path="phoenix.FilterType"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Loaded/assigned textures will use this filter mode. default: linear</haxe_doc>
			</filter>
		</a>
		<haxe_doc>Options for creating/loading a bitmap font</haxe_doc>
	</typedef>
	<typedef path="luxe.options.GeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/GeometryOptions.hx"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<primitive_type>
		<t path="Null"><x path="phoenix.PrimitiveType"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
	</primitive_type>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
	</id>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color</haxe_doc>
	</color>
	<clip_rect>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
	</clip_rect>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<typedef path="luxe.options.RectangleGeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/GeometryOptions.hx" module="luxe.options.GeometryOptions">
		<a>
			<y>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>y position</haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>x position</haxe_doc>
			</x>
			<w>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>width</haxe_doc>
			</w>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<texture>
				<c path="phoenix.Texture"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the texture for the geometry</haxe_doc>
			</texture>
			<shader>
				<c path="phoenix.Shader"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the shader for the geometry</haxe_doc>
			</shader>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>optional existing rect. oveerrides x/y/w/h</haxe_doc>
			</rect>
			<primitive_type>
				<t path="Null"><x path="phoenix.PrimitiveType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
			</primitive_type>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_batcher_add>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
			</no_batcher_add>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<id>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
			</id>
			<h>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>height</haxe_doc>
			</h>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<color>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the base color</haxe_doc>
			</color>
			<clip_rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
			</clip_rect>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<haxe_doc>Options for drawing or creating rectangle based geometry, phoenix.geometry.RectangleGeometry</haxe_doc>
	</typedef>
	<typedef path="luxe.options.QuadGeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/GeometryOptions.hx" module="luxe.options.GeometryOptions">
		<a>
			<y>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>y position</haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>x position</haxe_doc>
			</x>
			<w>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>width</haxe_doc>
			</w>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<texture>
				<c path="phoenix.Texture"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the texture for the geometry</haxe_doc>
			</texture>
			<shader>
				<c path="phoenix.Shader"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the shader for the geometry</haxe_doc>
			</shader>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>optional existing rect. oveerrides x/y/w/h</haxe_doc>
			</rect>
			<primitive_type>
				<t path="Null"><x path="phoenix.PrimitiveType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
			</primitive_type>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_batcher_add>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
			</no_batcher_add>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<id>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
			</id>
			<h>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>height</haxe_doc>
			</h>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<flipy>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the quad is flipped vertically</haxe_doc>
			</flipy>
			<flipx>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the quad is flipped horizontally</haxe_doc>
			</flipx>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<color>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the base color</haxe_doc>
			</color>
			<clip_rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
			</clip_rect>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<haxe_doc>Options for drawing or creating quad based geometry, phoenix.geometry.QuadGeometry</haxe_doc>
	</typedef>
	<typedef path="luxe.options.LineGeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/GeometryOptions.hx" module="luxe.options.GeometryOptions">
		<a>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<texture>
				<c path="phoenix.Texture"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the texture for the geometry</haxe_doc>
			</texture>
			<shader>
				<c path="phoenix.Shader"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the shader for the geometry</haxe_doc>
			</shader>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<primitive_type>
				<t path="Null"><x path="phoenix.PrimitiveType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
			</primitive_type>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<p1>
				<t path="luxe.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the end point of the line</haxe_doc>
			</p1>
			<p0>
				<t path="luxe.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the start point of the line</haxe_doc>
			</p0>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_batcher_add>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
			</no_batcher_add>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<id>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
			</id>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<color1>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>specified only if per vertex color is desired, use .color for both</haxe_doc>
			</color1>
			<color0>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>specified only if per vertex color is desired, use .color for both</haxe_doc>
			</color0>
			<color>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the base color</haxe_doc>
			</color>
			<clip_rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
			</clip_rect>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<haxe_doc>Options for drawing or creating line based geometry, phoenix.geometry.LineGeometry</haxe_doc>
	</typedef>
	<typedef path="luxe.options.CircleGeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/GeometryOptions.hx" module="luxe.options.GeometryOptions">
		<a>
			<y>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>y position</haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>x position</haxe_doc>
			</x>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<texture>
				<c path="phoenix.Texture"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the texture for the geometry</haxe_doc>
			</texture>
			<steps>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>a fixed number of steps/sides, will auto step smoothly if not specified (using smooth above)</haxe_doc>
			</steps>
			<start_angle>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Starting angle of circle, in degrees (pie/arc)</haxe_doc>
			</start_angle>
			<smooth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the smoothing factor to auto calculate steps</haxe_doc>
			</smooth>
			<shader>
				<c path="phoenix.Shader"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the shader for the geometry</haxe_doc>
			</shader>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<ry>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>y radius. For an ellipse, optional.</haxe_doc>
			</ry>
			<rx>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>x radius. For an ellipse, optional.</haxe_doc>
			</rx>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<r>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>radius</haxe_doc>
			</r>
			<primitive_type>
				<t path="Null"><x path="phoenix.PrimitiveType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
			</primitive_type>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_batcher_add>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
			</no_batcher_add>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<id>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
			</id>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<end_angle>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Ending angle of circle, in degrees (pie/arc)</haxe_doc>
			</end_angle>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<color>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the base color</haxe_doc>
			</color>
			<clip_rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
			</clip_rect>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<haxe_doc>Options for drawing or creating circle based geometry, phoenix.geometry.CircleGeometry</haxe_doc>
	</typedef>
	<typedef path="luxe.options.PlaneGeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/GeometryOptions.hx" module="luxe.options.GeometryOptions">
		<a>
			<z>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>z position</haxe_doc>
			</z>
			<y>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>y position</haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>x position</haxe_doc>
			</x>
			<w>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>width</haxe_doc>
			</w>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<texture>
				<c path="phoenix.Texture"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the texture for the geometry</haxe_doc>
			</texture>
			<shader>
				<c path="phoenix.Shader"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the shader for the geometry</haxe_doc>
			</shader>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>optional existing rect. oveerrides x/y/w/h</haxe_doc>
			</rect>
			<primitive_type>
				<t path="Null"><x path="phoenix.PrimitiveType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
			</primitive_type>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_batcher_add>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
			</no_batcher_add>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<id>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
			</id>
			<h>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>height</haxe_doc>
			</h>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<flipy>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the quad is flipped vertically</haxe_doc>
			</flipy>
			<flipx>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the quad is flipped horizontally</haxe_doc>
			</flipx>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<color>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the base color</haxe_doc>
			</color>
			<clip_rect>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
			</clip_rect>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<typedef path="luxe.options.MeshOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/MeshOptions.hx"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</texture>
	<string>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</string>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<onload>
		<t path="Null"><f a="">
	<c path="luxe.Mesh"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</onload>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</name>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<geometry>
		<c path="phoenix.geometry.Geometry"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</geometry>
	<file>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</file>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<typedef path="luxe.options.NineSliceOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/NineSliceOptions.hx">
		<a>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<uv>
				<t path="luxe.Rectangle"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>specify the uv rectangle inside the texture, in texture space (pixels)</haxe_doc>
			</uv>
			<top>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the top size of the nineslice, in the texture (pixels)</haxe_doc>
			</top>
			<texture>
				<c path="phoenix.Texture"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the texture for the geometry</haxe_doc>
			</texture>
			<source_y>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The source y position within the texture. used for atlas based nineslice images</haxe_doc>
			</source_y>
			<source_x>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The source x position within the texture. used for atlas based nineslice images</haxe_doc>
			</source_x>
			<source_w>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The source width, within the texture. used for atlas based nineslice images</haxe_doc>
			</source_w>
			<source_h>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The source height, within the texture. used for atlas based nineslice images</haxe_doc>
			</source_h>
			<size>
				<t path="luxe.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the size of the geometry to create</haxe_doc>
			</size>
			<shader>
				<c path="phoenix.Shader"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the shader for the geometry</haxe_doc>
			</shader>
			<scene>
				<c path="luxe.Scene"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, add to given scene. If not set, will add to default scene (unless no_scene)</haxe_doc>
			</scene>
			<scale>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform scale</haxe_doc>
			</scale>
			<rotation_z>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the rotation around the z access, in degrees. convenience.</haxe_doc>
			</rotation_z>
			<rotation>
				<c path="phoenix.Quaternion"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform rotation</haxe_doc>
			</rotation>
			<right>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the right size of the nineslice, in the texture (pixels)</haxe_doc>
			</right>
			<pos>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform position</haxe_doc>
			</pos>
			<parent>
				<c path="luxe.Entity"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, set parent to given entity</haxe_doc>
			</parent>
			<origin>
				<c path="phoenix.Vector"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the transform origin</haxe_doc>
			</origin>
			<no_scene>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if true, do not add to any scene</haxe_doc>
			</no_scene>
			<no_geometry>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, no geometry will be created.</haxe_doc>
			</no_geometry>
			<no_batcher_add>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
			</no_batcher_add>
			<name_unique>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If shared names prefer a unique name, set this to true.   
            For example, `{ name:'enemy', name_unique:true }` would   
            generate a unique enemy.tp28h type of name for later filtering,   
            where the unique part would be the entity id</haxe_doc>
			</name_unique>
			<name>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the entity name. highly recommended you set this.</haxe_doc>
			</name>
			<left>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the left size of the nineslice, in the texture (pixels)</haxe_doc>
			</left>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<geometry>
				<c path="phoenix.geometry.Geometry"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if specified, this geometry will be used instead.</haxe_doc>
			</geometry>
			<flipy>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, the sprite will be flipped vertically</haxe_doc>
			</flipy>
			<flipx>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, the sprite will be flipped horizontally</haxe_doc>
			</flipx>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<color>
				<t path="luxe.Color"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the base color for the geometry</haxe_doc>
			</color>
			<centered>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if set, the sprite will be centered</haxe_doc>
			</centered>
			<bottom>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the bottom size of the nineslice, in the texture (pixels)</haxe_doc>
			</bottom>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<haxe_doc>Options for a Nineslice scaled entity, extending from `Sprite` allowing scaleable graphics to be drawn from a small image. See the guide for examples.</haxe_doc>
	</typedef>
	<typedef path="luxe.options.ParcelOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ParcelOptions.hx"><a>
	<threaded>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</threaded>
	<start_spacing>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</start_spacing>
	<silent>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</silent>
	<sequential>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</sequential>
	<onprogress>
		<t path="Null"><f a="">
	<c path="luxe.resource.Resource"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</onprogress>
	<oncomplete>
		<t path="Null"><f a="">
	<c path="luxe.Parcel"/>
	<x path="Void"/>
</f></t>
		<meta><m n=":optional"/></meta>
	</oncomplete>
	<load_spacing>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</load_spacing>
</a></typedef>
	<typedef path="luxe.options.ParcelProgressOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ParcelProgressOptions.hx"><a>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
	</texture>
	<parcel><c path="luxe.Parcel"/></parcel>
	<oncomplete><f a="">
	<c path="luxe.Parcel"/>
	<x path="Void"/>
</f></oncomplete>
	<fade_time>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</fade_time>
	<fade_out>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</fade_out>
	<fade_in>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</fade_in>
	<bar_border>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</bar_border>
	<bar>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</bar>
	<background>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</background>
</a></typedef>
	<typedef path="luxe.options.ParticleEmitterOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ParticleOptions.hx" module="luxe.options.ParticleOptions"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<start_size_random>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</start_size_random>
	<start_size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</start_size>
	<start_color_random>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</start_color_random>
	<start_color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</start_color>
	<speed_random>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</speed_random>
	<speed>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</speed>
	<rotation_random>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</rotation_random>
	<rotation_offset>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</rotation_offset>
	<rotation>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</rotation>
	<pos_random>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</pos_random>
	<pos_offset>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</pos_offset>
	<pos>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</pos>
	<particle_image>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
	</particle_image>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</name>
	<life_random>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</life_random>
	<life>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</life>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<gravity>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</gravity>
	<end_speed>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</end_speed>
	<end_size_random>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</end_size_random>
	<end_size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</end_size>
	<end_rotation_random>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</end_rotation_random>
	<end_rotation>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</end_rotation>
	<end_color_random>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</end_color_random>
	<end_color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
	</end_color>
	<emit_time>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</emit_time>
	<emit_count>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</emit_count>
	<direction_vector>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
	</direction_vector>
	<direction_random>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</direction_random>
	<direction>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</direction>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<cache_size>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
	</cache_size>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<typedef path="luxe.options.ParticleOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ParticleOptions.hx"><a/></typedef>
	<typedef path="luxe.options.RenderProperties" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/RenderProperties.hx"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<typedef path="luxe.options.ResourceOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ResourceOptions.hx"><a>
	<silent>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</silent>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</id>
</a></typedef>
	<typedef path="luxe.options.FontOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ResourceOptions.hx" module="luxe.options.ResourceOptions"><a>
	<silent>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</silent>
	<onloaded>
		<c path="phoenix.BitmapFont"/>
		<meta><m n=":optional"/></meta>
	</onloaded>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</id>
</a></typedef>
	<typedef path="luxe.options.TextureOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/ResourceOptions.hx" module="luxe.options.ResourceOptions"><a>
	<silent>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</silent>
	<onloaded>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
	</onloaded>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</id>
</a></typedef>
	<typedef path="luxe.options.SpriteOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/SpriteOptions.hx"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<uv>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>specify the uv rectangle inside the texture, in texture space (pixels)</haxe_doc>
	</uv>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the size of the geometry to create</haxe_doc>
	</size>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<scene>
		<c path="luxe.Scene"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, add to given scene. If not set, will add to default scene (unless no_scene)</haxe_doc>
	</scene>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation_z>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the rotation around the z access, in degrees. convenience.</haxe_doc>
	</rotation_z>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<parent>
		<c path="luxe.Entity"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, set parent to given entity</haxe_doc>
	</parent>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_scene>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if true, do not add to any scene</haxe_doc>
	</no_scene>
	<no_geometry>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, no geometry will be created.</haxe_doc>
	</no_geometry>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<name_unique>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If shared names prefer a unique name, set this to true.   
            For example, `{ name:'enemy', name_unique:true }` would   
            generate a unique enemy.tp28h type of name for later filtering,   
            where the unique part would be the entity id</haxe_doc>
	</name_unique>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the entity name. highly recommended you set this.</haxe_doc>
	</name>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<geometry>
		<c path="phoenix.geometry.Geometry"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, this geometry will be used instead.</haxe_doc>
	</geometry>
	<flipy>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, the sprite will be flipped vertically</haxe_doc>
	</flipy>
	<flipx>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, the sprite will be flipped horizontally</haxe_doc>
	</flipx>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color for the geometry</haxe_doc>
	</color>
	<centered>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, the sprite will be centered</haxe_doc>
	</centered>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<typedef path="luxe.options.StateOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/StateOptions.hx"><a><name>
	<c path="String"/>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The name of this state. Used for setting,enabling and disabling and fetching a state from a state machine. highly recommended you set this.</haxe_doc>
</name></a></typedef>
	<typedef path="luxe.options.StatesOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/StateOptions.hx" module="luxe.options.StateOptions"><a><name>
	<c path="String"/>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The name of this state machine. highly recommended you set this.</haxe_doc>
</name></a></typedef>
	<typedef path="luxe.options.TextOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TextOptions.hx"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<thickness>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</thickness>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<text>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</text>
	<smoothness>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</smoothness>
	<size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the size of the geometry to create</haxe_doc>
	</size>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<sdf>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</sdf>
	<scene>
		<c path="luxe.Scene"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, add to given scene. If not set, will add to default scene (unless no_scene)</haxe_doc>
	</scene>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation_z>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the rotation around the z access, in degrees. convenience.</haxe_doc>
	</rotation_z>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<point_size>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</point_size>
	<parent>
		<c path="luxe.Entity"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, set parent to given entity</haxe_doc>
	</parent>
	<outline_color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</outline_color>
	<outline>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</outline>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_scene>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if true, do not add to any scene</haxe_doc>
	</no_scene>
	<no_geometry>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, no geometry will be created.</haxe_doc>
	</no_geometry>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<name_unique>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If shared names prefer a unique name, set this to true.   
            For example, `{ name:'enemy', name_unique:true }` would   
            generate a unique enemy.tp28h type of name for later filtering,   
            where the unique part would be the entity id</haxe_doc>
	</name_unique>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the entity name. highly recommended you set this.</haxe_doc>
	</name>
	<line_spacing>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</line_spacing>
	<letter_spacing>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</letter_spacing>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<glow_threshold>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</glow_threshold>
	<glow_color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</glow_color>
	<glow_amount>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</glow_amount>
	<geometry>
		<c path="phoenix.geometry.Geometry"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, this geometry will be used instead.</haxe_doc>
	</geometry>
	<font>
		<c path="phoenix.BitmapFont"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</font>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color for the geometry</haxe_doc>
	</color>
	<bounds_wrap>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</bounds_wrap>
	<bounds>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</bounds>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
	<align_vertical>
		<t path="Null"><x path="phoenix.TextAlign"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</align_vertical>
	<align>
		<t path="Null"><x path="phoenix.TextAlign"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc></haxe_doc>
	</align>
</a></typedef>
	<typedef path="luxe.options.TilemapVisualOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TilemapOptions.hx" module="luxe.options.TilemapOptions">
		<a>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the visibility</haxe_doc>
			</visible>
			<scale>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</scale>
			<no_destroy>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</no_destroy>
			<immediate>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
			</immediate>
			<group>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry group id (see guides)</haxe_doc>
			</group>
			<grid>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</grid>
			<filter>
				<e path="phoenix.FilterType"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</filter>
			<depth>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the geometry depth value (see guides)</haxe_doc>
			</depth>
			<batcher>
				<c path="phoenix.Batcher"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
			</batcher>
		</a>
		<haxe_doc>Options specific to a `TilemapVisual`, part of a `Tilemap`</haxe_doc>
	</typedef>
	<typedef path="luxe.options.TilemapOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TilemapOptions.hx">
		<a>
			<y>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</x>
			<w>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</w>
			<tile_width>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</tile_width>
			<tile_height>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</tile_height>
			<orientation>
				<e path="luxe.tilemaps.TilemapOrientation"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</orientation>
			<h>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</h>
		</a>
		<haxe_doc>Options specific to a `Tilemap`</haxe_doc>
	</typedef>
	<typedef path="luxe.options.TileOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TilemapOptions.hx" module="luxe.options.TilemapOptions">
		<a>
			<y>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</y>
			<x>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</x>
			<layer>
				<c path="luxe.tilemaps.TileLayer"/>
				<haxe_doc></haxe_doc>
			</layer>
			<id>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</id>
		</a>
		<haxe_doc>Options specific to a `Tile`, part of a `Tilemap`</haxe_doc>
	</typedef>
	<typedef path="luxe.options.TileLayerOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TilemapOptions.hx" module="luxe.options.TilemapOptions">
		<a>
			<visible>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</visible>
			<opacity>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</opacity>
			<name>
				<c path="String"/>
				<haxe_doc></haxe_doc>
			</name>
			<map>
				<c path="luxe.tilemaps.Tilemap"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</map>
			<layer>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</layer>
			<fixed>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</fixed>
		</a>
		<haxe_doc>Options specific to a `TileLayer`, part of a `Tilemap`</haxe_doc>
	</typedef>
	<typedef path="luxe.options.TilesetOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TilemapOptions.hx" module="luxe.options.TilemapOptions">
		<a>
			<tile_width>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</tile_width>
			<tile_height>
				<x path="Int"/>
				<haxe_doc></haxe_doc>
			</tile_height>
			<texture>
				<c path="phoenix.Texture"/>
				<haxe_doc></haxe_doc>
			</texture>
			<spacing>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</spacing>
			<name>
				<c path="String"/>
				<haxe_doc></haxe_doc>
			</name>
			<margin>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</margin>
			<first_id>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc></haxe_doc>
			</first_id>
		</a>
		<haxe_doc>Options specific to a `Tileset`, part of a `Tilemap`</haxe_doc>
	</typedef>
	<typedef path="luxe.options.TransformProperties" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/TransformProperties.hx"><a>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
</a></typedef>
	<typedef path="luxe.options.VisualOptions" params="" file="/Users/sven/dev/luxe/luxe/luxe/options/VisualOptions.hx"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<size>
		<t path="luxe.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the size of the geometry to create</haxe_doc>
	</size>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<scene>
		<c path="luxe.Scene"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, add to given scene. If not set, will add to default scene (unless no_scene)</haxe_doc>
	</scene>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation_z>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the rotation around the z access, in degrees. convenience.</haxe_doc>
	</rotation_z>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<parent>
		<c path="luxe.Entity"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if set, set parent to given entity</haxe_doc>
	</parent>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_scene>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if true, do not add to any scene</haxe_doc>
	</no_scene>
	<no_geometry>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, no geometry will be created.</haxe_doc>
	</no_geometry>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<name_unique>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If shared names prefer a unique name, set this to true.   
            For example, `{ name:'enemy', name_unique:true }` would   
            generate a unique enemy.tp28h type of name for later filtering,   
            where the unique part would be the entity id</haxe_doc>
	</name_unique>
	<name>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the entity name. highly recommended you set this.</haxe_doc>
	</name>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<geometry>
		<c path="phoenix.geometry.Geometry"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, this geometry will be used instead.</haxe_doc>
	</geometry>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color for the geometry</haxe_doc>
	</color>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
</a></typedef>
	<enum path="luxe.resource.ResourceType" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/Resource.hx" module="luxe.resource.Resource">
		<unknown/>
		<text/>
		<json/>
		<data/>
		<texture/>
		<sound/>
		<render_texture/>
		<font/>
		<shader/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.resource.Resource" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/Resource.hx">
		<manager public="1"><c path="luxe.resource.ResourceManager"/></manager>
		<type public="1"><e path="luxe.resource.ResourceType"/></type>
		<id public="1"><c path="String"/></id>
		<persistent public="1"><x path="Bool"/></persistent>
		<time_to_load public="1"><x path="Float"/></time_to_load>
		<time_created public="1"><x path="Float"/></time_created>
		<dropped public="1"><x path="Bool"/></dropped>
		<drop public="1" set="method" line="44"><f a=""><x path="Void"/></f></drop>
		<new public="1" set="method" line="32"><f a="_manager:_type:?_load_time" v="::null">
	<c path="luxe.resource.ResourceManager"/>
	<e path="luxe.resource.ResourceType"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.resource.TextResource" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/Resource.hx" module="luxe.resource.Resource">
		<extends path="luxe.resource.Resource"/>
		<text public="1"><c path="String"/></text>
		<new public="1" set="method" line="61"><f a="_id:_text:_manager">
	<c path="String"/>
	<c path="String"/>
	<c path="luxe.resource.ResourceManager"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.resource.JSONResource" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/Resource.hx" module="luxe.resource.Resource">
		<extends path="luxe.resource.Resource"/>
		<json public="1"><d/></json>
		<new public="1" set="method" line="80"><f a="_id:_json:_manager">
	<c path="String"/>
	<d/>
	<c path="luxe.resource.ResourceManager"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.resource.DataResource" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/Resource.hx" module="luxe.resource.Resource">
		<extends path="luxe.resource.Resource"/>
		<data public="1"><t path="snow.utils.ByteArray"/></data>
		<new public="1" set="method" line="99"><f a="_id:_data:_manager">
	<c path="String"/>
	<t path="snow.utils.ByteArray"/>
	<c path="luxe.resource.ResourceManager"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.resource.SoundResource" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/Resource.hx" module="luxe.resource.Resource">
		<extends path="luxe.resource.Resource"/>
		<name public="1"><c path="String"/></name>
		<new public="1" set="method" line="119"><f a="_id:_name:_manager">
	<c path="String"/>
	<c path="String"/>
	<c path="luxe.resource.ResourceManager"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.resource.ResourceStats" params="" file="/Users/sven/dev/luxe/luxe/luxe/resource/ResourceManager.hx" module="luxe.resource.ResourceManager">
		<resources public="1"><x path="Int"/></resources>
		<fonts public="1"><x path="Int"/></fonts>
		<textures public="1"><x path="Int"/></textures>
		<render_textures public="1"><x path="Int"/></render_textures>
		<shaders public="1"><x path="Int"/></shaders>
		<texts public="1"><x path="Int"/></texts>
		<jsons public="1"><x path="Int"/></jsons>
		<datas public="1"><x path="Int"/></datas>
		<sounds public="1"><x path="Int"/></sounds>
		<unknown public="1"><x path="Int"/></unknown>
		<toString set="method" line="31"><f a=""><c path="String"/></f></toString>
		<reset public="1" set="method" line="48"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method" line="27"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.structural.BST" params="K:T" file="/Users/sven/dev/luxe/luxe/luxe/structural/BST.hx">
		<root public="1">
			<c path="luxe.structural.BSTNode">
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BST.T"/>
			</c>
			<haxe_doc>The tree root node</haxe_doc>
		</root>
		<compare public="1">
			<f a=":">
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BST.K"/>
				<x path="Int"/>
			</f>
			<haxe_doc>The current comparison functoin</haxe_doc>
		</compare>
		<empty public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether or not the tree is empty (i.e root == null)</haxe_doc>
		</empty>
		<size public="1" set="method" line="39">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the number of nodes in the tree</haxe_doc>
		</size>
		<depth public="1" set="method" line="46">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the depth of the tree</haxe_doc>
		</depth>
		<insert public="1" set="method" line="53">
			<f a="_key:_value">
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BST.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a node into the tree</haxe_doc>
		</insert>
		<contains public="1" set="method" line="60">
			<f a="_key">
				<c path="luxe.structural.BST.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the tree contains the key for this node</haxe_doc>
		</contains>
		<find public="1" set="method" line="68">
			<f a="_key">
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BST.T"/>
			</f>
			<haxe_doc>Returns a node by key, if found. null otherwise</haxe_doc>
		</find>
		<rank public="1" set="method" line="76">
			<f a="_key">
				<c path="luxe.structural.BST.K"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the number of nodes to the left of this node, by key.   
            http://en.wikipedia.org/wiki/Order_statistic_tree</haxe_doc>
		</rank>
		<select public="1" set="method" line="84">
			<f a="_rank">
				<x path="Int"/>
				<c path="luxe.structural.BST.K"/>
			</f>
			<haxe_doc>Find a key by rank in the tree, i.e given a number of nodes, the key at this point.   
            http://en.wikipedia.org/wiki/Order_statistic_tree</haxe_doc>
		</select>
		<smallest public="1" set="method" line="97">
			<f a=""><c path="luxe.structural.BST.K"/></f>
			<haxe_doc>return the smallest node (key) in the tree (most left)</haxe_doc>
		</smallest>
		<largest public="1" set="method" line="110">
			<f a=""><c path="luxe.structural.BST.K"/></f>
			<haxe_doc>return the largest node (key) in the tree (most right)</haxe_doc>
		</largest>
		<remove public="1" set="method" line="123">
			<f a="_key">
				<c path="luxe.structural.BST.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>remove a node by key. return false if the operation fails (i.e the node is not stored in this tree)</haxe_doc>
		</remove>
		<remove_smallest public="1" set="method" line="136">
			<f a=""><x path="Void"/></f>
			<haxe_doc>remove the smallest node in the tree (most left)</haxe_doc>
		</remove_smallest>
		<remove_largest public="1" set="method" line="143">
			<f a=""><x path="Void"/></f>
			<haxe_doc>remove the largest node in the tree (most right)</haxe_doc>
		</remove_largest>
		<floor public="1" set="method" line="150">
			<f a="_key">
				<c path="luxe.structural.BST.K"/>
				<t path="Null"><c path="luxe.structural.BST.K"/></t>
			</f>
			<haxe_doc>tree floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="163">
			<f a="_key">
				<c path="luxe.structural.BST.K"/>
				<t path="Null"><c path="luxe.structural.BST.K"/></t>
			</f>
			<haxe_doc>tree ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</ceil>
		<toArray public="1" set="method" line="176">
			<f a=""><c path="Array"><c path="luxe.structural.BST.T"/></c></f>
			<haxe_doc>return an array of the values in this tree</haxe_doc>
		</toArray>
		<keys public="1" set="method" line="189">
			<f a=""><c path="Array"><c path="luxe.structural.BST.K"/></c></f>
			<haxe_doc>Return an array of the keys in this tree</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="203">
			<f a=""><t path="Iterator"><c path="luxe.structural.BST.T"/></t></f>
			<haxe_doc>returns an iterator from a conversion to array of this tree. Usable as `for(item in tree)`
            :todo: This should traverse directly and implement IIterator</haxe_doc>
		</iterator>
		<traverse_node public="1" set="method" line="210">
			<f a="_node:_method:_on_traverse">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<e path="luxe.structural.BSTTraverseMethod"/>
				<f a="">
					<c path="luxe.structural.BSTNode">
						<c path="luxe.structural.BST.K"/>
						<c path="luxe.structural.BST.T"/>
					</c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Traverse a node with the given method, and call the given function for each node traversed</haxe_doc>
		</traverse_node>
		<get_empty set="method" line="240"><f a=""><x path="Bool"/></f></get_empty>
		<node_depth set="method" line="247">
			<f a="_node">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<x path="Int"/>
			</f>
			<haxe_doc>the depth of a single node</haxe_doc>
		</node_depth>
		<node_count set="method" line="263">
			<f a="_node">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<x path="Int"/>
			</f>
			<haxe_doc>the node count/children of a single node</haxe_doc>
		</node_count>
		<node_insert set="method" line="270">
			<f a="_node:_key:_value">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BST.T"/>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>insert a single node</haxe_doc>
		</node_insert>
		<node_update_count set="method" line="300"><f a="_node">
	<c path="luxe.structural.BSTNode">
		<c path="luxe.structural.BST.K"/>
		<c path="luxe.structural.BST.T"/>
	</c>
	<c path="luxe.structural.BSTNode">
		<c path="luxe.structural.BST.K"/>
		<c path="luxe.structural.BST.T"/>
	</c>
</f></node_update_count>
		<node_find set="method" line="309">
			<f a="_node:_key">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BST.T"/>
			</f>
			<haxe_doc>find a single node</haxe_doc>
		</node_find>
		<node_rank set="method" line="328">
			<f a="_key:_node">
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<x path="Int"/>
			</f>
			<haxe_doc>find rank of single node</haxe_doc>
		</node_rank>
		<node_select set="method" line="347">
			<f a="_node:_rank">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<x path="Int"/>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>find key of node by rank</haxe_doc>
		</node_select>
		<node_smallest set="method" line="366">
			<f a="_node">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>find smallest of the given node</haxe_doc>
		</node_smallest>
		<node_largest set="method" line="377">
			<f a="_node">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>find largest of the given node</haxe_doc>
		</node_largest>
		<node_floor set="method" line="388">
			<f a="_node:_key">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>node floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</node_floor>
		<node_ceil set="method" line="413">
			<f a="_node:_key">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>node ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</node_ceil>
		<node_remove_smallest set="method" line="442">
			<f a="_node">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>remove the smallest node in the tree (most left)</haxe_doc>
		</node_remove_smallest>
		<node_remove_largest set="method" line="456">
			<f a="_node">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>remove the largest node in the tree (most right)</haxe_doc>
		</node_remove_largest>
		<node_remove set="method" line="470">
			<f a="_node:_key">
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
				<c path="luxe.structural.BST.K"/>
				<c path="luxe.structural.BSTNode">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.T"/>
				</c>
			</f>
			<haxe_doc>remove a single node by key</haxe_doc>
		</node_remove>
		<new public="1" set="method" line="30">
			<f a="compare_function">
				<f a=":">
					<c path="luxe.structural.BST.K"/>
					<c path="luxe.structural.BST.K"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new BST with the given comparison function</haxe_doc>
		</new>
		<haxe_doc>Copyright 2014 Sven Bergström

    A unbalanced binary search tree,
    implemented based on various stack overflow answers,
    wikipedia articles and books read over the years.
    some other references : https://github.com/polygonal/ds

    Part of the structural library for haxe
    http://github.com/underscorediscovery/structural

    MIT license</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="luxe.structural.BSTNode" params="K:T" file="/Users/sven/dev/luxe/luxe/luxe/structural/BST.hx" module="luxe.structural.BST">
		<left public="1">
			<c path="luxe.structural.BSTNode">
				<c path="luxe.structural.BSTNode.K"/>
				<c path="luxe.structural.BSTNode.T"/>
			</c>
			<haxe_doc>The node left of this node (less than)</haxe_doc>
		</left>
		<right public="1">
			<c path="luxe.structural.BSTNode">
				<c path="luxe.structural.BSTNode.K"/>
				<c path="luxe.structural.BSTNode.T"/>
			</c>
			<haxe_doc>The node right of this node (bigger than)</haxe_doc>
		</right>
		<nodecount public="1">
			<x path="Int"/>
			<haxe_doc>The node count of this node, including itself</haxe_doc>
		</nodecount>
		<key public="1">
			<c path="luxe.structural.BSTNode.K"/>
			<haxe_doc>The key used to compare this node</haxe_doc>
		</key>
		<value public="1">
			<c path="luxe.structural.BSTNode.T"/>
			<haxe_doc>The value this node holds</haxe_doc>
		</value>
		<new public="1" set="method" line="526">
			<f a="_key:_value:_nodecount">
				<c path="luxe.structural.BSTNode.K"/>
				<c path="luxe.structural.BSTNode.T"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new node with given key, value, count. Use `insert` on the tree instead.</haxe_doc>
		</new>
		<haxe_doc>A binary search tree node by `K` key and `T` value (type)</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<enum path="luxe.structural.BSTTraverseMethod" params="" file="/Users/sven/dev/luxe/luxe/luxe/structural/BST.hx" module="luxe.structural.BST">
		<order_pre/>
		<order_retain/>
		<order_post/>
		<haxe_doc>A traversal method for iterating a node in the tree</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.structural.Bag" params="T" file="/Users/sven/dev/luxe/luxe/luxe/structural/Bag.hx">
		<length public="1" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The length of this stack. If 0, the stack is empty</haxe_doc>
		</length>
		<root public="1">
			<c path="luxe.structural._Bag.BagNode"><c path="luxe.structural.Bag.T"/></c>
			<haxe_doc>The first node in the bag, or null if empty</haxe_doc>
		</root>
		<add public="1" set="method" line="32">
			<f a="item">
				<c path="luxe.structural.Bag.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add an item to this bag</haxe_doc>
		</add>
		<toArray public="1" set="method" line="45">
			<f a=""><c path="Array"><c path="luxe.structural.Bag.T"/></c></f>
			<haxe_doc>Convert the items in the bag to an array</haxe_doc>
		</toArray>
		<iterator public="1" set="method" line="65">
			<f a=""><t path="Iterator"><c path="luxe.structural.Bag.T"/></t></f>
			<haxe_doc>create an iterator for the bag. Usable as `for(item in bag)`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<haxe_doc>construct a new bag</haxe_doc>
		</new>
		<haxe_doc>Copyright 2014 Sven Bergström
    A simple generic linked list based Bag.

    Part of the structural library for haxe
    http://github.com/underscorediscovery/structural

    MIT license</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="luxe.structural._Bag.BagNode" params="T" file="/Users/sven/dev/luxe/luxe/luxe/structural/Bag.hx" private="1" module="luxe.structural.Bag">
		<value public="1">
			<c path="luxe.structural._Bag.BagNode.T"/>
			<haxe_doc>the node value</haxe_doc>
		</value>
		<next public="1">
			<c path="luxe.structural._Bag.BagNode"><c path="luxe.structural._Bag.BagNode.T"/></c>
			<haxe_doc>The next node in the linked list</haxe_doc>
		</next>
		<new public="1" set="method" line="80"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.structural.BalancedBST" params="K:T" file="/Users/sven/dev/luxe/luxe/luxe/structural/BalancedBST.hx">
		<root public="1">
			<c path="luxe.structural.BalancedBSTNode">
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBST.T"/>
			</c>
			<haxe_doc>The tree root node</haxe_doc>
		</root>
		<compare public="1">
			<f a=":">
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBST.K"/>
				<x path="Int"/>
			</f>
			<haxe_doc>The current comparison functoin</haxe_doc>
		</compare>
		<empty public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether or not the tree is empty (i.e root == null)</haxe_doc>
		</empty>
		<_array public="1">
			<c path="Array"><c path="luxe.structural.BalancedBST.T"/></c>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Internal array cache for iterator :todo : short term</haxe_doc>
		</_array>
		<size public="1" set="method" line="42">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the number of nodes in the tree</haxe_doc>
		</size>
		<depth public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the depth of the tree</haxe_doc>
		</depth>
		<insert public="1" set="method" line="56">
			<f a="_key:_value">
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBST.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a node into the tree</haxe_doc>
		</insert>
		<contains public="1" set="method" line="67">
			<f a="_key">
				<c path="luxe.structural.BalancedBST.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the tree contains the key for this node</haxe_doc>
		</contains>
		<find public="1" set="method" line="75">
			<f a="_key">
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBST.T"/>
			</f>
			<haxe_doc>Returns a node by key, if found. null otherwise</haxe_doc>
		</find>
		<rank public="1" set="method" line="83">
			<f a="_key">
				<c path="luxe.structural.BalancedBST.K"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the number of nodes to the left of this node, by key.   
            http://en.wikipedia.org/wiki/Order_statistic_tree</haxe_doc>
		</rank>
		<select public="1" set="method" line="91">
			<f a="_rank">
				<x path="Int"/>
				<c path="luxe.structural.BalancedBST.K"/>
			</f>
			<haxe_doc>Find a key by rank in the tree, i.e given a number of nodes, the key at this point.   
            http://en.wikipedia.org/wiki/Order_statistic_tree</haxe_doc>
		</select>
		<smallest public="1" set="method" line="104">
			<f a=""><c path="luxe.structural.BalancedBST.K"/></f>
			<haxe_doc>return the smallest node (key) in the tree (most left)</haxe_doc>
		</smallest>
		<largest public="1" set="method" line="117">
			<f a=""><c path="luxe.structural.BalancedBST.K"/></f>
			<haxe_doc>return the largest node (key) in the tree (most right)</haxe_doc>
		</largest>
		<remove public="1" set="method" line="130">
			<f a="_key">
				<c path="luxe.structural.BalancedBST.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>remove a node by key. return false if the operation fails (i.e the node is not stored in this tree)</haxe_doc>
		</remove>
		<remove_smallest public="1" set="method" line="154">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>remove the smallest node in the tree (most left)</haxe_doc>
		</remove_smallest>
		<remove_largest public="1" set="method" line="174">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>remove the largest node in the tree (most right)</haxe_doc>
		</remove_largest>
		<floor public="1" set="method" line="195">
			<f a="_key">
				<c path="luxe.structural.BalancedBST.K"/>
				<t path="Null"><c path="luxe.structural.BalancedBST.K"/></t>
			</f>
			<haxe_doc>tree floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="208">
			<f a="_key">
				<c path="luxe.structural.BalancedBST.K"/>
				<t path="Null"><c path="luxe.structural.BalancedBST.K"/></t>
			</f>
			<haxe_doc>tree ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</ceil>
		<toArray public="1" set="method" line="221">
			<f a=""><c path="Array"><c path="luxe.structural.BalancedBST.T"/></c></f>
			<haxe_doc>return an array of the values in this tree</haxe_doc>
		</toArray>
		<keys public="1" set="method" line="234">
			<f a=""><c path="Array"><c path="luxe.structural.BalancedBST.K"/></c></f>
			<haxe_doc>Return an array of the keys in this tree</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="248">
			<f a=""><t path="Iterator"><c path="luxe.structural.BalancedBST.T"/></t></f>
			<haxe_doc>returns an iterator from a conversion to array of this tree. Usable as `for(item in tree)`   
            :todo: This should traverse directly and implement IIterator</haxe_doc>
		</iterator>
		<traverse_node public="1" set="method" line="256">
			<f a="_node:_method:_on_traverse">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<e path="luxe.structural.BalancedBSTTraverseMethod"/>
				<f a="">
					<c path="luxe.structural.BalancedBSTNode">
						<c path="luxe.structural.BalancedBST.K"/>
						<c path="luxe.structural.BalancedBST.T"/>
					</c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Traverse a node with the given method, and call the given function for each node traversed</haxe_doc>
		</traverse_node>
		<get_empty set="method" line="286"><f a=""><x path="Bool"/></f></get_empty>
		<node_depth set="method" line="293">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<x path="Int"/>
			</f>
			<haxe_doc>the depth of a single node</haxe_doc>
		</node_depth>
		<node_count set="method" line="309">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<x path="Int"/>
			</f>
			<haxe_doc>the node count/children of a single node</haxe_doc>
		</node_count>
		<node_insert set="method" line="316">
			<f a="_node:_key:_value">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBST.T"/>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>insert a single node</haxe_doc>
		</node_insert>
		<node_update_count set="method" line="360"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
</f></node_update_count>
		<node_find set="method" line="369">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBST.T"/>
			</f>
			<haxe_doc>find a single node</haxe_doc>
		</node_find>
		<node_rank set="method" line="388">
			<f a="_key:_node">
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<x path="Int"/>
			</f>
			<haxe_doc>find rank of single node</haxe_doc>
		</node_rank>
		<node_select set="method" line="407">
			<f a="_node:_rank">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<x path="Int"/>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>find key of node by rank</haxe_doc>
		</node_select>
		<node_smallest set="method" line="426">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>find smallest of the given node</haxe_doc>
		</node_smallest>
		<node_largest set="method" line="437">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>find largest of the given node</haxe_doc>
		</node_largest>
		<node_floor set="method" line="448">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>node floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</node_floor>
		<node_ceil set="method" line="473">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>node ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</node_ceil>
		<node_remove_smallest set="method" line="502">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>remove the smallest node in the tree (most left)</haxe_doc>
		</node_remove_smallest>
		<node_remove_largest set="method" line="520">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>remove the largest node in the tree (most right)</haxe_doc>
		</node_remove_largest>
		<node_remove set="method" line="542">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBST.K"/>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<haxe_doc>remove a single node by key</haxe_doc>
		</node_remove>
		<is_red get="inline" set="null" line="589"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
	<x path="Bool"/>
</f></is_red>
		<rotate_left public="1" set="method" line="599">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</rotate_left>
		<rotate_right public="1" set="method" line="618">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</rotate_right>
		<swap_color public="1" set="method" line="637">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.T"/>
				</c>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</swap_color>
		<move_red_left set="method" line="645"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
</f></move_red_left>
		<move_red_right set="method" line="657"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
</f></move_red_right>
		<balance set="method" line="668"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
	<c path="luxe.structural.BalancedBSTNode">
		<c path="luxe.structural.BalancedBST.K"/>
		<c path="luxe.structural.BalancedBST.T"/>
	</c>
</f></balance>
		<new public="1" set="method" line="32">
			<f a="compare_function">
				<f a=":">
					<c path="luxe.structural.BalancedBST.K"/>
					<c path="luxe.structural.BalancedBST.K"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new balanced BST with the given comparison function</haxe_doc>
		</new>
		<haxe_doc>Copyright 2014 Sven Bergström

    A balanced binary search tree,
    implemented based on various stack overflow answers,
    wikipedia articles and books read over the years.
    some other references : https://github.com/polygonal/ds

    Part of the structural library for haxe
    http://github.com/underscorediscovery/structural

    MIT License</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="luxe.structural._BalancedBST.NodeColor" params="" file="/Users/sven/dev/luxe/luxe/luxe/structural/BalancedBST.hx" private="1" module="luxe.structural.BalancedBST">
		<red public="1" get="inline" set="null" line="692" static="1"><x path="Bool"/></red>
		<black public="1" get="inline" set="null" line="693" static="1"><x path="Bool"/></black>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.structural.BalancedBSTNode" params="K:T" file="/Users/sven/dev/luxe/luxe/luxe/structural/BalancedBST.hx" module="luxe.structural.BalancedBST">
		<left public="1">
			<c path="luxe.structural.BalancedBSTNode">
				<c path="luxe.structural.BalancedBSTNode.K"/>
				<c path="luxe.structural.BalancedBSTNode.T"/>
			</c>
			<haxe_doc>The node left of this node (less than)</haxe_doc>
		</left>
		<right public="1">
			<c path="luxe.structural.BalancedBSTNode">
				<c path="luxe.structural.BalancedBSTNode.K"/>
				<c path="luxe.structural.BalancedBSTNode.T"/>
			</c>
			<haxe_doc>The node right of this node (bigger than)</haxe_doc>
		</right>
		<nodecount public="1">
			<x path="Int"/>
			<haxe_doc>The node count of this node, including itself</haxe_doc>
		</nodecount>
		<color public="1">
			<x path="Bool"/>
			<haxe_doc>The node color, red or black, for maintaining balance</haxe_doc>
		</color>
		<key public="1">
			<c path="luxe.structural.BalancedBSTNode.K"/>
			<haxe_doc>The key used to compare this node</haxe_doc>
		</key>
		<value public="1">
			<c path="luxe.structural.BalancedBSTNode.T"/>
			<haxe_doc>The value this node holds</haxe_doc>
		</value>
		<new public="1" set="method" line="716">
			<f a="_key:_value:_node_count:_color">
				<c path="luxe.structural.BalancedBSTNode.K"/>
				<c path="luxe.structural.BalancedBSTNode.T"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new node with given key, value, count and color. Use `insert` on the tree instead.</haxe_doc>
		</new>
		<haxe_doc>A balanced binary search tree node by `K` key and `T` value (type)</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<enum path="luxe.structural.BalancedBSTTraverseMethod" params="" file="/Users/sven/dev/luxe/luxe/luxe/structural/BalancedBST.hx" module="luxe.structural.BalancedBST">
		<order_pre/>
		<order_retain/>
		<order_post/>
		<haxe_doc>A traversal method for iterating a node in the tree</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry" params="" file="/Users/sven/dev/luxe/luxe/luxe/structural/BalancedBST.hx">
		<left public="1">
			<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			<haxe_doc>The node left of this node (less than)</haxe_doc>
		</left>
		<right public="1">
			<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			<haxe_doc>The node right of this node (bigger than)</haxe_doc>
		</right>
		<nodecount public="1">
			<x path="Int"/>
			<haxe_doc>The node count of this node, including itself</haxe_doc>
		</nodecount>
		<color public="1">
			<x path="Bool"/>
			<haxe_doc>The node color, red or black, for maintaining balance</haxe_doc>
		</color>
		<key public="1">
			<c path="phoenix.geometry.GeometryKey"/>
			<haxe_doc>The key used to compare this node</haxe_doc>
		</key>
		<value public="1">
			<c path="phoenix.geometry.Geometry"/>
			<haxe_doc>The value this node holds</haxe_doc>
		</value>
		<new public="1" set="method" line="716">
			<f a="_key:_value:_node_count:_color">
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="phoenix.geometry.Geometry"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new node with given key, value, count and color. Use `insert` on the tree instead.</haxe_doc>
		</new>
	</class>
	<class path="luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry" params="" file="/Users/sven/dev/luxe/luxe/luxe/structural/BalancedBST.hx">
		<root public="1">
			<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			<haxe_doc>The tree root node</haxe_doc>
		</root>
		<compare public="1">
			<f a=":">
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="phoenix.geometry.GeometryKey"/>
				<x path="Int"/>
			</f>
			<haxe_doc>The current comparison functoin</haxe_doc>
		</compare>
		<empty public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Whether or not the tree is empty (i.e root == null)</haxe_doc>
		</empty>
		<_array public="1">
			<c path="Array"><c path="phoenix.geometry.Geometry"/></c>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Internal array cache for iterator :todo : short term</haxe_doc>
		</_array>
		<size public="1" set="method" line="42">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the number of nodes in the tree</haxe_doc>
		</size>
		<depth public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Return the depth of the tree</haxe_doc>
		</depth>
		<insert public="1" set="method" line="56">
			<f a="_key:_value">
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="phoenix.geometry.Geometry"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Insert a node into the tree</haxe_doc>
		</insert>
		<contains public="1" set="method" line="67">
			<f a="_key">
				<c path="phoenix.geometry.GeometryKey"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if the tree contains the key for this node</haxe_doc>
		</contains>
		<find public="1" set="method" line="75">
			<f a="_key">
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="phoenix.geometry.Geometry"/>
			</f>
			<haxe_doc>Returns a node by key, if found. null otherwise</haxe_doc>
		</find>
		<rank public="1" set="method" line="83">
			<f a="_key">
				<c path="phoenix.geometry.GeometryKey"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return the number of nodes to the left of this node, by key.   
            http://en.wikipedia.org/wiki/Order_statistic_tree</haxe_doc>
		</rank>
		<select public="1" set="method" line="91">
			<f a="_rank">
				<x path="Int"/>
				<c path="phoenix.geometry.GeometryKey"/>
			</f>
			<haxe_doc>Find a key by rank in the tree, i.e given a number of nodes, the key at this point.   
            http://en.wikipedia.org/wiki/Order_statistic_tree</haxe_doc>
		</select>
		<smallest public="1" set="method" line="104">
			<f a=""><c path="phoenix.geometry.GeometryKey"/></f>
			<haxe_doc>return the smallest node (key) in the tree (most left)</haxe_doc>
		</smallest>
		<largest public="1" set="method" line="117">
			<f a=""><c path="phoenix.geometry.GeometryKey"/></f>
			<haxe_doc>return the largest node (key) in the tree (most right)</haxe_doc>
		</largest>
		<remove public="1" set="method" line="130">
			<f a="_key">
				<c path="phoenix.geometry.GeometryKey"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>remove a node by key. return false if the operation fails (i.e the node is not stored in this tree)</haxe_doc>
		</remove>
		<remove_smallest public="1" set="method" line="154">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>remove the smallest node in the tree (most left)</haxe_doc>
		</remove_smallest>
		<remove_largest public="1" set="method" line="174">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>remove the largest node in the tree (most right)</haxe_doc>
		</remove_largest>
		<floor public="1" set="method" line="195">
			<f a="_key">
				<c path="phoenix.geometry.GeometryKey"/>
				<t path="Null"><c path="phoenix.geometry.GeometryKey"/></t>
			</f>
			<haxe_doc>tree floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="208">
			<f a="_key">
				<c path="phoenix.geometry.GeometryKey"/>
				<t path="Null"><c path="phoenix.geometry.GeometryKey"/></t>
			</f>
			<haxe_doc>tree ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</ceil>
		<toArray public="1" set="method" line="221">
			<f a=""><c path="Array"><c path="phoenix.geometry.Geometry"/></c></f>
			<haxe_doc>return an array of the values in this tree</haxe_doc>
		</toArray>
		<keys public="1" set="method" line="234">
			<f a=""><c path="Array"><c path="phoenix.geometry.GeometryKey"/></c></f>
			<haxe_doc>Return an array of the keys in this tree</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="248">
			<f a=""><t path="Iterator"><c path="phoenix.geometry.Geometry"/></t></f>
			<haxe_doc>returns an iterator from a conversion to array of this tree. Usable as `for(item in tree)`   
            :todo: This should traverse directly and implement IIterator</haxe_doc>
		</iterator>
		<traverse_node public="1" set="method" line="256">
			<f a="_node:_method:_on_traverse">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<e path="luxe.structural.BalancedBSTTraverseMethod"/>
				<f a="">
					<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Traverse a node with the given method, and call the given function for each node traversed</haxe_doc>
		</traverse_node>
		<get_empty set="method" line="286"><f a=""><x path="Bool"/></f></get_empty>
		<node_depth set="method" line="293">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<x path="Int"/>
			</f>
			<haxe_doc>the depth of a single node</haxe_doc>
		</node_depth>
		<node_count set="method" line="309">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<x path="Int"/>
			</f>
			<haxe_doc>the node count/children of a single node</haxe_doc>
		</node_count>
		<node_insert set="method" line="316">
			<f a="_node:_key:_value">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="phoenix.geometry.Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>insert a single node</haxe_doc>
		</node_insert>
		<node_update_count set="method" line="360"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
</f></node_update_count>
		<node_find set="method" line="369">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="phoenix.geometry.Geometry"/>
			</f>
			<haxe_doc>find a single node</haxe_doc>
		</node_find>
		<node_rank set="method" line="388">
			<f a="_key:_node">
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<x path="Int"/>
			</f>
			<haxe_doc>find rank of single node</haxe_doc>
		</node_rank>
		<node_select set="method" line="407">
			<f a="_node:_rank">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<x path="Int"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>find key of node by rank</haxe_doc>
		</node_select>
		<node_smallest set="method" line="426">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>find smallest of the given node</haxe_doc>
		</node_smallest>
		<node_largest set="method" line="437">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>find largest of the given node</haxe_doc>
		</node_largest>
		<node_floor set="method" line="448">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>node floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</node_floor>
		<node_ceil set="method" line="473">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>node ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions</haxe_doc>
		</node_ceil>
		<node_remove_smallest set="method" line="502">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>remove the smallest node in the tree (most left)</haxe_doc>
		</node_remove_smallest>
		<node_remove_largest set="method" line="520">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>remove the largest node in the tree (most right)</haxe_doc>
		</node_remove_largest>
		<node_remove set="method" line="542">
			<f a="_node:_key">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="phoenix.geometry.GeometryKey"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<haxe_doc>remove a single node by key</haxe_doc>
		</node_remove>
		<is_red get="inline" set="null" line="589"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<x path="Bool"/>
</f></is_red>
		<rotate_left public="1" set="method" line="599">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</rotate_left>
		<rotate_right public="1" set="method" line="618">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</rotate_right>
		<swap_color public="1" set="method" line="637">
			<f a="_node">
				<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</swap_color>
		<move_red_left set="method" line="645"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
</f></move_red_left>
		<move_red_right set="method" line="657"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
</f></move_red_right>
		<balance set="method" line="668"><f a="_node">
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
	<c path="luxe.structural.BalancedBSTNode_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/>
</f></balance>
		<new public="1" set="method" line="32">
			<f a="compare_function">
				<f a=":">
					<c path="phoenix.geometry.GeometryKey"/>
					<c path="phoenix.geometry.GeometryKey"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new balanced BST with the given comparison function</haxe_doc>
		</new>
	</class>
	<class path="luxe.structural.Heap" params="T" file="/Users/sven/dev/luxe/luxe/luxe/structural/Heap.hx">
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<heap><c path="Array"><t path="Null"><c path="luxe.structural.Heap.T"/></t></c></heap>
		<size><x path="Int"/></size>
		<count><x path="Int"/></count>
		<compare><f a=":">
	<t path="Null"><c path="luxe.structural.Heap.T"/></t>
	<t path="Null"><c path="luxe.structural.Heap.T"/></t>
	<x path="Float"/>
</f></compare>
		<getFront public="1" set="method" line="68">
			<f a=""><t path="Null"><c path="luxe.structural.Heap.T"/></t></f>
			<haxe_doc>The heap's front item.</haxe_doc>
		</getFront>
		<getMaxSize public="1" set="method" line="75">
			<f a=""><x path="Int"/></f>
			<haxe_doc>The heap's maximum capacity.</haxe_doc>
		</getMaxSize>
		<enqueue public="1" set="method" line="82">
			<f a="obj">
				<t path="Null"><c path="luxe.structural.Heap.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Enqueues an object. Returns false if the hash is full, otherwise true.</haxe_doc>
		</enqueue>
		<reset public="1" set="method" line="112"><f a=""><x path="Void"/></f></reset>
		<dequeue public="1" set="method" line="127">
			<f a=""><t path="Null"><c path="luxe.structural.Heap.T"/></t></f>
			<haxe_doc>Dequeues and returns the front item. If the hash is empty, this returns
        null.</haxe_doc>
		</dequeue>
		<contains public="1" set="method" line="165">
			<f a="obj">
				<t path="Null"><c path="luxe.structural.Heap.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if a given item exists in the heap</haxe_doc>
		</contains>
		<clear public="1" set="method" line="173"><f a=""><x path="Void"/></f></clear>
		<iterator public="1" set="method" line="179"><f a=""><t path="Iterator"><t path="Null"><c path="luxe.structural.Heap.T"/></t></t></f></iterator>
		<get_length set="method" line="183"><f a=""><x path="Int"/></f></get_length>
		<isEmpty public="1" set="method" line="188"><f a=""><x path="Bool"/></f></isEmpty>
		<toArray public="1" set="method" line="192"><f a=""><c path="Array"><t path="Null"><c path="luxe.structural.Heap.T"/></t></c></f></toArray>
		<toString set="method" line="200">
			<f a=""><c path="String"/></f>
			<haxe_doc>Prints out a string representing the current object.
        Example: "[Heap, max_size=4]"</haxe_doc>
		</toString>
		<dump public="1" set="method" line="207">
			<f a=""><c path="String"/></f>
			<haxe_doc>Prints out all elements (for debug/demo purposes).</haxe_doc>
		</dump>
		<new public="1" set="method" line="51">
			<f a="_size:_compare">
				<x path="Int"/>
				<f a=":">
					<t path="Null"><c path="luxe.structural.Heap.T"/></t>
					<t path="Null"><c path="luxe.structural.Heap.T"/></t>
					<x path="Float"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Initializes a new heap.
        [size] is the heap's maximum capacity.
        [compare] is a comparison function for sorting the heap's data.</haxe_doc>
		</new>
		<haxe_doc>Copyright (c) 2008 Chase Kernan, Laurence Taylor
chase.kernan@gmail.com, polysemantic@gmail.com
Based off of Michael Baczynski's as3ds project, http://www.polygonal.de.

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="luxe.structural.Pool" params="T" file="/Users/sven/dev/luxe/luxe/luxe/structural/Pool.hx">
		<length public="1">
			<x path="Int"/>
			<haxe_doc>The size of the pool</haxe_doc>
		</length>
		<items public="1">
			<c path="Array"><c path="luxe.structural.Pool.T"/></c>
			<haxe_doc>The items in the pool</haxe_doc>
		</items>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The current index in the pool</haxe_doc>
		</index>
		<precache><x path="Bool"/></precache>
		<_create><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="luxe.structural.Pool.T"/>
</f></_create>
		<get public="1" set="method" line="44">
			<f a=""><c path="luxe.structural.Pool.T"/></f>
			<haxe_doc>get the next available item from the pool, creating if needed, or from the cache. If the pool max has been reached the pool will wrap around to the oldest item in the pool.</haxe_doc>
		</get>
		<new public="1" set="method" line="28">
			<f a="pool_size:create_callback:?_precache" v="::true">
				<x path="Int"/>
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<c path="luxe.structural.Pool.T"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new pool with fixed size, on_create callback and cache flag. By default precache sis true.</haxe_doc>
		</new>
		<haxe_doc>Copyright 2014 Sven Bergström
    A simple cacheable pool type with on create callback

    Part of the structural library for haxe
    http://github.com/underscorediscovery/structural

    MIT license</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="luxe.structural.Stack" params="T" file="/Users/sven/dev/luxe/luxe/luxe/structural/Stack.hx">
		<length public="1" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The length of this stack. If 0, the stack is empty</haxe_doc>
		</length>
		<root public="1">
			<c path="luxe.structural.StackNode"><c path="luxe.structural.Stack.T"/></c>
			<haxe_doc>The first node in the stack, or null if empty</haxe_doc>
		</root>
		<push public="1" set="method" line="30">
			<f a="node">
				<c path="luxe.structural.Stack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Push a node onto the back of the queue. node cannot be null</haxe_doc>
		</push>
		<pop public="1" set="method" line="48">
			<f a=""><c path="luxe.structural.Stack.T"/></f>
			<haxe_doc>Pop the back item off the stack. If the queue is empty, returns null</haxe_doc>
		</pop>
		<top public="1" set="method" line="64">
			<f a=""><c path="luxe.structural.Stack.T"/></f>
			<haxe_doc>Return the top item of the stack, or null if empty</haxe_doc>
		</top>
		<toArray public="1" set="method" line="75">
			<f a=""><c path="Array"><c path="luxe.structural.Stack.T"/></c></f>
			<haxe_doc>Convert the items in the stack to an array</haxe_doc>
		</toArray>
		<iterator public="1" set="method" line="95">
			<f a=""><t path="Iterator"><c path="luxe.structural.Stack.T"/></t></f>
			<haxe_doc>create an iterator for the stack. Usable as `for(item in stack)`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Copyright 2014 Sven Bergström
    A simple generic linked list based Stack.

    Part of the structural library for haxe
    http://github.com/underscorediscovery/structural

    MIT license</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="luxe.structural.StackNode" params="T" file="/Users/sven/dev/luxe/luxe/luxe/structural/Stack.hx" module="luxe.structural.Stack">
		<value public="1">
			<c path="luxe.structural.StackNode.T"/>
			<haxe_doc>the node value</haxe_doc>
		</value>
		<next public="1">
			<c path="luxe.structural.StackNode"><c path="luxe.structural.StackNode.T"/></c>
			<haxe_doc>The next node in the linked list</haxe_doc>
		</next>
		<new public="1" set="method" line="111"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A single stack node holding</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.Isometric" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Isometric.hx">
		<worldpos_to_tile_coord public="1" set="method" line="19" static="1"><f a="world_x:world_y:tile_width:tile_height:?scale" v="::::1.0f">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></worldpos_to_tile_coord>
		<tile_coord_to_worldpos public="1" set="method" line="33" static="1"><f a="tile_x:tile_y:tile_width:tile_height:?scale:?offset_x:?offset_y" v="::::1.0f:null:null">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<e path="luxe.tilemaps.TileOffset"/>
	<e path="luxe.tilemaps.TileOffset"/>
	<c path="phoenix.Vector"/>
</f></tile_coord_to_worldpos>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.TilemapVisual" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap">
		<geometry public="1"><x path="Map">
	<c path="String"/>
	<t path="luxe.tilemaps.TilemapVisualLayerGeometry"/>
</x></geometry>
		<map public="1"><c path="luxe.tilemaps.Tilemap"/></map>
		<options public="1"><t path="luxe.options.TilemapVisualOptions"/></options>
		<create public="1" set="method" line="35"><f a=""><x path="Void"/></f></create>
		<geometry_for_tile public="1" set="method" line="46"><f a="_layer:x:y">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="phoenix.geometry.Geometry"/>
</f></geometry_for_tile>
		<geometry_for_layer public="1" set="method" line="59"><f a="_layer">
	<c path="String"/>
	<t path="luxe.tilemaps.TilemapVisualLayerGeometry"/>
</f></geometry_for_layer>
		<default_options set="method" line="69"><f a=""><x path="Void"/></f></default_options>
		<create_tile_for_layer set="method" line="80"><f a="layer:x:y">
	<c path="luxe.tilemaps.TileLayer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="phoenix.geometry.Geometry"/>
</f></create_tile_for_layer>
		<update_tile_id set="method" line="87"><f a="_geom:_layer_name:_x:_y:_id">
	<c path="phoenix.geometry.Geometry"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update_tile_id>
		<refresh_tile_id public="1" set="method" line="95">
			<f a="_layer_name:_x:_y:_id">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update the visual to match a new tile id at a given coordinate.
            This is called automatically when you set a `Tile` ID in a map, if it has a visual assigned.</haxe_doc>
		</refresh_tile_id>
		<destroy public="1" set="method" line="150">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy the geometry this visual contains and clean up</haxe_doc>
		</destroy>
		<new public="1" set="method" line="23"><f a="_map:_options">
	<c path="luxe.tilemaps.Tilemap"/>
	<t path="luxe.options.TilemapVisualOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.IsometricVisual" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Isometric.hx" module="luxe.tilemaps.Isometric">
		<extends path="luxe.tilemaps.TilemapVisual"/>
		<create public="1" set="method" line="79" override="1"><f a=""><x path="Void"/></f></create>
		<update_tile_id set="method" line="150" override="1"><f a="_geom:_layer_name:_x:_y:_id">
	<c path="phoenix.geometry.Geometry"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update_tile_id>
		<create_tile_for_layer set="method" line="168" override="1"><f a="layer:x:y">
	<c path="luxe.tilemaps.TileLayer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="phoenix.geometry.QuadGeometry"/>
</f></create_tile_for_layer>
		<new public="1" set="method" line="77"><f a="_map:_options">
	<c path="luxe.tilemaps.Tilemap"/>
	<t path="luxe.options.TilemapVisualOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.Ortho" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Ortho.hx">
		<worldpos_to_tile_coord public="1" set="method" line="17" static="1"><f a="world_x:world_y:tile_width:tile_height:?scale" v="::::1.0f">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<t path="luxe.Vector"/>
</f></worldpos_to_tile_coord>
		<tile_coord_to_worldpos public="1" set="method" line="28" static="1"><f a="tile_x:tile_y:tile_width:tile_height:?scale:?offset_x:?offset_y" v="::::1.0f:null:null">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<e path="luxe.tilemaps.TileOffset"/>
	<e path="luxe.tilemaps.TileOffset"/>
	<t path="luxe.Vector"/>
</f></tile_coord_to_worldpos>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.OrthoVisual" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Ortho.hx" module="luxe.tilemaps.Ortho">
		<extends path="luxe.tilemaps.TilemapVisual"/>
		<create public="1" set="method" line="64" override="1"><f a=""><x path="Void"/></f></create>
		<update_tile_id set="method" line="131" override="1"><f a="_geom:_layer_name:_x:_y:_id">
	<c path="phoenix.geometry.Geometry"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update_tile_id>
		<create_tile_for_layer set="method" line="149" override="1"><f a="layer:x:y">
	<c path="luxe.tilemaps.TileLayer"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="phoenix.geometry.QuadGeometry"/>
</f></create_tile_for_layer>
		<new public="1" set="method" line="62"><f a="_map:_options">
	<c path="luxe.tilemaps.Tilemap"/>
	<t path="luxe.options.TilemapVisualOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="luxe.tilemaps.TilemapVisualLayerGeometry" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap"><c path="Array"><c path="Array"><c path="phoenix.geometry.Geometry"/></c></c></typedef>
	<class path="luxe.tilemaps.Tile" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap">
		<uuid public="1"><c path="String"/></uuid>
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<pos public="1"><t path="luxe.Vector"/></pos>
		<size public="1"><t path="luxe.Vector"/></size>
		<layer public="1"><c path="luxe.tilemaps.TileLayer"/></layer>
		<map public="1"><c path="luxe.tilemaps.Tilemap"/></map>
		<id public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</id>
		<toString set="method" line="214"><f a=""><c path="String"/></f></toString>
		<set_id set="method" line="218"><f a="_id">
	<x path="Int"/>
	<x path="Int"/>
</f></set_id>
		<new public="1" set="method" line="191"><f a="options">
	<t path="luxe.options.TileOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.TileLayer" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap">
		<layer public="1">
			<x path="Int"/>
			<haxe_doc>the depth/ordering value</haxe_doc>
		</layer>
		<id public="1">
			<c path="String"/>
			<haxe_doc>the unique id of the layer</haxe_doc>
		</id>
		<name public="1">
			<c path="String"/>
			<haxe_doc>the name of the layer</haxe_doc>
		</name>
		<opacity public="1">
			<x path="Float"/>
			<haxe_doc>the layer opacity. default: 1</haxe_doc>
		</opacity>
		<visible public="1">
			<x path="Bool"/>
			<haxe_doc>the layer visibility. default: true</haxe_doc>
		</visible>
		<fixed public="1">
			<x path="Bool"/>
			<haxe_doc>The layer static state.
            When fixed, visuals can optimize the geometry</haxe_doc>
		</fixed>
		<map public="1">
			<c path="luxe.tilemaps.Tilemap"/>
			<haxe_doc>the map this tilemap belongs to</haxe_doc>
		</map>
		<tiles public="1">
			<c path="Array"><t path="luxe.tilemaps.TileArray"/></c>
			<haxe_doc>array of array of tiles</haxe_doc>
		</tiles>
		<properties public="1">
			<x path="Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<haxe_doc>layer properties</haxe_doc>
		</properties>
		<new public="1" set="method" line="260"><f a="options">
	<t path="luxe.options.TileLayerOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tilemaps.Tileset" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap">
		<texture public="1"><c path="phoenix.Texture"/></texture>
		<name public="1"><c path="String"/></name>
		<first_id public="1"><x path="Int"/></first_id>
		<tile_width public="1"><x path="Int"/></tile_width>
		<tile_height public="1"><x path="Int"/></tile_height>
		<margin public="1"><x path="Int"/></margin>
		<spacing public="1"><x path="Int"/></spacing>
		<toString set="method" line="317"><f a=""><c path="String"/></f></toString>
		<pos_in_texture public="1" set="method" line="322"><f a="_id">
	<x path="Int"/>
	<t path="luxe.Vector"/>
</f></pos_in_texture>
		<texture_x public="1" set="method" line="330"><f a="_id">
	<x path="Int"/>
	<x path="Int"/>
</f></texture_x>
		<texture_y public="1" set="method" line="337"><f a="_id">
	<x path="Int"/>
	<x path="Int"/>
</f></texture_y>
		<new public="1" set="method" line="296"><f a="options">
	<t path="luxe.options.TilesetOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="luxe.tilemaps.TilemapOrientation" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap">
		<ortho/>
		<isometric/>
		<none/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="luxe.tilemaps.TileOffset" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap">
		<center/>
		<top/>
		<bottom/>
		<left/>
		<right/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="luxe.tilemaps.TileArray" params="" file="/Users/sven/dev/luxe/luxe/luxe/tilemaps/Tilemap.hx" module="luxe.tilemaps.Tilemap"><c path="Array"><c path="luxe.tilemaps.Tile"/></c></typedef>
	<class path="luxe.tween.actuators.IGenericActuator" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/GenericActuator.hx" module="luxe.tween.actuators.GenericActuator" interface="1">
		<autoVisible public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values   
      @param   value       Whether autoVisible should be enabled (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</autoVisible>
		<delay public="1" set="method">
			<f a="duration">
				<x path="Float"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Increases the delay before a tween is executed   
      @param   duration        The amount of seconds to delay   
      @return      The current actuator instance</haxe_doc>
		</delay>
		<ease public="1" set="method">
			<f a="easing">
				<c path="luxe.tween.easing.IEasing"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Sets the easing which is used when running the tween   
      @param   easing      An easing equation, like Elastic.easeIn or Quad.easeOut   
      @return      The current actuator instance</haxe_doc>
		</ease>
		<onComplete public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Defines a function which will be called when the tween finishes   
      @param   handler     The function you would like to be called   
      @param   parameters      Parameters you would like to pass to the handler function when it is called   
      @return      The current actuator instance</haxe_doc>
		</onComplete>
		<onRepeat public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Defines a function which will be called when the tween repeats   
      @param   handler     The function you would like to be called   
      @param   parameters      Parameters you would like to pass to the handler function when it is called   
      @return      The current actuator instance</haxe_doc>
		</onRepeat>
		<onUpdate public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Defines a function which will be called when the tween updates   
      @param   handler     The function you would like to be called   
      @param   parameters      Parameters you would like to pass to the handler function when it is called   
      @return      The current actuator instance</haxe_doc>
		</onUpdate>
		<reflect public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect   
      @param   value       Whether reflect should be enabled (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</reflect>
		<repeat public="1" set="method">
			<f a="?times">
				<x path="Int"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Repeats the tween after it finishes   
      @param   times       The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)   
      @return      The current actuator instance</haxe_doc>
		</repeat>
		<reverse public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Sets if the tween should be handled in reverse   
      @param   value       Whether the tween should be reversed (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</reverse>
		<timescale public="1" set="method">
			<f a="?_value">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Specify whether this should be scaled by the global timescale   
      @param   _value      Whether or not it should be   
      @return      The current actuator instance</haxe_doc>
		</timescale>
		<smartRotation public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Enabling smartRotation can prevent undesired results when tweening rotation values   
      @param   value       Whether smart rotation should be enabled (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</smartRotation>
		<snapping public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Snapping causes tween values to be rounded automatically   
      @param   value       Whether tween values should be rounded (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</snapping>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.tween.actuators.GenericActuator" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/GenericActuator.hx">
		<implements path="luxe.tween.actuators.IGenericActuator"/>
		<duration public="1"><x path="Float"/></duration>
		<id public="1"><c path="String"/></id>
		<properties public="1"><d/></properties>
		<target public="1"><d/></target>
		<_autoVisible><x path="Bool"/></_autoVisible>
		<_delay><x path="Float"/></_delay>
		<_ease><c path="luxe.tween.easing.IEasing"/></_ease>
		<_onComplete><d/></_onComplete>
		<_onCompleteParams><c path="Array"><d/></c></_onCompleteParams>
		<_onRepeat><d/></_onRepeat>
		<_onRepeatParams><c path="Array"><d/></c></_onRepeatParams>
		<_onUpdate><d/></_onUpdate>
		<_onUpdateParams><c path="Array"><d/></c></_onUpdateParams>
		<_reflect><x path="Bool"/></_reflect>
		<_repeat><x path="Int"/></_repeat>
		<_reverse><x path="Bool"/></_reverse>
		<_smartRotation><x path="Bool"/></_smartRotation>
		<_snapping><x path="Bool"/></_snapping>
		<special><x path="Bool"/></special>
		<apply public="1" set="method" line="60"><f a=""><x path="Void"/></f></apply>
		<autoVisible public="1" set="method" line="84">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Sometimes drawing performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values   
      @param   value       Whether autoVisible should be enabled (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</autoVisible>
		<callMethod get="inline" set="null" line="99"><f a="method:?params" v=":null">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></callMethod>
		<change set="method" line="130"><f a=""><x path="Void"/></f></change>
		<complete set="method" line="141"><f a="?sendEvent" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></complete>
		<delay public="1" set="method" line="165">
			<f a="duration">
				<x path="Float"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Increases the delay before a tween is executed   
      @param   duration        The amount of seconds to delay   
      @return      The current actuator instance</haxe_doc>
		</delay>
		<ease public="1" set="method" line="179">
			<f a="easing">
				<c path="luxe.tween.easing.IEasing"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Sets the easing which is used when running the tween   
      @param   easing      An easing equation, like Elastic.easeIn or Quad.easeOut   
      @return      The current actuator instance</haxe_doc>
		</ease>
		<move public="1" set="method" line="188"><f a=""><x path="Void"/></f></move>
		<timescaled public="1">
			<x path="Bool"/>
			<haxe_doc>Specify whether this should be scaled by the global timescale   
      @param   _value      Whether or not it should be   
      @return      The current actuator instance</haxe_doc>
		</timescaled>
		<timescale public="1" set="method" line="202"><f a="?_value" v="true">
	<x path="Bool"/>
	<c path="luxe.tween.actuators.IGenericActuator"/>
</f></timescale>
		<onComplete public="1" set="method" line="213">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Defines a function which will be called when the tween finishes   
      @param   handler     The function you would like to be called   
      @param   parameters      Parameters you would like to pass to the handler function when it is called   
      @return      The current actuator instance</haxe_doc>
		</onComplete>
		<onRepeat public="1" set="method" line="244">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Defines a function which will be called when the tween repeats   
      @param   handler     The function you would like to be called   
      @param   parameters      Parameters you would like to pass to the handler function when it is called   
      @return      The current actuator instance</haxe_doc>
		</onRepeat>
		<onUpdate public="1" set="method" line="269">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Defines a function which will be called when the tween updates   
      @param   handler     The function you would like to be called   
      @param   parameters      Parameters you would like to pass to the handler function when it is called   
      @return      The current actuator instance</haxe_doc>
		</onUpdate>
		<pause public="1" set="method" line="288"><f a=""><x path="Void"/></f></pause>
		<reflect public="1" set="method" line="300">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect   
      @param   value       Whether reflect should be enabled (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</reflect>
		<repeat public="1" set="method" line="321">
			<f a="?times" v="null">
				<x path="Int"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Repeats the tween after it finishes   
      @param   times       The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)   
      @return      The current actuator instance</haxe_doc>
		</repeat>
		<resume public="1" set="method" line="336"><f a=""><x path="Void"/></f></resume>
		<reverse public="1" set="method" line="348">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Sets if the tween should be handled in reverse   
      @param   value       Whether the tween should be reversed (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</reverse>
		<smartRotation public="1" set="method" line="369">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Enabling smartRotation can prevent undesired results when tweening rotation values   
      @param   value       Whether smart rotation should be enabled (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</smartRotation>
		<snapping public="1" set="method" line="390">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Snapping causes tween values to be rounded automatically   
      @param   value       Whether tween values should be rounded (Default is true)   
      @return      The current actuator instance</haxe_doc>
		</snapping>
		<stop public="1" set="method" line="406"><f a="properties:complete:sendEvent">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stop>
		<new public="1" set="method" line="40"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":keepSub"/>
		</meta>
	</class>
	<class path="luxe.tween.actuators.SimpleActuator" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/SimpleActuator.hx">
		<extends path="luxe.tween.actuators.GenericActuator"/>
		<actuators line="23" static="1"><c path="Array"><c path="luxe.tween.actuators.SimpleActuator"/></c></actuators>
		<actuatorsLength line="24" static="1"><x path="Int"/></actuatorsLength>
		<addedEvent line="25" static="1"><x path="Bool"/></addedEvent>
		<timer static="1"><c path="haxe.Timer"/></timer>
		<update_timer line="452" static="1"><x path="Float"/></update_timer>
		<current_time line="453" static="1"><x path="Float"/></current_time>
		<on_internal_update set="method" line="454" static="1"><f a="dt">
	<x path="Float"/>
	<x path="Void"/>
</f></on_internal_update>
		<timeOffset><x path="Float"/></timeOffset>
		<active><x path="Bool"/></active>
		<cacheVisible><x path="Bool"/></cacheVisible>
		<detailsLength><x path="Int"/></detailsLength>
		<initialized><x path="Bool"/></initialized>
		<paused><x path="Bool"/></paused>
		<pauseTime><x path="Float"/></pauseTime>
		<propertyDetails><c path="Array"><c path="luxe.tween.actuators.PropertyDetails"/></c></propertyDetails>
		<sendChange><x path="Bool"/></sendChange>
		<setVisible><x path="Bool"/></setVisible>
		<startTime><x path="Float"/></startTime>
		<toggleVisible><x path="Bool"/></toggleVisible>
		<has_timescaled_starttime><x path="Bool"/></has_timescaled_starttime>
		<autoVisible public="1" set="method" line="71" override="1">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>@inheritDoc</haxe_doc>
		</autoVisible>
		<delay public="1" set="method" line="101" override="1">
			<f a="duration">
				<x path="Float"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>@inheritDoc</haxe_doc>
		</delay>
		<getField get="inline" set="null" line="111"><f a="target:propertyName">
	<d/>
	<c path="String"/>
	<d/>
</f></getField>
		<initialize set="method" line="131"><f a=""><x path="Void"/></f></initialize>
		<move public="1" set="method" line="169" override="1"><f a=""><x path="Void"/></f></move>
		<onUpdate public="1" set="method" line="191" override="1">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>@inheritDoc</haxe_doc>
		</onUpdate>
		<pause public="1" set="method" line="212" override="1"><f a=""><x path="Void"/></f></pause>
		<resume public="1" set="method" line="221" override="1"><f a=""><x path="Void"/></f></resume>
		<setField get="inline" set="null" line="235"><f a="target:propertyName:value">
	<d/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setField>
		<setProperty get="inline" set="null" line="250"><f a="details:value">
	<c path="luxe.tween.actuators.PropertyDetails"/>
	<d/>
	<x path="Void"/>
</f></setProperty>
		<stop public="1" set="method" line="265" override="1"><f a="properties:complete:sendEvent">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stop>
		<update set="method" line="307"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="43"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>@author Joshua Granick   
  @version 1.2</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Quad" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quad.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.IEasing" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/IEasing.hx" interface="1">
		<calculate public="1" set="method"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<haxe_doc>* @author Joshua Granick
 * @author Philippe / http://philippe.elsass.me</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.tween.easing.QuadEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quad.hx" module="luxe.tween.easing.Quad">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="113"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="120"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="106"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.Actuate" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/Actuate.hx">
		<defaultActuator public="1" line="17" static="1"><x path="Class"><c path="luxe.tween.actuators.GenericActuator"/></x></defaultActuator>
		<defaultEase public="1" line="18" static="1"><c path="luxe.tween.easing.IEasing"/></defaultEase>
		<targetLibraries line="19" static="1"><t path="luxe.tween.ObjectHash"><c path="Array"><c path="luxe.tween.actuators.GenericActuator"/></c></t></targetLibraries>
		<apply public="1" set="method" line="30" static="1">
			<f a="target:properties:?customActuator" v="::null">
				<d/>
				<d/>
				<x path="Class"><c path="luxe.tween.actuators.GenericActuator"/></x>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[Copies properties from one object to another. Conflicting tweens are stopped automatically   
      @example     <code>Actuate.apply (MyClip, { alpha: 1 } );</code>   
      @param   target      The object to copy to   
      @param   properties      The object to copy from   
      @param   customActuator      A custom actuator to use instead of the default (Optional)   
      @return      The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers]]></haxe_doc>
		</apply>
		<getLibrary set="method" line="48" static="1"><f a="target:?allowCreation" v=":true">
	<d/>
	<x path="Bool"/>
	<c path="Array"><c path="luxe.tween.actuators.GenericActuator"/></c>
</f></getLibrary>
		<motionPath public="1" set="method" line="69" static="1">
			<f a="target:duration:properties:?overwrite" v=":::true">
				<d/>
				<x path="Float"/>
				<d/>
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>Creates a new MotionPath tween   
      @param   target      The object to tween   
      @param   duration        The length of the tween in seconds   
      @param   properties      An object containing a motion path for each property you wish to tween   
      @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   
      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</motionPath>
		<pause public="1" set="method" line="81" static="1">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pauses tweens for the specified target objects   
      @param   ... targets     The target objects which will have their tweens paused. Passing no value pauses tweens for all objects</haxe_doc>
		</pause>
		<pauseAll public="1" set="method" line="106" static="1"><f a=""><x path="Void"/></f></pauseAll>
		<reset public="1" set="method" line="124" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resets Actuate by stopping and removing tweens for all objects</haxe_doc>
		</reset>
		<resume public="1" set="method" line="145" static="1">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Resumes paused tweens for the specified target objects   
      @param   ... targets     The target objects which will have their tweens resumed. Passing no value resumes tweens for all objects</haxe_doc>
		</resume>
		<resumeAll public="1" set="method" line="170" static="1"><f a=""><x path="Void"/></f></resumeAll>
		<stop public="1" set="method" line="192" static="1">
			<f a="target:?properties:?complete:?sendEvent" v=":null:false:true">
				<d/>
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stops all tweens for an individual object   
      @param   target      The target object which will have its tweens stopped, or a generic actuator instance   
      @param   properties      A string, array or object which contains the properties you wish to stop, like "alpha", [ "x", "y" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)   
      @param   complete        If tweens should apply their final target values before stopping. Default is false (Optional)   
      @param   sendEvent   If a complete() event should be dispatched for the specified target. Default is true (Optional)</haxe_doc>
		</stop>
		<timer public="1" set="method" line="248" static="1">
			<f a="duration:?customActuator" v=":null">
				<x path="Float"/>
				<x path="Class"><c path="luxe.tween.actuators.GenericActuator"/></x>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[Creates a tween-based timer, which is useful for synchronizing function calls with other animations   
      @example     <code>Actuate.timer (1).onComplete (trace, [ "Timer is now complete" ]);</code>   
      @param   duration        The length of the timer in seconds   
      @param   customActuator      A custom actuator to use instead of the default (Optional)   
      @return      The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object]]></haxe_doc>
		</timer>
		<tween public="1" set="method" line="266" static="1">
			<f a="target:duration:properties:?overwrite:?customActuator" v=":::true:null">
				<d/>
				<x path="Float"/>
				<d/>
				<x path="Bool"/>
				<x path="Class"><c path="luxe.tween.actuators.GenericActuator"/></x>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[Creates a new tween   
      @example     <code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ "MyClip is now visible" ]);</code>   
      @param   target      The object to tween   
      @param   duration        The length of the tween in seconds   
      @param   properties      The end values to tween the target to   
      @param   overwrite           Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   
      @param   customActuator      A custom actuator to use instead of the default (Optional)   
      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
		</tween>
		<unload public="1" set="method" line="325" static="1"><f a="actuator">
	<c path="luxe.tween.actuators.GenericActuator"/>
	<x path="Void"/>
</f></unload>
		<update public="1" set="method" line="354" static="1">
			<f a="target:duration:?start:?end:?overwrite" v="::null:null:true">
				<d/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<c path="luxe.tween.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[Creates a new tween that updates a method rather than setting the properties of an object   
      @example     <code>Actuate.update (trace, 1, ["Value: ", 0], ["", 1]).onComplete (trace, [ "Finished tracing values between 0 and 1" ]);</code>   
      @param   target      The method to update   
      @param   duration        The length of the tween in seconds   
      @param   start       The starting parameters of the method call. You may use both numeric and non-numeric values   
      @param   end     The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters   
      @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   
      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
		</update>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween._Actuate.TweenTimer" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/Actuate.hx" private="1" module="luxe.tween.Actuate">
		<progress public="1"><x path="Float"/></progress>
		<new public="1" set="method" line="374"><f a="progress">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="luxe.tween.ObjectHash" params="T" file="/Users/sven/dev/luxe/luxe/luxe/tween/Actuate.hx" module="luxe.tween.Actuate"><c path="haxe.ds.ObjectMap">
	<d/>
	<c path="luxe.tween.ObjectHash.T"/>
</c></typedef>
	<class path="luxe.tween.MotionPath" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/MotionPath.hx">
		<rotation public="1" get="accessor" set="null"><c path="luxe.tween.RotationPath"/></rotation>
		<x public="1" get="accessor" set="null"><c path="luxe.tween.IComponentPath"/></x>
		<y public="1" get="accessor" set="null"><c path="luxe.tween.IComponentPath"/></y>
		<_rotation><c path="luxe.tween.RotationPath"/></_rotation>
		<_x><c path="luxe.tween.ComponentPath"/></_x>
		<_y><c path="luxe.tween.ComponentPath"/></_y>
		<bezier public="1" set="method" line="39">
			<f a="x:y:controlX:controlY:?strength" v="::::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="luxe.tween.MotionPath"/>
			</f>
			<haxe_doc>Adds a bezier curve to the current motion path   
      @param   x       The x position of the end point for the curve   
      @param   y       The y position of the end point for the curve   
      @param   controlX        The x position of the control point for the curve, which affects the angle and midpoint   
      @param   controlX        The x position of the control point for the curve, which affects the angle and midpoint   
      @param   strength        The degree of emphasis that should be placed on this segment. If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)   
      @return      The current motion path instance</haxe_doc>
		</bezier>
		<line public="1" set="method" line="56">
			<f a="x:y:?strength" v="::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="luxe.tween.MotionPath"/>
			</f>
			<haxe_doc>Adds a line to the current motion path   
      @param   x       The x position of the end point for the line   
      @param   x       The y position of the end point for the line   
      @param   strength        The degree of emphasis that should be placed on this segment . If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)   
      @return      The current motion path instance</haxe_doc>
		</line>
		<get_rotation set="method" line="73"><f a=""><c path="luxe.tween.RotationPath"/></f></get_rotation>
		<get_x set="method" line="86"><f a=""><c path="luxe.tween.IComponentPath"/></f></get_x>
		<get_y set="method" line="93"><f a=""><c path="luxe.tween.IComponentPath"/></f></get_y>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<haxe_doc>@author Joshua Granick   
  @author Aleš Tomeček (for RotationPath)</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.IComponentPath" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/MotionPath.hx" module="luxe.tween.MotionPath" interface="1">
		<end public="1" get="null" set="null"><x path="Float"/></end>
		<start public="1"><x path="Float"/></start>
		<calculate public="1" set="method"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.tween.ComponentPath" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/MotionPath.hx" module="luxe.tween.MotionPath">
		<implements path="luxe.tween.IComponentPath"/>
		<start public="1"><x path="Float"/></start>
		<end public="1" get="accessor" set="null"><x path="Float"/></end>
		<paths><c path="Array"><c path="luxe.tween.BezierPath"/></c></paths>
		<totalStrength><x path="Float"/></totalStrength>
		<addPath public="1" set="method" line="122"><f a="path">
	<c path="luxe.tween.BezierPath"/>
	<x path="Void"/>
</f></addPath>
		<calculate public="1" set="method" line="130"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<get_end set="method" line="169"><f a=""><x path="Float"/></f></get_end>
		<new public="1" set="method" line="113"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.BezierPath" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/MotionPath.hx" module="luxe.tween.MotionPath">
		<control public="1"><x path="Float"/></control>
		<end public="1"><x path="Float"/></end>
		<strength public="1"><x path="Float"/></strength>
		<calculate public="1" set="method" line="217"><f a="start:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="208"><f a="end:control:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.LinearPath" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/MotionPath.hx" module="luxe.tween.MotionPath">
		<extends path="luxe.tween.BezierPath"/>
		<calculate public="1" set="method" line="237" override="1"><f a="start:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="230"><f a="end:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.RotationPath" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/MotionPath.hx" module="luxe.tween.MotionPath">
		<implements path="luxe.tween.IComponentPath"/>
		<end public="1" get="accessor" set="null"><x path="Float"/></end>
		<offset public="1"><x path="Float"/></offset>
		<start public="1"><x path="Float"/></start>
		<step><x path="Float"/></step>
		<_x><c path="luxe.tween.ComponentPath"/></_x>
		<_y><c path="luxe.tween.ComponentPath"/></_y>
		<calculate public="1" set="method" line="271"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<get_end public="1" set="method" line="291"><f a=""><x path="Float"/></f></get_end>
		<new public="1" set="method" line="259"><f a="x:y">
	<c path="luxe.tween.ComponentPath"/>
	<c path="luxe.tween.ComponentPath"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.actuators.MethodActuator" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/MethodActuator.hx">
		<extends path="luxe.tween.actuators.SimpleActuator"/>
		<currentParameters><c path="Array"><d/></c></currentParameters>
		<tweenProperties><d/></tweenProperties>
		<apply public="1" set="method" line="43" override="1"><f a=""><x path="Void"/></f></apply>
		<complete set="method" line="50" override="1"><f a="?sendEvent" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></complete>
		<initialize set="method" line="65" override="1"><f a=""><x path="Void"/></f></initialize>
		<update set="method" line="93" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="15"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.actuators.MotionPathActuator" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/MotionPathActuator.hx">
		<extends path="luxe.tween.actuators.SimpleActuator"/>
		<apply public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></apply>
		<initialize set="method" line="39" override="1"><f a=""><x path="Void"/></f></initialize>
		<update set="method" line="77" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="13"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.actuators.PropertyDetails" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/PropertyDetails.hx">
		<change public="1"><x path="Float"/></change>
		<isField public="1"><x path="Bool"/></isField>
		<propertyName public="1"><c path="String"/></propertyName>
		<start public="1"><x path="Float"/></start>
		<target public="1"><d/></target>
		<new public="1" set="method" line="19"><f a="target:propertyName:start:change:?isField" v="::::true">
	<d/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.actuators.PropertyPathDetails" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/actuators/MotionPathActuator.hx" module="luxe.tween.actuators.MotionPathActuator">
		<extends path="luxe.tween.actuators.PropertyDetails"/>
		<path public="1"><c path="luxe.tween.IComponentPath"/></path>
		<new public="1" set="method" line="224"><f a="target:propertyName:path:?isField" v=":::true">
	<d/>
	<c path="String"/>
	<c path="luxe.tween.IComponentPath"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Back" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Back.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.BackEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Back.hx" module="luxe.tween.easing.Back">
		<implements path="luxe.tween.easing.IEasing"/>
		<s public="1"><x path="Float"/></s>
		<calculate public="1" set="method" line="56"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="63"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="49"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.BackEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Back.hx" module="luxe.tween.easing.Back">
		<implements path="luxe.tween.easing.IEasing"/>
		<s public="1"><x path="Float"/></s>
		<calculate public="1" set="method" line="86"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="94"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="79"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.BackEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Back.hx" module="luxe.tween.easing.Back">
		<implements path="luxe.tween.easing.IEasing"/>
		<s public="1"><x path="Float"/></s>
		<calculate public="1" set="method" line="118"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="125"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="111"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Bounce" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Bounce.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="18" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="25" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="32" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.BounceEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Bounce.hx" module="luxe.tween.easing.Bounce">
		<implements path="luxe.tween.easing.IEasing"/>
		<_ease public="1" get="inline" set="null" line="65" static="1"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></_ease>
		<calculate public="1" set="method" line="56"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="61"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="50"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.BounceEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Bounce.hx" module="luxe.tween.easing.Bounce">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="81"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="91"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="75"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.BounceEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Bounce.hx" module="luxe.tween.easing.Bounce">
		<implements path="luxe.tween.easing.IEasing"/>
		<_ease public="1" get="inline" set="null" line="128" static="1"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></_ease>
		<calculate public="1" set="method" line="115"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="122"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="109"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Cubic" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Cubic.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.CubicEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Cubic.hx" module="luxe.tween.easing.Cubic">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.CubicEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Cubic.hx" module="luxe.tween.easing.Cubic">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="87"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.CubicEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Cubic.hx" module="luxe.tween.easing.Cubic">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="107"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="114"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="100"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Elastic" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Elastic.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="20" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="27" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="34" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.ElasticEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Elastic.hx" module="luxe.tween.easing.Elastic">
		<implements path="luxe.tween.easing.IEasing"/>
		<a public="1"><x path="Float"/></a>
		<p public="1"><x path="Float"/></p>
		<calculate public="1" set="method" line="59"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="70"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="51"><f a="a:p">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.ElasticEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Elastic.hx" module="luxe.tween.easing.Elastic">
		<implements path="luxe.tween.easing.IEasing"/>
		<a public="1"><x path="Float"/></a>
		<p public="1"><x path="Float"/></p>
		<calculate public="1" set="method" line="108"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="129"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="101"><f a="a:p">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.ElasticEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Elastic.hx" module="luxe.tween.easing.Elastic">
		<implements path="luxe.tween.easing.IEasing"/>
		<a public="1"><x path="Float"/></a>
		<p public="1"><x path="Float"/></p>
		<calculate public="1" set="method" line="171"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="182"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="163"><f a="a:p">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Expo" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Expo.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.ExpoEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Expo.hx" module="luxe.tween.easing.Expo">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.ExpoEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Expo.hx" module="luxe.tween.easing.Expo">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="92"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.ExpoEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Expo.hx" module="luxe.tween.easing.Expo">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="121"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="128"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="114"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Linear" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Linear.hx">
		<easeNone public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeNone>
		<get_easeNone set="method" line="17" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeNone>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.LinearEaseNone" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Linear.hx" module="luxe.tween.easing.Linear">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="37"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="44"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuadEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quad.hx" module="luxe.tween.easing.Quad">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuadEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quad.hx" module="luxe.tween.easing.Quad">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="90"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Quart" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quart.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuartEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quart.hx" module="luxe.tween.easing.Quart">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuartEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quart.hx" module="luxe.tween.easing.Quart">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="88"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuartEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quart.hx" module="luxe.tween.easing.Quart">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="111"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="118"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="104"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Quint" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quint.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuintEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quint.hx" module="luxe.tween.easing.Quint">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuintEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quint.hx" module="luxe.tween.easing.Quint">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="88"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.QuintEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Quint.hx" module="luxe.tween.easing.Quint">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="111"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="118"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="104"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.Sine" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Sine.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="luxe.tween.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="18" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="25" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="32" static="1"><f a=""><c path="luxe.tween.easing.IEasing"/></f></get_easeOut>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.SineEaseIn" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Sine.hx" module="luxe.tween.easing.Sine">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="52"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="59"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.SineEaseInOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Sine.hx" module="luxe.tween.easing.Sine">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="79"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="86"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="72"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.tween.easing.SineEaseOut" params="" file="/Users/sven/dev/luxe/luxe/luxe/tween/easing/Sine.hx" module="luxe.tween.easing.Sine">
		<implements path="luxe.tween.easing.IEasing"/>
		<calculate public="1" set="method" line="106"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="113"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="99"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.GeometryUtils" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/GeometryUtils.hx">
		<two_pi get="inline" set="null" line="13" static="1"><x path="Float"/></two_pi>
		<luxe public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</luxe>
		<segments_for_smooth_circle public="1" set="method" line="21"><f a="_radius:?_smooth" v=":6">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></segments_for_smooth_circle>
		<random_point_in_unit_circle public="1" set="method" line="27"><f a=""><t path="luxe.Vector"/></f></random_point_in_unit_circle>
		<point_in_polygon public="1" set="method" line="41"><f a="_point:_offset:_verts">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
	<c path="Array"><t path="luxe.Vector"/></c>
	<x path="Bool"/>
</f></point_in_polygon>
		<point_in_geometry public="1" set="method" line="66"><f a="_point:_geometry">
	<t path="luxe.Vector"/>
	<c path="phoenix.geometry.Geometry"/>
	<x path="Bool"/>
</f></point_in_geometry>
		<intersect_ray_plane public="1" set="method" line="92"><f a="_ray_start:_ray_dir:_plane_normal:_plane_point">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></intersect_ray_plane>
		<new public="1" set="method" line="15">
			<f a="_luxe">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.Maths" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/Maths.hx">
		<_PI_OVER_180 public="1" get="inline" set="null" line="16" static="1">
			<x path="Float"/>
			<haxe_doc>Used by `degrees()` and `radians()`, use those to convert, unless needed</haxe_doc>
		</_PI_OVER_180>
		<_180_OVER_PI public="1" get="inline" set="null" line="18" static="1">
			<x path="Float"/>
			<haxe_doc>Used by `degrees()` and `radians()`, use those to convert, unless needed</haxe_doc>
		</_180_OVER_PI>
		<fixed public="1" get="inline" set="null" line="21" static="1"><f a="value:precision">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
</f></fixed>
		<lerp public="1" get="inline" set="null" line="28" static="1"><f a="value:target:t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></lerp>
		<weighted_avg public="1" get="inline" set="null" line="36" static="1"><f a="value:target:slowness">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></weighted_avg>
		<clamp public="1" get="inline" set="null" line="45" static="1"><f a="value:a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clamp>
		<clamp_bottom public="1" get="inline" set="null" line="49" static="1"><f a="value:a">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></clamp_bottom>
		<within_range public="1" get="inline" set="null" line="53" static="1"><f a="value:start_range:end_range">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></within_range>
		<wrap_angle public="1" get="inline" set="null" line="57" static="1"><f a="degrees:lower:upper">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></wrap_angle>
		<nearest_power_of_two public="1" get="inline" set="null" line="67" static="1"><f a="_value">
	<x path="Int"/>
	<x path="Int"/>
</f></nearest_power_of_two>
		<map_linear public="1" get="inline" set="null" line="81" static="1"><f a="value:a1:a2:b1:b2">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></map_linear>
		<smoothstep public="1" get="inline" set="null" line="85" static="1"><f a="x:min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smoothstep>
		<smootherstep public="1" get="inline" set="null" line="101" static="1"><f a="x:min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></smootherstep>
		<random16 public="1" get="inline" set="null" line="117" static="1"><f a=""><x path="Float"/></f></random16>
		<random_int public="1" get="inline" set="null" line="121" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></random_int>
		<random_float public="1" get="inline" set="null" line="125" static="1"><f a="low:high">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></random_float>
		<random_float_spread public="1" get="inline" set="null" line="129" static="1"><f a="range">
	<x path="Float"/>
	<x path="Float"/>
</f></random_float_spread>
		<sign public="1" get="inline" set="null" line="133" static="1"><f a="x">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<radians public="1" get="inline" set="null" line="137" static="1"><f a="degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></radians>
		<degrees public="1" get="inline" set="null" line="141" static="1"><f a="radians">
	<x path="Float"/>
	<x path="Float"/>
</f></degrees>
		<luxe public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</luxe>
		<new public="1" set="method" line="9">
			<f a="_luxe">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.Murmur3" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/Murmur3.hx">
		<C1 get="inline" set="null" line="15" static="1"><x path="UInt"/></C1>
		<C2 get="inline" set="null" line="16" static="1"><x path="UInt"/></C2>
		<R1 get="inline" set="null" line="17" static="1"><x path="Int"/></R1>
		<R2 get="inline" set="null" line="18" static="1"><x path="Int"/></R2>
		<M get="inline" set="null" line="19" static="1"><x path="Int"/></M>
		<N get="inline" set="null" line="20" static="1"><x path="UInt"/></N>
		<hash public="1" set="method" line="31" static="1">
			<f a="bytes:?seed" v=":0">
				<c path="haxe.io.Bytes"/>
				<x path="UInt"/>
				<x path="UInt"/>
			</f>
			<haxe_doc>* Returns the hash value of the input bytes.
     *
     * @param haxe.io.Bytes bytes the bytes to get the hash for
     * @param UInt          seed  an optional seed value
     *
     * @return UInt the hash value</haxe_doc>
		</hash>
		<haxe_doc>* Pure Haxe MurmurHash version 3 (32 bit variant) implementation.
 *
 * @link https://en.wikipedia.org/wiki/MurmurHash
 * @link https://github.com/michelkaeser
 * @license MIT</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils._UUID.Rule30" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/UUID.hx" private="1" module="luxe.utils.UUID">
		<createWithLength public="1" set="method" line="124" static="1"><f a="length">
	<x path="Int"/>
	<c path="luxe.utils._UUID.Rule30"/>
</f></createWithLength>
		<cells><c path="String"/></cells>
		<cellsLength><x path="Int"/></cellsLength>
		<getBits public="1" set="method" line="155"><f a="length">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="167"><f a=""><x path="Int"/></f></getBit>
		<new set="method" line="139"><f a="cells">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="luxe.utils.UUID" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/UUID.hx">
		<rule30 line="33" static="1"><c path="luxe.utils._UUID.Rule30"/></rule30>
		<hexChars line="34" static="1"><c path="String"/></hexChars>
		<generate_undashed public="1" set="method" line="39" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Generate a Universal Unique Identifier string.
        For example: B859AA4C0A96CA94F7F82DBECD24205F</haxe_doc>
		</generate_undashed>
		<get public="1" set="method" line="69" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Generate a Universal Unique Identifier string, with dashes according to the spec.
        For example: BD5FB953-0BD3-D6B4-82AB-E642B7036246</haxe_doc>
		</get>
		<hex set="method" line="101" static="1"><f a="sbuf:n">
	<c path="StringBuf"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hex>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.Utils" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/Utils.hx">
		<geometry public="1"><c path="luxe.utils.GeometryUtils"/></geometry>
		<core public="1">
			<c path="luxe.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<_byte_levels><c path="Array"><c path="String"/></c></_byte_levels>
		<uniqueid public="1" set="method" line="31">
			<f a="?val" v="null">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate a short, unique string ID for use ("base62").</haxe_doc>
		</uniqueid>
		<uniquehash public="1" set="method" line="55">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Generates and returns a uniqueid converted to a hashed integer for convenience.
            Uses the default `uniqueid` and `hash` implementation detail.</haxe_doc>
		</uniquehash>
		<hash public="1" set="method" line="61">
			<f a="string">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Generates a integer hash from a string using the default algorithm (murmur3)</haxe_doc>
		</hash>
		<hashmurmur public="1" set="method" line="68">
			<f a="_bytes:?_seed" v=":0">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Generates an integer hash of a string using the murmur 3 algorithm</haxe_doc>
		</hashmurmur>
		<hashdjb2 public="1" set="method" line="74">
			<f a="string">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Generates an integer hash of a string using the djb2 algorithm</haxe_doc>
		</hashdjb2>
		<uniqueid2 public="1" set="method" line="87"><f a=""><c path="String"/></f></uniqueid2>
		<uuid public="1" set="method" line="94"><f a=""><c path="String"/></f></uuid>
		<stacktrace public="1" set="method" line="101"><f a="?_depth" v="100">
	<x path="Int"/>
	<c path="String"/>
</f></stacktrace>
		<path_is_relative public="1" set="method" line="135"><f a="_path">
	<c path="String"/>
	<x path="Bool"/>
</f></path_is_relative>
		<find_assets_image_sequence public="1" set="method" line="148"><f a="_name:?_ext:?_start" v=":'.png':'1'">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></find_assets_image_sequence>
		<text_wrap_column_knuth_plass public="1" set="method" line="193">
			<f a="_string:?_column" v=":80">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>:WIP: Wrap text using a knuth plass algorithm for column breaking.</haxe_doc>
		</text_wrap_column_knuth_plass>
		<text_wrap_column public="1" set="method" line="262">
			<f a="_text:?_brk:?_column" v=":'\n':80">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Soft wrap a string by maximum character count. brk default:'\n', col default:80</haxe_doc>
		</text_wrap_column>
		<bytes_to_string public="1" set="method" line="275"><f a="bytes">
	<x path="Int"/>
	<c path="String"/>
</f></bytes_to_string>
		<array_to_bytes public="1" set="method" line="285"><f a="array">
	<c path="Array"><x path="Int"/></c>
	<c path="haxe.io.Bytes"/>
</f></array_to_bytes>
		<new set="method" line="18">
			<f a="_luxe">
				<c path="luxe.Core"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="luxe.utils.unifill.CodePoint" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/CodePoint.hx">
		<this><x path="Int"/></this>
		<impl><class path="luxe.utils.unifill._CodePoint.CodePoint_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/CodePoint.hx" private="1" module="luxe.utils.unifill.CodePoint">
	<cons public="1" get="inline" set="null" line="6" static="1">
		<f a="a:b">
			<x path="luxe.utils.unifill.CodePoint"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</cons>
	<snoc public="1" get="inline" set="null" line="10" static="1">
		<f a="a:b">
			<c path="String"/>
			<x path="luxe.utils.unifill.CodePoint"/>
			<c path="String"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</snoc>
	<addInt public="1" get="inline" set="null" line="14" static="1">
		<f a="a:b">
			<x path="luxe.utils.unifill.CodePoint"/>
			<x path="Int"/>
			<x path="luxe.utils.unifill.CodePoint"/>
		</f>
		<meta><m n=":op"><e>A+B</e></m></meta>
	</addInt>
	<sub public="1" get="inline" set="null" line="18" static="1">
		<f a="a:b">
			<x path="luxe.utils.unifill.CodePoint"/>
			<x path="luxe.utils.unifill.CodePoint"/>
			<x path="Int"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</sub>
	<subInt public="1" get="inline" set="null" line="22" static="1">
		<f a="a:b">
			<x path="luxe.utils.unifill.CodePoint"/>
			<x path="Int"/>
			<x path="luxe.utils.unifill.CodePoint"/>
		</f>
		<meta><m n=":op"><e>A-B</e></m></meta>
	</subInt>
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="code">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<toString public="1" get="inline" set="null" line="39" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toInt public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toInt>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="luxe.utils.unifill._CodePoint.CodePoint_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/CodePoint.hx" private="1" module="luxe.utils.unifill.CodePoint">
		<cons public="1" get="inline" set="null" line="6" static="1">
			<f a="a:b">
				<x path="luxe.utils.unifill.CodePoint"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</cons>
		<snoc public="1" get="inline" set="null" line="10" static="1">
			<f a="a:b">
				<c path="String"/>
				<x path="luxe.utils.unifill.CodePoint"/>
				<c path="String"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</snoc>
		<addInt public="1" get="inline" set="null" line="14" static="1">
			<f a="a:b">
				<x path="luxe.utils.unifill.CodePoint"/>
				<x path="Int"/>
				<x path="luxe.utils.unifill.CodePoint"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</addInt>
		<sub public="1" get="inline" set="null" line="18" static="1">
			<f a="a:b">
				<x path="luxe.utils.unifill.CodePoint"/>
				<x path="luxe.utils.unifill.CodePoint"/>
				<x path="Int"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</sub>
		<subInt public="1" get="inline" set="null" line="22" static="1">
			<f a="a:b">
				<x path="luxe.utils.unifill.CodePoint"/>
				<x path="Int"/>
				<x path="luxe.utils.unifill.CodePoint"/>
			</f>
			<meta><m n=":op"><e>A-B</e></m></meta>
		</subInt>
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<toString public="1" get="inline" set="null" line="39" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toInt public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toInt>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.CodePointIter" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/CodePointIter.hx">
		<s><c path="String"/></s>
		<itr><c path="luxe.utils.unifill.InternalEncodingIter"/></itr>
		<hasNext public="1" get="inline" set="null" line="12"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="16"><f a=""><x path="luxe.utils.unifill.CodePoint"/></f></next>
		<new public="1" get="inline" set="null" line="7"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="luxe.utils.unifill.Exception" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Exception.hx">
		<InvalidCodePoint a="code"><x path="Int"/></InvalidCodePoint>
		<InvalidCodeUnitSequence a="index"><x path="Int"/></InvalidCodeUnitSequence>
	</enum>
	<typedef path="luxe.utils.unifill._InternalEncoding.UtfX" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/InternalEncoding.hx" private="1" module="luxe.utils.unifill.InternalEncoding"><c path="luxe.utils.unifill.Utf8"/></typedef>
	<class path="luxe.utils.unifill.InternalEncoding" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/InternalEncoding.hx">
		<internalEncoding public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>Returns Encoding strings on the platform are encoded in.</haxe_doc>
		</internalEncoding>
		<get_internalEncoding get="inline" set="null" line="22" static="1"><f a=""><c path="String"/></f></get_internalEncoding>
		<codeUnitAt public="1" get="inline" set="null" line="35" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the UTF-8/16/32 code unit at position `index` of
       String `s`.</haxe_doc>
		</codeUnitAt>
		<codePointAt public="1" get="inline" set="null" line="44" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the Unicode code point at position `index` of
       String `s`.</haxe_doc>
		</codePointAt>
		<charAt public="1" get="inline" set="null" line="53" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character as a String at position `index` of
       String `s`.</haxe_doc>
		</charAt>
		<codePointCount public="1" get="inline" set="null" line="62" static="1">
			<f a="s:beginIndex:endIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of Unicode code points from `beginIndex`
       to `endIndex` in String `s`.</haxe_doc>
		</codePointCount>
		<codePointWidthAt public="1" get="inline" set="null" line="71" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point at position
       `index` of String `s`.</haxe_doc>
		</codePointWidthAt>
		<codePointWidthBefore public="1" get="inline" set="null" line="80" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point before
       position `index` of String `s`.</haxe_doc>
		</codePointWidthBefore>
		<offsetByCodePoints public="1" get="inline" set="null" line="89" static="1">
			<f a="s:index:codePointOffset">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index within String `s` that is offset from
       position `index` by `codePointOffset` code points.</haxe_doc>
		</offsetByCodePoints>
		<backwardOffsetByCodePoints public="1" get="inline" set="null" line="99" static="1">
			<f a="s:index:codePointOffset">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index within String `s` that is offset from
       position `index` by `codePointOffset` code points counting
       backward.</haxe_doc>
		</backwardOffsetByCodePoints>
		<fromCodePoint public="1" get="inline" set="null" line="107" static="1">
			<f a="codePoint">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts the code point `code` to a character as String.</haxe_doc>
		</fromCodePoint>
		<fromCodePoints public="1" get="inline" set="null" line="114" static="1">
			<f a="codePoints">
				<t path="Iterable"><x path="Int"/></t>
				<c path="String"/>
			</f>
			<haxe_doc>Converts `codePoints` to a String.</haxe_doc>
		</fromCodePoints>
		<validate public="1" get="inline" set="null" line="124" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Validates String `s`.

       If the code unit sequence of `s` is invalid,
       `Exception.InvalidCodeUnitSequence` is throwed.</haxe_doc>
		</validate>
		<isValidString public="1" set="method" line="132" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns if String `s` is valid.</haxe_doc>
		</isValidString>
		<haxe_doc>InternalEncoding provides primitive API to deal with strings across
   all platforms. You should consider adopting Unifill before this.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.InternalEncodingBackwardIter" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/InternalEncodingBackwardIter.hx">
		<string public="1"><c path="String"/></string>
		<beginIndex public="1"><x path="Int"/></beginIndex>
		<index public="1"><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="15"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="19"><f a=""><x path="Int"/></f></next>
		<new public="1" get="inline" set="null" line="9"><f a="s:beginIndex:endIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.InternalEncodingIter" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/InternalEncodingIter.hx">
		<string public="1"><c path="String"/></string>
		<index public="1"><x path="Int"/></index>
		<endIndex public="1"><x path="Int"/></endIndex>
		<hasNext public="1" get="inline" set="null" line="15"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="19"><f a=""><x path="Int"/></f></next>
		<new public="1" get="inline" set="null" line="9"><f a="s:beginIndex:endIndex">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.Unicode" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Unicode.hx">
		<minCodePoint public="1" get="inline" set="null" line="5" static="1"><x path="Int"/></minCodePoint>
		<maxCodePoint public="1" get="inline" set="null" line="6" static="1"><x path="Int"/></maxCodePoint>
		<minHighSurrogate public="1" get="inline" set="null" line="7" static="1"><x path="Int"/></minHighSurrogate>
		<maxHighSurrogate public="1" get="inline" set="null" line="8" static="1"><x path="Int"/></maxHighSurrogate>
		<minLowSurrogate public="1" get="inline" set="null" line="9" static="1"><x path="Int"/></minLowSurrogate>
		<maxLowSurrogate public="1" get="inline" set="null" line="10" static="1"><x path="Int"/></maxLowSurrogate>
		<decodeSurrogate public="1" get="inline" set="null" line="12" static="1"><f a="hi:lo">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></decodeSurrogate>
		<encodeHighSurrogate public="1" get="inline" set="null" line="15" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></encodeHighSurrogate>
		<encodeLowSurrogate public="1" get="inline" set="null" line="18" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></encodeLowSurrogate>
		<isScalar public="1" get="inline" set="null" line="21" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isScalar>
		<isHighSurrogate public="1" get="inline" set="null" line="25" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isHighSurrogate>
		<isLowSurrogate public="1" get="inline" set="null" line="29" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isLowSurrogate>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.Unifill" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Unifill.hx">
		<uLength public="1" get="inline" set="null" line="13" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of Unicode code points of String `s`.</haxe_doc>
		</uLength>
		<uCharAt public="1" get="inline" set="null" line="19" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` by code points of String `s`.</haxe_doc>
		</uCharAt>
		<uCharCodeAt public="1" get="inline" set="null" line="31" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the code point as Int at position `index` by code points of String `s`.</haxe_doc>
		</uCharCodeAt>
		<uCodePointAt public="1" get="inline" set="null" line="43" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="luxe.utils.unifill.CodePoint"/>
			</f>
			<haxe_doc>Returns the code point at position `index` by code points of String `s`.</haxe_doc>
		</uCodePointAt>
		<uIndexOf public="1" get="inline" set="null" line="52" static="1">
			<f a="s:value:?startIndex" v="::0">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of the str within String `s`.

       `startIndex` is counted by code points.</haxe_doc>
		</uIndexOf>
		<uLastIndexOf public="1" get="inline" set="null" line="62" static="1">
			<f a="s:value:?startIndex" v="::null">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of the str within String `s`.

       `startIndex` is counted by code points.</haxe_doc>
		</uLastIndexOf>
		<uSplit public="1" get="inline" set="null" line="72" static="1">
			<f a="s:delimiter">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at each occurence of `delimiter`.</haxe_doc>
		</uSplit>
		<uSubstr public="1" get="inline" set="null" line="85" static="1">
			<f a="s:startIndex:?length" v="::null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `length` characters of String `s`, starting at position `startIndex`.

       `startIndex` and `length` are counted by code points.</haxe_doc>
		</uSubstr>
		<uSubstring public="1" get="inline" set="null" line="100" static="1">
			<f a="s:startIndex:?endIndex" v="::null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of String `s` from `startIndex` to `endIndex`.

       `startIndex` and `endIndex` are counted by code points.</haxe_doc>
		</uSubstring>
		<uIterator public="1" get="inline" set="null" line="112" static="1">
			<f a="s">
				<c path="String"/>
				<t path="Iterator"><x path="luxe.utils.unifill.CodePoint"/></t>
			</f>
			<haxe_doc>Returns an iterator of the code points of String `s`.</haxe_doc>
		</uIterator>
		<uCompare public="1" set="method" line="119" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares String `a` and `b`.</haxe_doc>
		</uCompare>
		<uToString public="1" get="inline" set="null" line="140" static="1">
			<f a="codePoints">
				<t path="Iterable"><x path="luxe.utils.unifill.CodePoint"/></t>
				<c path="String"/>
			</f>
			<haxe_doc>Converts `codePoints` to string.</haxe_doc>
		</uToString>
		<haxe_doc>Unifill provides Unicode-code-point-wise methods on Strings. It is
   ideally used with 'using Unifill' and then acts as an extension to
   the String class.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.Utf" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf.hx" interface="1">
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The number of code units in `this`.</haxe_doc>
		</length>
		<codeUnitAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the code unit at position `index` of `this`.</haxe_doc>
		</codeUnitAt>
		<codePointAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the Unicode code point at position `index` of `this`.</haxe_doc>
		</codePointAt>
		<codePointWidthAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point at position
       `index` of `this`.</haxe_doc>
		</codePointWidthAt>
		<codePointWidthBefore public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point before
       position `index` of `this`.</haxe_doc>
		</codePointWidthBefore>
		<validate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Validates `this`.

       If the code unit sequence of `this` is invalid,
       `Exception.InvalidCodeUnitSequence` is throwed.</haxe_doc>
		</validate>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.Utf16" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx">
		<implements path="luxe.utils.unifill.Utf"/>
		<fromCodePoint public="1" get="inline" set="null" line="8" static="1">
			<f a="codePoint">
				<x path="Int"/>
				<c path="luxe.utils.unifill.Utf16"/>
			</f>
			<haxe_doc>Converts the code point `code` to a character as a Utf16 string.</haxe_doc>
		</fromCodePoint>
		<fromCodePoints public="1" get="inline" set="null" line="17" static="1">
			<f a="codePoints">
				<t path="Iterable"><x path="Int"/></t>
				<c path="luxe.utils.unifill.Utf16"/>
			</f>
			<haxe_doc>Converts `codePoints` to a Utf16 string.</haxe_doc>
		</fromCodePoints>
		<fromString public="1" get="inline" set="null" line="25" static="1"><f a="s">
	<c path="String"/>
	<c path="luxe.utils.unifill.Utf16"/>
</f></fromString>
		<fromArray public="1" get="inline" set="null" line="29" static="1"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="luxe.utils.unifill.Utf16"/>
</f></fromArray>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<codeUnitAt public="1" get="inline" set="null" line="38">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the UTF-16 code unit at position `index` of `this`.</haxe_doc>
		</codeUnitAt>
		<codePointAt public="1" set="method" line="46">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the Unicode code point at position `index` of
       `this`.</haxe_doc>
		</codePointAt>
		<charAt public="1" get="inline" set="null" line="54">
			<f a="index">
				<x path="Int"/>
				<c path="luxe.utils.unifill.Utf16"/>
			</f>
			<haxe_doc>Returns the character as a String at position `index` of
       `this`.</haxe_doc>
		</charAt>
		<codePointCount public="1" set="method" line="62">
			<f a="beginIndex:endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of Unicode code points from `beginIndex`
       to `endIndex` in `this`.</haxe_doc>
		</codePointCount>
		<codePointWidthAt public="1" get="inline" set="null" line="76">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point at position
       `index` of `this`.</haxe_doc>
		</codePointWidthAt>
		<codePointWidthBefore public="1" get="inline" set="null" line="85">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point before
       position `index` of `this`.</haxe_doc>
		</codePointWidthBefore>
		<offsetByCodePoints public="1" get="inline" set="null" line="93">
			<f a="index:codePointOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index within `this` that is offset from
       position `index` by `codePointOffset` code points.</haxe_doc>
		</offsetByCodePoints>
		<substr public="1" get="inline" set="null" line="104">
			<f a="index:?len" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="luxe.utils.unifill.Utf16"/>
			</f>
			<haxe_doc>Returns `len` code units of `this`, starting at position pos.</haxe_doc>
		</substr>
		<validate public="1" set="method" line="114">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Validates `this` Utf16 string.

       If the code unit sequence of `this` is invalid,
       `Exception.InvalidCodeUnitSequence` is throwed.</haxe_doc>
		</validate>
		<toString public="1" get="inline" set="null" line="124"><f a=""><c path="String"/></f></toString>
		<toArray public="1" get="inline" set="null" line="128"><f a=""><c path="Array"><x path="Int"/></c></f></toArray>
		<str><x path="luxe.utils.unifill._Utf16.StringU16"/></str>
		<get_length get="inline" set="null" line="138"><f a=""><x path="Int"/></f></get_length>
		<forward_offset_by_code_points get="inline" set="null" line="142"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></forward_offset_by_code_points>
		<backward_offset_by_code_points get="inline" set="null" line="152"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></backward_offset_by_code_points>
		<new get="inline" set="null" line="134"><f a="s">
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill._Utf16.Utf16Impl" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
		<code_point_width public="1" get="inline" set="null" line="165" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></code_point_width>
		<find_prev_code_point public="1" get="inline" set="null" line="169" static="1"><f a="accessor:index">
	<f a="">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
</f></find_prev_code_point>
		<encode_code_point public="1" set="method" line="174" static="1"><f a="addUnit:codePoint">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></encode_code_point>
		<decode_code_point public="1" set="method" line="183" static="1"><f a="len:accessor:index">
	<x path="Int"/>
	<f a="">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
</f></decode_code_point>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="luxe.utils.unifill._Utf16.StringU16Buffer" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
		<this><c path="Array"><x path="Int"/></c></this>
		<impl><class path="luxe.utils.unifill._Utf16.StringU16Buffer_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
	<_new public="1" get="inline" set="null" line="276" static="1">
		<f a=""><c path="Array"><x path="Int"/></c></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<addUnit public="1" get="inline" set="null" line="280" static="1">
		<f a="this:unit">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</addUnit>
	<getStringU16 public="1" get="inline" set="null" line="284" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="luxe.utils.unifill._Utf16.StringU16"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getStringU16>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="luxe.utils.unifill._Utf16.StringU16Buffer_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
		<_new public="1" get="inline" set="null" line="276" static="1">
			<f a=""><c path="Array"><x path="Int"/></c></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<addUnit public="1" get="inline" set="null" line="280" static="1">
			<f a="this:unit">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</addUnit>
		<getStringU16 public="1" get="inline" set="null" line="284" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="luxe.utils.unifill._Utf16.StringU16"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getStringU16>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="luxe.utils.unifill._Utf16.StringU16" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
		<this><c path="Array"><x path="Int"/></c></this>
		<impl><class path="luxe.utils.unifill._Utf16.StringU16_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
	<fromString public="1" set="method" line="292" static="1"><f a="s">
	<c path="String"/>
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
</f></fromString>
	<ofArray public="1" get="inline" set="null" line="302" static="1"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
</f></ofArray>
	<fromArray public="1" get="inline" set="null" line="306" static="1"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
</f></fromArray>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<codeUnitAt public="1" get="inline" set="null" line="312" static="1">
		<f a="this:index">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</codeUnitAt>
	<substr public="1" get="inline" set="null" line="316" static="1">
		<f a="this:index:?len" v="::null">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
			<x path="Int"/>
			<x path="luxe.utils.unifill._Utf16.StringU16"/>
		</f>
		<meta><m n=":impl"/></meta>
	</substr>
	<toString public="1" set="method" line="326" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toArray public="1" get="inline" set="null" line="339" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</toArray>
	<_new get="inline" set="null" line="343" static="1">
		<f a="a">
			<c path="Array"><x path="Int"/></c>
			<c path="Array"><x path="Int"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="347" static="1">
		<f a="this">
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="luxe.utils.unifill._Utf16.StringU16_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf16.hx" private="1" module="luxe.utils.unifill.Utf16">
		<fromString public="1" set="method" line="292" static="1"><f a="s">
	<c path="String"/>
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
</f></fromString>
		<ofArray public="1" get="inline" set="null" line="302" static="1"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
</f></ofArray>
		<fromArray public="1" get="inline" set="null" line="306" static="1"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<x path="luxe.utils.unifill._Utf16.StringU16"/>
</f></fromArray>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<codeUnitAt public="1" get="inline" set="null" line="312" static="1">
			<f a="this:index">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</codeUnitAt>
		<substr public="1" get="inline" set="null" line="316" static="1">
			<f a="this:index:?len" v="::null">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="luxe.utils.unifill._Utf16.StringU16"/>
			</f>
			<meta><m n=":impl"/></meta>
		</substr>
		<toString public="1" set="method" line="326" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toArray public="1" get="inline" set="null" line="339" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</toArray>
		<_new get="inline" set="null" line="343" static="1">
			<f a="a">
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><x path="Int"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="347" static="1">
			<f a="this">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.Utf32" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf32.hx">
		<implements path="luxe.utils.unifill.Utf"/>
		<fromCodePoint public="1" get="inline" set="null" line="160" static="1"><f a="codePoint">
	<x path="Int"/>
	<c path="luxe.utils.unifill.Utf32"/>
</f></fromCodePoint>
		<fromCodePoints public="1" get="inline" set="null" line="164" static="1"><f a="codePoints">
	<t path="Iterable"><x path="Int"/></t>
	<c path="luxe.utils.unifill.Utf32"/>
</f></fromCodePoints>
		<fromString public="1" get="inline" set="null" line="168" static="1"><f a="string">
	<c path="String"/>
	<c path="luxe.utils.unifill.Utf32"/>
</f></fromString>
		<fromArray public="1" get="inline" set="null" line="173" static="1"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="luxe.utils.unifill.Utf32"/>
</f></fromArray>
		<concat get="inline" set="null" line="222" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</concat>
		<cmp get="inline" set="null" line="227" static="1"><f a="a:b">
	<c path="luxe.utils.unifill.Utf32"/>
	<c path="luxe.utils.unifill.Utf32"/>
	<x path="Int"/>
</f></cmp>
		<eq get="inline" set="null" line="232" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A==B</e></m></meta>
		</eq>
		<ne get="inline" set="null" line="238" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A!=B</e></m></meta>
		</ne>
		<lt get="inline" set="null" line="243" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<B]]></e></m></meta>
		</lt>
		<lte get="inline" set="null" line="248" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A<=B]]></e></m></meta>
		</lte>
		<gt get="inline" set="null" line="253" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>B]]></e></m></meta>
		</gt>
		<gte get="inline" set="null" line="258" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e><![CDATA[A>=B]]></e></m></meta>
		</gte>
		<cons get="inline" set="null" line="263" static="1">
			<f a="a:b">
				<x path="luxe.utils.unifill.CodePoint"/>
				<c path="luxe.utils.unifill.Utf32"/>
				<c path="luxe.utils.unifill.Utf32"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</cons>
		<snoc get="inline" set="null" line="271" static="1">
			<f a="a:b">
				<c path="luxe.utils.unifill.Utf32"/>
				<x path="luxe.utils.unifill.CodePoint"/>
				<c path="luxe.utils.unifill.Utf32"/>
			</f>
			<meta><m n=":op"><e>A+B</e></m></meta>
		</snoc>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<charAt public="1" get="inline" set="null" line="179"><f a="index">
	<x path="Int"/>
	<c path="luxe.utils.unifill.Utf32"/>
</f></charAt>
		<codeUnitAt public="1" get="inline" set="null" line="187"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></codeUnitAt>
		<codePointAt public="1" get="inline" set="null" line="191"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointAt>
		<codePointWidthAt public="1" get="inline" set="null" line="195"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointWidthAt>
		<codePointWidthBefore public="1" get="inline" set="null" line="199"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></codePointWidthBefore>
		<toString public="1" get="inline" set="null" line="203"><f a=""><c path="String"/></f></toString>
		<toArray public="1" get="inline" set="null" line="207"><f a=""><c path="Array"><x path="Int"/></c></f></toArray>
		<validate public="1" set="method" line="211"><f a=""><x path="Void"/></f></validate>
		<array><c path="Array"><x path="Int"/></c></array>
		<get_length get="inline" set="null" line="280"><f a=""><x path="Int"/></f></get_length>
		<new get="inline" set="null" line="284"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Utf32 provides a UTF-32-encoded string.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.Utf8" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf8.hx">
		<implements path="luxe.utils.unifill.Utf"/>
		<fromCodePoint public="1" get="inline" set="null" line="11" static="1">
			<f a="codePoint">
				<x path="Int"/>
				<c path="luxe.utils.unifill.Utf8"/>
			</f>
			<haxe_doc>Converts the code point `code` to a character as a Utf8 string.</haxe_doc>
		</fromCodePoint>
		<fromCodePoints public="1" get="inline" set="null" line="20" static="1">
			<f a="codePoints">
				<t path="Iterable"><x path="Int"/></t>
				<c path="luxe.utils.unifill.Utf8"/>
			</f>
			<haxe_doc>Converts `codePoints` to a Utf8 string.</haxe_doc>
		</fromCodePoints>
		<fromString public="1" get="inline" set="null" line="28" static="1"><f a="s">
	<c path="String"/>
	<c path="luxe.utils.unifill.Utf8"/>
</f></fromString>
		<fromBytes public="1" get="inline" set="null" line="32" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="luxe.utils.unifill.Utf8"/>
</f></fromBytes>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<codeUnitAt public="1" get="inline" set="null" line="41">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the UTF-8 code unit at position `index` of `this`.</haxe_doc>
		</codeUnitAt>
		<codePointAt public="1" set="method" line="49">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the Unicode code point at position `index` of
       `this`.</haxe_doc>
		</codePointAt>
		<charAt public="1" get="inline" set="null" line="57">
			<f a="index">
				<x path="Int"/>
				<c path="luxe.utils.unifill.Utf8"/>
			</f>
			<haxe_doc>Returns the character as a String at position `index` of
       `this`.</haxe_doc>
		</charAt>
		<codePointCount public="1" set="method" line="65">
			<f a="beginIndex:endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of Unicode code points from `beginIndex`
       to `endIndex` in `this`.</haxe_doc>
		</codePointCount>
		<codePointWidthAt public="1" get="inline" set="null" line="79">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point at position
       `index` of `this`.</haxe_doc>
		</codePointWidthAt>
		<codePointWidthBefore public="1" get="inline" set="null" line="88">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of units of the code point before
       position `index` of `this`.</haxe_doc>
		</codePointWidthBefore>
		<offsetByCodePoints public="1" get="inline" set="null" line="96">
			<f a="index:codePointOffset">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index within `this` that is offset from
       position `index` by `codePointOffset` code points.</haxe_doc>
		</offsetByCodePoints>
		<substr public="1" get="inline" set="null" line="107">
			<f a="index:?len" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="luxe.utils.unifill.Utf8"/>
			</f>
			<haxe_doc>Returns `len` code units of `this`, starting at position pos.</haxe_doc>
		</substr>
		<validate public="1" set="method" line="117">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Validates `this` Utf8 string.

       If the code unit sequence of `this` is invalid,
       `Exception.InvalidCodeUnitSequence` is throwed.</haxe_doc>
		</validate>
		<toString public="1" get="inline" set="null" line="127"><f a=""><c path="String"/></f></toString>
		<toBytes public="1" get="inline" set="null" line="131"><f a=""><c path="haxe.io.Bytes"/></f></toBytes>
		<str><x path="luxe.utils.unifill._Utf8.StringU8"/></str>
		<get_length get="inline" set="null" line="141"><f a=""><x path="Int"/></f></get_length>
		<forward_offset_by_code_points get="inline" set="null" line="145"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></forward_offset_by_code_points>
		<backward_offset_by_code_points get="inline" set="null" line="155"><f a="index:codePointOffset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></backward_offset_by_code_points>
		<new get="inline" set="null" line="137"><f a="s">
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill._Utf8.Utf8Impl" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf8.hx" private="1" module="luxe.utils.unifill.Utf8">
		<code_point_width public="1" get="inline" set="null" line="168" static="1"><f a="c">
	<x path="Int"/>
	<x path="Int"/>
</f></code_point_width>
		<find_prev_code_point public="1" get="inline" set="null" line="172" static="1"><f a="accessor:index">
	<f a="">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
</f></find_prev_code_point>
		<encode_code_point public="1" set="method" line="181" static="1"><f a="addUnit:codePoint">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></encode_code_point>
		<decode_code_point public="1" set="method" line="201" static="1"><f a="len:accessor:index">
	<x path="Int"/>
	<f a="">
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
</f></decode_code_point>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="luxe.utils.unifill._Utf8.StringU8" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf8.hx" private="1" module="luxe.utils.unifill.Utf8">
		<this><c path="String"/></this>
		<impl><class path="luxe.utils.unifill._Utf8.StringU8_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf8.hx" private="1" module="luxe.utils.unifill.Utf8">
	<fromString public="1" get="inline" set="null" line="253" static="1"><f a="s">
	<c path="String"/>
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
</f></fromString>
	<ofBytes public="1" get="inline" set="null" line="257" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
</f></ofBytes>
	<fromBytes public="1" get="inline" set="null" line="261" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
</f></fromBytes>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<codeUnitAt public="1" get="inline" set="null" line="267" static="1">
		<f a="this:index">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</codeUnitAt>
	<substr public="1" get="inline" set="null" line="271" static="1">
		<f a="this:index:?len" v="::null">
			<c path="String"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="luxe.utils.unifill._Utf8.StringU8"/>
		</f>
		<meta><m n=":impl"/></meta>
	</substr>
	<toString public="1" get="inline" set="null" line="275" static="1">
		<f a="this">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<toBytes public="1" get="inline" set="null" line="279" static="1">
		<f a="this">
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toBytes>
	<_new get="inline" set="null" line="283" static="1">
		<f a="s">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="287" static="1">
		<f a="this">
			<c path="String"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="luxe.utils.unifill._Utf8.StringU8_Impl_" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/Utf8.hx" private="1" module="luxe.utils.unifill.Utf8">
		<fromString public="1" get="inline" set="null" line="253" static="1"><f a="s">
	<c path="String"/>
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
</f></fromString>
		<ofBytes public="1" get="inline" set="null" line="257" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
</f></ofBytes>
		<fromBytes public="1" get="inline" set="null" line="261" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="luxe.utils.unifill._Utf8.StringU8"/>
</f></fromBytes>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<codeUnitAt public="1" get="inline" set="null" line="267" static="1">
			<f a="this:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</codeUnitAt>
		<substr public="1" get="inline" set="null" line="271" static="1">
			<f a="this:index:?len" v="::null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="luxe.utils.unifill._Utf8.StringU8"/>
			</f>
			<meta><m n=":impl"/></meta>
		</substr>
		<toString public="1" get="inline" set="null" line="275" static="1">
			<f a="this">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<toBytes public="1" get="inline" set="null" line="279" static="1">
			<f a="this">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toBytes>
		<_new get="inline" set="null" line="283" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="287" static="1">
			<f a="this">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.UtfIter" params="S" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/UtfIter.hx">
		<string public="1"><c path="luxe.utils.unifill.UtfIter.S"/></string>
		<index public="1"><x path="Int"/></index>
		<endIndex public="1"><x path="Int"/></endIndex>
		<hasNext public="1" get="inline" set="null" line="15"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="19"><f a=""><x path="Int"/></f></next>
		<new public="1" get="inline" set="null" line="9"><f a="s:beginIndex:endIndex">
	<c path="luxe.utils.unifill.UtfIter.S"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="luxe.utils.unifill.UtfTools" params="" file="/Users/sven/dev/luxe/luxe/luxe/utils/unifill/UtfTools.hx">
		<compare public="1" params="T" set="method" line="9" static="1"><f a="a:b">
	<c path="compare.T"/>
	<c path="compare.T"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>UtfTools provides primitive API to deal with strings across all
   platforms. You should consider adopting Unifill before this.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.BatchState" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BatchState.hx">
		<batcher public="1"><c path="phoenix.Batcher"/></batcher>
		<geom_state public="1"><c path="phoenix.geometry.GeometryState"/></geom_state>
		<last_geom_state public="1"><c path="phoenix.geometry.GeometryState"/></last_geom_state>
		<last_texture_id public="1"><d/></last_texture_id>
		<last_shader_id public="1"><d/></last_shader_id>
		<last_group public="1"><x path="Int"/></last_group>
		<is_clipping public="1"><x path="Bool"/></is_clipping>
		<clip_rect public="1"><c path="phoenix.Rectangle"/></clip_rect>
		<last_clip_rect public="1"><c path="phoenix.Rectangle"/></last_clip_rect>
		<log public="1"><x path="Bool"/></log>
		<active_shader public="1" get="inline" set="null" line="32"><f a=""><c path="phoenix.Shader"/></f></active_shader>
		<activate public="1" get="inline" set="null" line="44"><f a="batcher">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></activate>
		<deactivate public="1" set="method" line="159"><f a="batcher">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></deactivate>
		<update public="1" set="method" line="181"><f a="geom">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Bool"/>
</f></update>
		<str public="1" set="method" line="196"><f a=""><x path="Void"/></f></str>
		<new public="1" set="method" line="26"><f a="_r">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="phoenix.PrimitiveType" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" module="phoenix.Batcher">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="phoenix._Batcher.PrimitiveType_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" private="1" module="phoenix.Batcher">
	<none public="1" get="inline" set="null" line="20" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</none>
	<line_strip public="1" get="inline" set="null" line="21" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</line_strip>
	<line_loop public="1" get="inline" set="null" line="22" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</line_loop>
	<lines public="1" get="inline" set="null" line="23" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</lines>
	<triangle_strip public="1" get="inline" set="null" line="24" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triangle_strip>
	<triangles public="1" get="inline" set="null" line="25" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triangles>
	<triangle_fan public="1" get="inline" set="null" line="26" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</triangle_fan>
	<points public="1" get="inline" set="null" line="27" static="1">
		<x path="phoenix.PrimitiveType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</points>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="phoenix._Batcher.PrimitiveType_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" private="1" module="phoenix.Batcher">
		<none public="1" get="inline" set="null" line="20" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</none>
		<line_strip public="1" get="inline" set="null" line="21" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</line_strip>
		<line_loop public="1" get="inline" set="null" line="22" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</line_loop>
		<lines public="1" get="inline" set="null" line="23" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</lines>
		<triangle_strip public="1" get="inline" set="null" line="24" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triangle_strip>
		<triangles public="1" get="inline" set="null" line="25" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triangles>
		<triangle_fan public="1" get="inline" set="null" line="26" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</triangle_fan>
		<points public="1" get="inline" set="null" line="27" static="1">
			<x path="phoenix.PrimitiveType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</points>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="phoenix.BlendMode" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" module="phoenix.Batcher">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="phoenix._Batcher.BlendMode_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" private="1" module="phoenix.Batcher">
	<zero public="1" get="inline" set="null" line="33" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</zero>
	<one public="1" get="inline" set="null" line="34" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</one>
	<src_color public="1" get="inline" set="null" line="35" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</src_color>
	<one_minus_src_color public="1" get="inline" set="null" line="36" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</one_minus_src_color>
	<src_alpha public="1" get="inline" set="null" line="37" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</src_alpha>
	<one_minus_src_alpha public="1" get="inline" set="null" line="38" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</one_minus_src_alpha>
	<dst_alpha public="1" get="inline" set="null" line="39" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dst_alpha>
	<one_minus_dst_alpha public="1" get="inline" set="null" line="40" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</one_minus_dst_alpha>
	<dst_color public="1" get="inline" set="null" line="41" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</dst_color>
	<one_minus_dst_color public="1" get="inline" set="null" line="42" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</one_minus_dst_color>
	<src_alpha_saturate public="1" get="inline" set="null" line="43" static="1">
		<x path="phoenix.BlendMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</src_alpha_saturate>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="phoenix._Batcher.BlendMode_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" private="1" module="phoenix.Batcher">
		<zero public="1" get="inline" set="null" line="33" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</zero>
		<one public="1" get="inline" set="null" line="34" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</one>
		<src_color public="1" get="inline" set="null" line="35" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</src_color>
		<one_minus_src_color public="1" get="inline" set="null" line="36" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</one_minus_src_color>
		<src_alpha public="1" get="inline" set="null" line="37" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</src_alpha>
		<one_minus_src_alpha public="1" get="inline" set="null" line="38" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</one_minus_src_alpha>
		<dst_alpha public="1" get="inline" set="null" line="39" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dst_alpha>
		<one_minus_dst_alpha public="1" get="inline" set="null" line="40" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</one_minus_dst_alpha>
		<dst_color public="1" get="inline" set="null" line="41" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</dst_color>
		<one_minus_dst_color public="1" get="inline" set="null" line="42" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</one_minus_dst_color>
		<src_alpha_saturate public="1" get="inline" set="null" line="43" static="1">
			<x path="phoenix.BlendMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</src_alpha_saturate>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="phoenix.BlendEquation" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" module="phoenix.Batcher">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="phoenix._Batcher.BlendEquation_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" private="1" module="phoenix.Batcher">
	<add public="1" get="inline" set="null" line="49" static="1">
		<x path="phoenix.BlendEquation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</add>
	<subtract public="1" get="inline" set="null" line="50" static="1">
		<x path="phoenix.BlendEquation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</subtract>
	<reverse_subtract public="1" get="inline" set="null" line="51" static="1">
		<x path="phoenix.BlendEquation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</reverse_subtract>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="phoenix._Batcher.BlendEquation_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" private="1" module="phoenix.Batcher">
		<add public="1" get="inline" set="null" line="49" static="1">
			<x path="phoenix.BlendEquation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</add>
		<subtract public="1" get="inline" set="null" line="50" static="1">
			<x path="phoenix.BlendEquation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</subtract>
		<reverse_subtract public="1" get="inline" set="null" line="51" static="1">
			<x path="phoenix.BlendEquation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</reverse_subtract>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="phoenix.BatchGroup" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx" module="phoenix.Batcher">
		<pre_render public="1"><f a="">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></pre_render>
		<post_render public="1"><f a="">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></post_render>
		<new public="1" set="method" line="56"><f a="_pre:_post">
	<f a="">
		<c path="phoenix.Batcher"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="phoenix.Batcher"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Batcher" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Batcher.hx">
		<_sequence_key line="140" static="1"><x path="Int"/></_sequence_key>
		<id public="1"><c path="String"/></id>
		<layer public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</layer>
		<enabled public="1"><x path="Bool"/></enabled>
		<geometry public="1"><c path="luxe.structural.BalancedBST_phoenix_geometry_GeometryKey_phoenix_geometry_Geometry"/></geometry>
		<groups public="1"><x path="Map">
	<x path="Int"/>
	<c path="Array"><c path="phoenix.BatchGroup"/></c>
</x></groups>
		<tree_changed public="1"><x path="Bool"/></tree_changed>
		<vertlist public="1"><t path="snow.utils.Float32Array"/></vertlist>
		<tcoordlist public="1"><t path="snow.utils.Float32Array"/></tcoordlist>
		<colorlist public="1"><t path="snow.utils.Float32Array"/></colorlist>
		<normallist public="1"><t path="snow.utils.Float32Array"/></normallist>
		<static_vertlist public="1"><t path="snow.utils.Float32Array"/></static_vertlist>
		<static_tcoordlist public="1"><t path="snow.utils.Float32Array"/></static_tcoordlist>
		<static_colorlist public="1"><t path="snow.utils.Float32Array"/></static_colorlist>
		<static_normallist public="1"><t path="snow.utils.Float32Array"/></static_normallist>
		<vert_floats public="1"><x path="Int"/></vert_floats>
		<tcoord_floats public="1"><x path="Int"/></tcoord_floats>
		<color_floats public="1"><x path="Int"/></color_floats>
		<normal_floats public="1"><x path="Int"/></normal_floats>
		<static_vert_floats public="1"><x path="Int"/></static_vert_floats>
		<static_tcoord_floats public="1"><x path="Int"/></static_tcoord_floats>
		<static_color_floats public="1"><x path="Int"/></static_color_floats>
		<static_normal_floats public="1"><x path="Int"/></static_normal_floats>
		<buffer_count public="1"><x path="Int"/></buffer_count>
		<buffer_index public="1"><x path="Int"/></buffer_index>
		<max_verts public="1"><x path="Int"/></max_verts>
		<max_floats public="1"><x path="Int"/></max_floats>
		<vert_count public="1"><x path="Int"/></vert_count>
		<vertexBuffers public="1"><c path="Array"><t path="snow.render.opengl.GLBuffer"/></c></vertexBuffers>
		<tcoordBuffers public="1"><c path="Array"><t path="snow.render.opengl.GLBuffer"/></c></tcoordBuffers>
		<vcolorBuffers public="1"><c path="Array"><t path="snow.render.opengl.GLBuffer"/></c></vcolorBuffers>
		<projectionmatrix_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></projectionmatrix_attribute>
		<modelviewmatrix_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></modelviewmatrix_attribute>
		<vert_attribute public="1"><x path="Int"/></vert_attribute>
		<tcoord_attribute public="1"><x path="Int"/></tcoord_attribute>
		<color_attribute public="1"><x path="Int"/></color_attribute>
		<tex0_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex0_attribute>
		<tex1_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex1_attribute>
		<tex2_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex2_attribute>
		<tex3_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex3_attribute>
		<tex4_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex4_attribute>
		<tex5_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex5_attribute>
		<tex6_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex6_attribute>
		<tex7_attribute public="1"><t path="snow.render.opengl.GLUniformLocation"/></tex7_attribute>
		<renderer public="1"><c path="phoenix.Renderer"/></renderer>
		<view public="1"><c path="phoenix.Camera"/></view>
		<draw_calls public="1"><x path="Int"/></draw_calls>
		<dynamic_batched_count public="1"><x path="Int"/></dynamic_batched_count>
		<static_batched_count public="1"><x path="Int"/></static_batched_count>
		<visible_count public="1"><x path="Int"/></visible_count>
		<log public="1"><x path="Bool"/></log>
		<name public="1"><c path="String"/></name>
		<sequence public="1">
			<x path="Int"/>
			<meta><m n=":noCompletion"/></meta>
		</sequence>
		<set_layer public="1" set="method" line="217"><f a="_layer">
	<x path="Int"/>
	<x path="Int"/>
</f></set_layer>
		<toString set="method" line="229"><f a=""><c path="String"/></f></toString>
		<compare public="1" set="method" line="234"><f a="other">
	<c path="phoenix.Batcher"/>
	<x path="Int"/>
</f></compare>
		<add_group public="1" set="method" line="243"><f a="_group:?_pre_render:?_post_render" v=":null:null">
	<x path="Int"/>
	<f a="">
		<c path="phoenix.Batcher"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="phoenix.Batcher"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></add_group>
		<compare_rule_to_string public="1" set="method" line="253"><f a="r">
	<x path="Int"/>
	<c path="String"/>
</f></compare_rule_to_string>
		<compare_rule public="1" set="method" line="327"><f a="a:b">
	<c path="phoenix.geometry.GeometryKey"/>
	<c path="phoenix.geometry.GeometryKey"/>
	<x path="Int"/>
</f></compare_rule>
		<geometry_compare public="1" set="method" line="417"><f a="a:b">
	<c path="phoenix.geometry.GeometryKey"/>
	<c path="phoenix.geometry.GeometryKey"/>
	<x path="Int"/>
</f></geometry_compare>
		<list_geometry set="method" line="513"><f a=""><x path="Void"/></f></list_geometry>
		<add public="1" set="method" line="520"><f a="_geom:?_force_add" v=":false">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></add>
		<empty public="1" set="method" line="552">
			<f a="?_drop" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>:todo: this is a temporary construct as part of #119</haxe_doc>
		</empty>
		<remove public="1" set="method" line="567"><f a="_geom:?_remove_batcher_from_geometry" v=":true">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></remove>
		<shader_activate public="1" set="method" line="591"><f a="_shader">
	<c path="phoenix.Shader"/>
	<x path="Void"/>
</f></shader_activate>
		<state public="1"><c path="phoenix.BatchState"/></state>
		<batch public="1" set="method" line="622"><f a="?persist_immediate" v="false">
	<x path="Bool"/>
	<x path="Void"/>
</f></batch>
		<draw public="1" set="method" line="734"><f a="?persist_immediate" v="false">
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<submit_static_geometry public="1" set="method" line="753"><f a="geom">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Void"/>
</f></submit_static_geometry>
		<submit_current_vertex_list public="1" set="method" line="846"><f a="type">
	<x path="phoenix.PrimitiveType"/>
	<x path="Void"/>
</f></submit_current_vertex_list>
		<geometry_batch set="method" line="900"><f a="geom">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Void"/>
</f></geometry_batch>
		<geometry_batch_static set="method" line="922"><f a="geom">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Void"/>
</f></geometry_batch_static>
		<_enable_attributes public="1" set="method" line="938">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_enable_attributes>
		<_disable_attributes set="method" line="946"><f a=""><x path="Void"/></f></_disable_attributes>
		<new public="1" set="method" line="143"><f a="_r:?_name" v=":''">
	<c path="phoenix.Renderer"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="phoenix.TextAlign" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx" module="phoenix.BitmapFont">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="phoenix._BitmapFont.TextAlign_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx" private="1" module="phoenix.BitmapFont">
	<left public="1" get="inline" set="null" line="28" static="1">
		<x path="phoenix.TextAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</left>
	<right public="1" get="inline" set="null" line="29" static="1">
		<x path="phoenix.TextAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</right>
	<center public="1" get="inline" set="null" line="30" static="1">
		<x path="phoenix.TextAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</center>
	<top public="1" get="inline" set="null" line="31" static="1">
		<x path="phoenix.TextAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</top>
	<bottom public="1" get="inline" set="null" line="32" static="1">
		<x path="phoenix.TextAlign"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</bottom>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="phoenix._BitmapFont.TextAlign_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx" private="1" module="phoenix.BitmapFont">
		<left public="1" get="inline" set="null" line="28" static="1">
			<x path="phoenix.TextAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</left>
		<right public="1" get="inline" set="null" line="29" static="1">
			<x path="phoenix.TextAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</right>
		<center public="1" get="inline" set="null" line="30" static="1">
			<x path="phoenix.TextAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</center>
		<top public="1" get="inline" set="null" line="31" static="1">
			<x path="phoenix.TextAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</top>
		<bottom public="1" get="inline" set="null" line="32" static="1">
			<x path="phoenix.TextAlign"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</bottom>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="phoenix.Character" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx" module="phoenix.BitmapFont"><a>
	<yoffset><x path="Float"/></yoffset>
	<y><x path="Float"/></y>
	<xoffset><x path="Float"/></xoffset>
	<xadvance><x path="Float"/></xadvance>
	<x><x path="Float"/></x>
	<width><x path="Float"/></width>
	<page><x path="Int"/></page>
	<id><x path="Int"/></id>
	<height><x path="Float"/></height>
</a></typedef>
	<typedef path="phoenix.FontInfo" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx" module="phoenix.BitmapFont"><a>
	<point_size><x path="Float"/></point_size>
	<pages><c path="Array"><a>
	<id><x path="Int"/></id>
	<file><c path="String"/></file>
</a></c></pages>
	<line_height><x path="Float"/></line_height>
	<kernings><x path="Map">
	<x path="Int"/>
	<x path="Map">
		<x path="Int"/>
		<x path="Float"/>
	</x>
</x></kernings>
	<face><c path="String"/></face>
	<chars><x path="Map">
	<x path="Int"/>
	<t path="phoenix.Character"/>
</x></chars>
	<char_count><x path="Int"/></char_count>
	<base_size><x path="Float"/></base_size>
</a></typedef>
	<class path="phoenix.BitmapFont" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx">
		<extends path="luxe.resource.Resource"/>
		<generic_names line="76" static="1"><c path="Array"><c path="String"/></c></generic_names>
		<load public="1" set="method" line="300" static="1"><f a="?_options" v="null">
	<t path="luxe.options.BitmapFontOptions"/>
	<c path="phoenix.BitmapFont"/>
</f></load>
		<pages public="1"><x path="Map">
	<x path="Int"/>
	<c path="phoenix.Texture"/>
</x></pages>
		<info public="1"><t path="phoenix.FontInfo"/></info>
		<options public="1"><t path="luxe.options.BitmapFontOptions"/></options>
		<onload public="1"><f a="">
	<c path="phoenix.BitmapFont"/>
	<x path="Void"/>
</f></onload>
		<loaded public="1"><x path="Bool"/></loaded>
		<space_char public="1"><t path="phoenix.Character"/></space_char>
		<items_loaded><x path="Int"/></items_loaded>
		<items_total><x path="Int"/></items_total>
		<from_string public="1" set="method" line="96">
			<f a="_id:_bitmapfont_data:?_path:?_onload:?_custom_pages:?_silent" v="::'assets/':null:null:false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<c path="phoenix.BitmapFont"/>
					<x path="Void"/>
				</f>
				<c path="Array"><c path="phoenix.Texture"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create this bitmap font from the given string data,
                with path to search for textures, onload callback
                and if textures are already loaded, a custom array of pages</haxe_doc>
		</from_string>
		<kerning public="1" get="inline" set="null" line="139">
			<f a="_first:_second">
				<x path="Int"/>
				<x path="Int"/>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Get the kerning between two glyphs, 0 if none.
                A glyph int id is the value from 'c'.charCodeAt(0)</haxe_doc>
		</kerning>
		<wrap_string_to_bounds public="1" set="method" line="151"><f a="_string:_bounds:?_point_size:?_letter_spc" v="::1.0f:0.0f">
	<c path="String"/>
	<c path="phoenix.Rectangle"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
</f></wrap_string_to_bounds>
		<width_of public="1" get="inline" set="null" line="217"><f a="_string:?_point_size:?_letter_spc:?_line_widths" v=":1.0f:0.0f:null">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
</f></width_of>
		<height_of public="1" get="inline" set="null" line="280"><f a="_string:_point_size:?_line_spc" v="::0.0f">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></height_of>
		<dimensions_of public="1" get="inline" set="null" line="289">
			<f a="_string:_point_size:_into:?_letter_spc:?_line_spc" v=":::0.0f:0.0f">
				<c path="String"/>
				<x path="Float"/>
				<t path="luxe.Vector"/>
				<x path="Float"/>
				<x path="Float"/>
				<t path="luxe.Vector"/>
			</f>
			<haxe_doc>Return the dimensions of a given string, at the specified point size.
            You can also use width_of or height_of, this is a convenience for those</haxe_doc>
		</dimensions_of>
		<height_of_lines public="1" get="inline" set="null" line="324"><f a="_lines:_point_size:?_line_spc" v="::0.0f">
	<c path="Array"><c path="String"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></height_of_lines>
		<default_options set="method" line="331"><f a=""><x path="Void"/></f></default_options>
		<do_onload set="method" line="365"><f a="?success" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></do_onload>
		<page_loaded set="method" line="375"><f a="t">
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></page_loaded>
		<load_pages set="method" line="387"><f a="?_path:?_custom_pages" v="'assets/':null">
	<c path="String"/>
	<c path="Array"><c path="phoenix.Texture"/></c>
	<x path="Void"/>
</f></load_pages>
		<draw_text public="1" set="method" line="438"><f a="opt">
	<t path="phoenix.geometry.TextGeometryOptions"/>
	<c path="phoenix.geometry.TextGeometry"/>
</f></draw_text>
		<toString set="method" line="448"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="78"><f a="?_options" v="null">
	<t path="luxe.options.BitmapFontOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix._BitmapFont.Parser" params="" file="/Users/sven/dev/luxe/luxe/phoenix/BitmapFont.hx" private="1" module="phoenix.BitmapFont">
		<parse public="1" set="method" line="459" static="1"><f a="_font_data">
	<c path="String"/>
	<t path="phoenix.FontInfo"/>
</f></parse>
		<parse_token set="method" line="495" static="1"><f a="_token:_tokens:_info">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<t path="phoenix.FontInfo"/>
	<x path="Void"/>
</f></parse_token>
		<tokenize_line set="method" line="564" static="1"><f a="_tokens">
	<c path="Array"><c path="String"/></c>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
</f></tokenize_line>
		<trim get="inline" set="null" line="577" static="1"><f a="_s">
	<c path="String"/>
	<c path="String"/>
</f></trim>
		<unquote get="inline" set="null" line="578" static="1"><f a="_s">
	<c path="String"/>
	<c path="String"/>
</f></unquote>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="phoenix.ProjectionType" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Camera.hx" module="phoenix.Camera">
		<ortho/>
		<perspective/>
		<custom/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="phoenix.Camera" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Camera.hx">
		<name public="1"><c path="String"/></name>
		<viewport public="1" get="accessor" set="accessor">
			<c path="phoenix.Rectangle"/>
			<meta><m n=":isVar"/></meta>
		</viewport>
		<center public="1" get="accessor" set="accessor">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</center>
		<zoom public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</zoom>
		<near public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</near>
		<far public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</far>
		<fov public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</fov>
		<fov_type public="1" set="accessor"><e path="phoenix.FOVType"/></fov_type>
		<aspect public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</aspect>
		<target public="1" set="accessor">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</target>
		<pos public="1" get="accessor" set="accessor">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</pos>
		<scale public="1" get="accessor" set="accessor"><c path="phoenix.Vector"/></scale>
		<rotation public="1" get="accessor" set="accessor"><c path="phoenix.Quaternion"/></rotation>
		<transform public="1"><c path="phoenix.Transform"/></transform>
		<minimum_zoom public="1"><x path="Float"/></minimum_zoom>
		<projection_matrix public="1"><c path="phoenix.Matrix"/></projection_matrix>
		<view_matrix public="1"><c path="phoenix.Matrix"/></view_matrix>
		<view_matrix_inverse public="1"><c path="phoenix.Matrix"/></view_matrix_inverse>
		<look_at_matrix public="1"><c path="phoenix.Matrix"/></look_at_matrix>
		<options public="1"><t path="luxe.options.CameraOptions"/></options>
		<projection public="1"><e path="phoenix.ProjectionType"/></projection>
		<up public="1"><c path="phoenix.Vector"/></up>
		<projection_float32array public="1">
			<t path="snow.utils.Float32Array"/>
			<meta><m n=":noCompletion"/></meta>
		</projection_float32array>
		<view_inverse_float32array public="1">
			<t path="snow.utils.Float32Array"/>
			<meta><m n=":noCompletion"/></meta>
		</view_inverse_float32array>
		<fov_y><x path="Float"/></fov_y>
		<transform_dirty><x path="Bool"/></transform_dirty>
		<projection_dirty><x path="Bool"/></projection_dirty>
		<look_at_dirty><x path="Bool"/></look_at_dirty>
		<_setup><x path="Bool"/></_setup>
		<set_ortho public="1" set="method" line="140"><f a="_options">
	<t path="luxe.options.CameraOptions"/>
	<x path="Void"/>
</f></set_ortho>
		<set_perspective public="1" set="method" line="149"><f a="_options">
	<t path="luxe.options.CameraOptions"/>
	<x path="Void"/>
</f></set_perspective>
		<project public="1" set="method" line="161"><f a="_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></project>
		<unproject public="1" set="method" line="171"><f a="_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></unproject>
		<screen_point_to_ray public="1" set="method" line="180"><f a="_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Ray"/>
</f></screen_point_to_ray>
		<screen_point_to_world public="1" set="method" line="186"><f a="_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></screen_point_to_world>
		<world_point_to_screen public="1" set="method" line="199"><f a="_vector:?_viewport" v=":null">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Vector"/>
</f></world_point_to_screen>
		<process public="1" set="method" line="216">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<on_transform_cleaned set="method" line="238"><f a="t">
	<c path="phoenix.Transform"/>
	<x path="Void"/>
</f></on_transform_cleaned>
		<update_look_at set="method" line="244"><f a=""><x path="Void"/></f></update_look_at>
		<update_view_matrix set="method" line="256"><f a=""><x path="Void"/></f></update_view_matrix>
		<update_projection_matrix set="method" line="271"><f a=""><x path="Void"/></f></update_projection_matrix>
		<apply_state set="method" line="297"><f a="state:value">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></apply_state>
		<apply_default_camera_options set="method" line="307"><f a=""><x path="Void"/></f></apply_default_camera_options>
		<default_camera_options set="method" line="331"><f a=""><t path="luxe.options.CameraOptions"/></f></default_camera_options>
		<ortho_screen_to_world set="method" line="347"><f a="_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></ortho_screen_to_world>
		<ortho_world_to_screen set="method" line="355"><f a="_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></ortho_world_to_screen>
		<persepective_world_to_screen set="method" line="363"><f a="_vector:?_viewport" v=":null">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Vector"/>
</f></persepective_world_to_screen>
		<set_target set="method" line="382"><f a="_target">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_target>
		<set_fov set="method" line="392"><f a="_fov">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fov>
		<set_fov_type set="method" line="407"><f a="_fov_type">
	<e path="phoenix.FOVType"/>
	<e path="phoenix.FOVType"/>
</f></set_fov_type>
		<set_aspect set="method" line="415"><f a="_aspect">
	<x path="Float"/>
	<x path="Float"/>
</f></set_aspect>
		<set_near set="method" line="424"><f a="_near">
	<x path="Float"/>
	<x path="Float"/>
</f></set_near>
		<set_far set="method" line="433"><f a="_far">
	<x path="Float"/>
	<x path="Float"/>
</f></set_far>
		<set_zoom set="method" line="444"><f a="_z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_zoom>
		<_refresh_pos><x path="Bool"/></_refresh_pos>
		<set_center set="method" line="480"><f a="_p">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_center>
		<get_center set="method" line="510"><f a=""><c path="phoenix.Vector"/></f></get_center>
		<get_pos set="method" line="514"><f a=""><c path="phoenix.Vector"/></f></get_pos>
		<get_rotation set="method" line="518"><f a=""><c path="phoenix.Quaternion"/></f></get_rotation>
		<get_scale set="method" line="522"><f a=""><c path="phoenix.Vector"/></f></get_scale>
		<get_viewport set="method" line="526"><f a=""><c path="phoenix.Rectangle"/></f></get_viewport>
		<set_viewport set="method" line="530"><f a="_r">
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Rectangle"/>
</f></set_viewport>
		<set_rotation set="method" line="556"><f a="_q">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></set_rotation>
		<set_scale set="method" line="560"><f a="_s">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_scale>
		<set_pos set="method" line="564"><f a="_p">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<_merge_options set="method" line="605"><f a="_options">
	<t path="luxe.options.CameraOptions"/>
	<x path="Void"/>
</f></_merge_options>
		<_pos_changed set="method" line="656"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></_pos_changed>
		<_center_changed set="method" line="662"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></_center_changed>
		<new public="1" set="method" line="75"><f a="?_options" v="null">
	<t path="luxe.options.CameraOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="phoenix.FOVType" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Camera.hx" module="phoenix.Camera">
		<vertical/>
		<horizontal/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="phoenix.Circle" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Circle.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<r public="1"><x path="Float"/></r>
		<toString set="method" line="16"><f a=""><c path="String"/></f></toString>
		<point_inside public="1" set="method" line="20"><f a="_p">
	<c path="phoenix.Vector"/>
	<x path="Bool"/>
</f></point_inside>
		<clone public="1" set="method" line="28"><f a=""><c path="phoenix.Circle"/></f></clone>
		<set public="1" set="method" line="32"><f a="?_x:?_y:?_r" v="null:null:null">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Circle"/>
</f></set>
		<new public="1" set="method" line="10"><f a="?_x:?_y:?_r" v="0:0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Color" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Color.hx">
		<random public="1" set="method" line="78" static="1"><f a="?_include_alpha" v="false">
	<x path="Bool"/>
	<c path="phoenix.Color"/>
</f></random>
		<r public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</r>
		<g public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</g>
		<b public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</b>
		<a public="1"><x path="Float"/></a>
		<is_hsl><x path="Bool"/></is_hsl>
		<is_hsv><x path="Bool"/></is_hsv>
		<refreshing><x path="Bool"/></refreshing>
		<set_r set="method" line="31"><f a="_r">
	<x path="Float"/>
	<x path="Float"/>
</f></set_r>
		<set_g set="method" line="46"><f a="_g">
	<x path="Float"/>
	<x path="Float"/>
</f></set_g>
		<set_b set="method" line="61"><f a="_b">
	<x path="Float"/>
	<x path="Float"/>
</f></set_b>
		<set public="1" set="method" line="82"><f a="?_r:?_g:?_b:?_a" v="null:null:null:null">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Color"/>
</f></set>
		<maxRGB public="1" set="method" line="103"><f a=""><x path="Float"/></f></maxRGB>
		<minRGB public="1" set="method" line="107"><f a=""><x path="Float"/></f></minRGB>
		<tween public="1" set="method" line="111"><f a="?_time_in_seconds:?_properties_to_tween:?_override" v="0.5f:null:true">
	<x path="Float"/>
	<t path="luxe.options.ColorOptions"/>
	<x path="Bool"/>
	<c path="luxe.tween.actuators.IGenericActuator"/>
</f></tween>
		<clone public="1" set="method" line="161"><f a=""><c path="phoenix.Color"/></f></clone>
		<rgb public="1" set="method" line="165"><f a="?_rgb" v="16777215">
	<x path="Int"/>
	<c path="phoenix.Color"/>
</f></rgb>
		<toColorHSL public="1" set="method" line="170"><f a=""><c path="phoenix.ColorHSL"/></f></toColorHSL>
		<toColorHSV public="1" set="method" line="174"><f a=""><c path="phoenix.ColorHSV"/></f></toColorHSV>
		<fromColorHSV public="1" set="method" line="178"><f a="_color_hsv">
	<c path="phoenix.ColorHSV"/>
	<x path="Void"/>
</f></fromColorHSV>
		<fromColorHSL public="1" set="method" line="208"><f a="_color_hsl">
	<c path="phoenix.ColorHSL"/>
	<c path="phoenix.Color"/>
</f></fromColorHSL>
		<toString set="method" line="258"><f a=""><c path="String"/></f></toString>
		<from_int set="method" line="262"><f a="_i">
	<x path="Int"/>
	<x path="Void"/>
</f></from_int>
		<new public="1" set="method" line="22"><f a="?_r:?_g:?_b:?_a" v="1.0f:1.0f:1.0f:1.0f">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.ColorHSL" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Color.hx" module="phoenix.Color">
		<extends path="phoenix.Color"/>
		<h public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</h>
		<s public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</s>
		<l public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</l>
		<set_h set="method" line="287"><f a="_h">
	<x path="Float"/>
	<x path="Float"/>
</f></set_h>
		<set_s set="method" line="292"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_s>
		<set_l set="method" line="297"><f a="_l">
	<x path="Float"/>
	<x path="Float"/>
</f></set_l>
		<set public="1" set="method" line="318" override="1"><f a="?_h:?_s:?_l:?_a" v="null:null:null:null">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.ColorHSL"/>
</f></set>
		<tween public="1" set="method" line="342" override="1"><f a="?_time_in_seconds:?_dest:?_override" v="0.5f:null:true">
	<x path="Float"/>
	<t path="luxe.options.ColorOptions"/>
	<x path="Bool"/>
	<c path="luxe.tween.actuators.IGenericActuator"/>
</f></tween>
		<_refresh public="1" set="method" line="394"><f a=""><c path="phoenix.ColorHSL"/></f></_refresh>
		<clone public="1" set="method" line="403" override="1"><f a=""><c path="phoenix.ColorHSL"/></f></clone>
		<toColor public="1" set="method" line="407"><f a=""><c path="phoenix.Color"/></f></toColor>
		<fromColor public="1" set="method" line="411"><f a="_color">
	<c path="phoenix.Color"/>
	<c path="phoenix.ColorHSL"/>
</f></fromColor>
		<toString public="1" set="method" line="448" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="303"><f a="?_h:?_s:?_l:?_a" v="0.0f:1.0f:1.0f:1.0f">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.ColorHSV" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Color.hx" module="phoenix.Color">
		<extends path="phoenix.Color"/>
		<h public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</h>
		<s public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</s>
		<v public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</v>
		<set_h set="method" line="462"><f a="_h">
	<x path="Float"/>
	<x path="Float"/>
</f></set_h>
		<set_s set="method" line="467"><f a="_s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_s>
		<set_v set="method" line="472"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_v>
		<set public="1" set="method" line="493" override="1"><f a="?_h:?_s:?_v:?_a" v="null:null:null:null">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Color"/>
</f></set>
		<tween public="1" set="method" line="518" override="1"><f a="?_time_in_seconds:?_dest:?_override" v="0.5f:null:true">
	<x path="Float"/>
	<t path="luxe.options.ColorOptions"/>
	<x path="Bool"/>
	<c path="luxe.tween.actuators.IGenericActuator"/>
</f></tween>
		<_refresh public="1" set="method" line="570"><f a=""><c path="phoenix.ColorHSV"/></f></_refresh>
		<clone public="1" set="method" line="579" override="1"><f a=""><c path="phoenix.ColorHSV"/></f></clone>
		<toColor public="1" set="method" line="583"><f a=""><c path="phoenix.Color"/></f></toColor>
		<toColorHSL public="1" set="method" line="588" override="1"><f a=""><c path="phoenix.ColorHSL"/></f></toColorHSL>
		<fromColorHSL public="1" set="method" line="593" override="1"><f a="_color_hsl">
	<c path="phoenix.ColorHSL"/>
	<c path="phoenix.ColorHSV"/>
</f></fromColorHSL>
		<fromColor public="1" set="method" line="599"><f a="_color">
	<c path="phoenix.Color"/>
	<c path="phoenix.ColorHSV"/>
</f></fromColor>
		<toString public="1" set="method" line="633" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="478"><f a="?_h:?_s:?_v:?_a" v="0.0f:0.0f:1.0f:1.0f">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.DualQuaternion" params="" file="/Users/sven/dev/luxe/luxe/phoenix/DualQuaternion.hx">
		<ToMatrix public="1" set="method" line="127" static="1"><f a="_dq">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.Matrix"/>
</f></ToMatrix>
		<Dot public="1" set="method" line="164" static="1"><f a="_a:_b">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
	<x path="Float"/>
</f></Dot>
		<Normalize public="1" set="method" line="170" static="1"><f a="_dq">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></Normalize>
		<Add public="1" set="method" line="176" static="1"><f a="_a:_b">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></Add>
		<Multiply public="1" set="method" line="187" static="1"><f a="_a:_b">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></Multiply>
		<Conjugate public="1" set="method" line="201" static="1"><f a="_q">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></Conjugate>
		<GetRotation public="1" set="method" line="209" static="1"><f a="_q">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.Quaternion"/>
</f></GetRotation>
		<GetTranslation public="1" set="method" line="215" static="1"><f a="_q">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.Vector"/>
</f></GetTranslation>
		<real public="1"><c path="phoenix.Quaternion"/></real>
		<dual public="1"><c path="phoenix.Quaternion"/></dual>
		<rotation public="1" get="accessor" set="null"><c path="phoenix.Quaternion"/></rotation>
		<translation public="1" get="accessor" set="null"><c path="phoenix.Vector"/></translation>
		<_temp><c path="phoenix.Quaternion"/></_temp>
		<set public="1" set="method" line="30"><f a="_real:_dual">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></set>
		<clone public="1" set="method" line="39"><f a=""><c path="phoenix.DualQuaternion"/></f></clone>
		<setFromTranslationRotation public="1" set="method" line="45"><f a="_translation:_rotation">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></setFromTranslationRotation>
		<dot public="1" set="method" line="54"><f a="_other">
	<c path="phoenix.DualQuaternion"/>
	<x path="Float"/>
</f></dot>
		<normalize public="1" set="method" line="60"><f a=""><c path="phoenix.DualQuaternion"/></f></normalize>
		<scale public="1" set="method" line="79"><f a="_scale">
	<x path="Float"/>
	<c path="phoenix.DualQuaternion"/>
</f></scale>
		<conjugate public="1" set="method" line="88"><f a=""><c path="phoenix.DualQuaternion"/></f></conjugate>
		<multiply public="1" set="method" line="98"><f a="_other">
	<c path="phoenix.DualQuaternion"/>
	<c path="phoenix.DualQuaternion"/>
</f></multiply>
		<get_rotation set="method" line="111"><f a=""><c path="phoenix.Quaternion"/></f></get_rotation>
		<get_translation set="method" line="117"><f a=""><c path="phoenix.Vector"/></f></get_translation>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.MatrixTransform" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Matrix.hx" module="phoenix.Matrix">
		<pos public="1"><c path="phoenix.Vector"/></pos>
		<rotation public="1"><c path="phoenix.Quaternion"/></rotation>
		<scale public="1"><c path="phoenix.Vector"/></scale>
		<destroy get="inline" set="null" line="21"><f a=""><x path="Void"/></f></destroy>
		<new public="1" get="inline" set="null" line="15"><f a="p:r:s">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Matrix" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Matrix.hx">
		<elements public="1"><c path="Array"><x path="Float"/></c></elements>
		<_float32array><t path="snow.utils.Float32Array"/></_float32array>
		<M11 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M11>
		<M21 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M21>
		<M31 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M31>
		<M41 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M41>
		<M12 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M12>
		<M22 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M22>
		<M32 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M32>
		<M42 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M42>
		<M13 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M13>
		<M23 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M23>
		<M33 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M33>
		<M43 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M43>
		<M14 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M14>
		<M24 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M24>
		<M34 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M34>
		<M44 public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</M44>
		<set public="1" get="inline" set="null" line="77"><f a="n11:n12:n13:n14:n21:n22:n23:n24:n31:n32:n33:n34:n41:n42:n43:n44">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></set>
		<toString get="inline" set="null" line="94"><f a=""><c path="String"/></f></toString>
		<get_M11 get="inline" set="null" line="103"><f a=""><x path="Float"/></f></get_M11>
		<get_M12 get="inline" set="null" line="104"><f a=""><x path="Float"/></f></get_M12>
		<get_M13 get="inline" set="null" line="105"><f a=""><x path="Float"/></f></get_M13>
		<get_M14 get="inline" set="null" line="106"><f a=""><x path="Float"/></f></get_M14>
		<get_M21 get="inline" set="null" line="108"><f a=""><x path="Float"/></f></get_M21>
		<get_M22 get="inline" set="null" line="109"><f a=""><x path="Float"/></f></get_M22>
		<get_M23 get="inline" set="null" line="110"><f a=""><x path="Float"/></f></get_M23>
		<get_M24 get="inline" set="null" line="111"><f a=""><x path="Float"/></f></get_M24>
		<get_M31 get="inline" set="null" line="113"><f a=""><x path="Float"/></f></get_M31>
		<get_M32 get="inline" set="null" line="114"><f a=""><x path="Float"/></f></get_M32>
		<get_M33 get="inline" set="null" line="115"><f a=""><x path="Float"/></f></get_M33>
		<get_M34 get="inline" set="null" line="116"><f a=""><x path="Float"/></f></get_M34>
		<get_M41 get="inline" set="null" line="118"><f a=""><x path="Float"/></f></get_M41>
		<get_M42 get="inline" set="null" line="119"><f a=""><x path="Float"/></f></get_M42>
		<get_M43 get="inline" set="null" line="120"><f a=""><x path="Float"/></f></get_M43>
		<get_M44 get="inline" set="null" line="121"><f a=""><x path="Float"/></f></get_M44>
		<set_M11 get="inline" set="null" line="123"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M11>
		<set_M12 get="inline" set="null" line="124"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M12>
		<set_M13 get="inline" set="null" line="125"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M13>
		<set_M14 get="inline" set="null" line="126"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M14>
		<set_M21 get="inline" set="null" line="128"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M21>
		<set_M22 get="inline" set="null" line="129"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M22>
		<set_M23 get="inline" set="null" line="130"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M23>
		<set_M24 get="inline" set="null" line="131"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M24>
		<set_M31 get="inline" set="null" line="133"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M31>
		<set_M32 get="inline" set="null" line="134"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M32>
		<set_M33 get="inline" set="null" line="135"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M33>
		<set_M34 get="inline" set="null" line="136"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M34>
		<set_M41 get="inline" set="null" line="138"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M41>
		<set_M42 get="inline" set="null" line="139"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M42>
		<set_M43 get="inline" set="null" line="140"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M43>
		<set_M44 get="inline" set="null" line="141"><f a="_value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_M44>
		<float32array public="1" get="inline" set="null" line="143"><f a=""><t path="snow.utils.Float32Array"/></f></float32array>
		<identity public="1" get="inline" set="null" line="159"><f a=""><c path="phoenix.Matrix"/></f></identity>
		<copy public="1" get="inline" set="null" line="173"><f a="m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></copy>
		<make2D public="1" get="inline" set="null" line="187"><f a="_x:_y:?_scale:?_rotation" v="::1:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></make2D>
		<copyPosition public="1" get="inline" set="null" line="204"><f a="m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></copyPosition>
		<getPosition public="1" get="inline" set="null" line="214"><f a=""><c path="phoenix.Vector"/></f></getPosition>
		<extractRotation public="1" get="inline" set="null" line="218"><f a="m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></extractRotation>
		<makeRotationFromEuler public="1" get="inline" set="null" line="242"><f a="_v:?_order" v=":0">
	<c path="phoenix.Vector"/>
	<x path="phoenix.ComponentOrder"/>
	<c path="phoenix.Matrix"/>
</f></makeRotationFromEuler>
		<makeRotationFromQuaternion public="1" get="inline" set="null" line="367"><f a="q">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Matrix"/>
</f></makeRotationFromQuaternion>
		<lookAt public="1" get="inline" set="null" line="404"><f a="_eye:_target:_up">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Matrix"/>
</f></lookAt>
		<multiply public="1" get="inline" set="null" line="436"><f a="_m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></multiply>
		<multiplyMatrices public="1" get="inline" set="null" line="443"><f a="_a:_b">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></multiplyMatrices>
		<multiplyToArray public="1" get="inline" set="null" line="484"><f a="_a:_b:_r">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
	<c path="Array"><x path="Float"/></c>
	<c path="phoenix.Matrix"/>
</f></multiplyToArray>
		<multiplyScalar public="1" get="inline" set="null" line="500"><f a="_s">
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></multiplyScalar>
		<multiplyVector3Array public="1" get="inline" set="null" line="514"><f a="_a">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></multiplyVector3Array>
		<determinant public="1" get="inline" set="null" line="540"><f a=""><x path="Float"/></f></determinant>
		<transpose public="1" get="inline" set="null" line="585"><f a=""><c path="phoenix.Matrix"/></f></transpose>
		<flattenToArray public="1" get="inline" set="null" line="602"><f a="?_flat" v="null">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></flattenToArray>
		<flattenToArrayOffset public="1" get="inline" set="null" line="621"><f a="_flat:_offset">
	<c path="Array"><x path="Float"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></flattenToArrayOffset>
		<setPosition public="1" get="inline" set="null" line="650"><f a="_v">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Matrix"/>
</f></setPosition>
		<inverse public="1" get="inline" set="null" line="662"><f a=""><c path="phoenix.Matrix"/></f></inverse>
		<getInverse public="1" get="inline" set="null" line="666"><f a="_m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></getInverse>
		<scale public="1" get="inline" set="null" line="714"><f a="_v">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Matrix"/>
</f></scale>
		<getMaxScaleOnAxis public="1" get="inline" set="null" line="732"><f a=""><x path="Float"/></f></getMaxScaleOnAxis>
		<makeTranslation public="1" get="inline" set="null" line="745"><f a="_x:_y:_z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeTranslation>
		<makeRotationX public="1" get="inline" set="null" line="759"><f a="_theta">
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeRotationX>
		<makeRotationY public="1" get="inline" set="null" line="776"><f a="_theta">
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeRotationY>
		<makeRotationZ public="1" get="inline" set="null" line="793"><f a="_theta">
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeRotationZ>
		<makeRotationAxis public="1" get="inline" set="null" line="810"><f a="_axis:_angle">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeRotationAxis>
		<makeScale public="1" get="inline" set="null" line="835"><f a="_x:_y:_z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeScale>
		<compose_with_origin public="1" get="inline" set="null" line="849"><f a="_position:_origin:_quaternion:_scale">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Matrix"/>
</f></compose_with_origin>
		<compose public="1" get="inline" set="null" line="869"><f a="_position:_quaternion:_scale">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Matrix"/>
</f></compose>
		<_transform><c path="phoenix.MatrixTransform"/></_transform>
		<decompose public="1" get="inline" set="null" line="881"><f a="?_position:?_quaternion:?_scale" v="null:null:null">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.MatrixTransform"/>
</f></decompose>
		<makeFrustum public="1" get="inline" set="null" line="948"><f a="_left:_right:_bottom:_top:_near:_far">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeFrustum>
		<makePerspective public="1" get="inline" set="null" line="970"><f a="_fov:_aspect:_near:_far">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makePerspective>
		<makeOrthographic public="1" get="inline" set="null" line="982"><f a="_left:_right:_top:_bottom:_near:_far">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Matrix"/>
</f></makeOrthographic>
		<fromArray public="1" get="inline" set="null" line="1003"><f a="_from">
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></fromArray>
		<toArray public="1" get="inline" set="null" line="1009"><f a=""><c path="Array"><x path="Float"/></c></f></toArray>
		<clone public="1" get="inline" set="null" line="1022"><f a=""><c path="phoenix.Matrix"/></f></clone>
		<up public="1" get="inline" set="null" line="1035"><f a=""><c path="phoenix.Vector"/></f></up>
		<down public="1" get="inline" set="null" line="1039"><f a=""><c path="phoenix.Vector"/></f></down>
		<left public="1" get="inline" set="null" line="1043"><f a=""><c path="phoenix.Vector"/></f></left>
		<right public="1" get="inline" set="null" line="1047"><f a=""><c path="phoenix.Vector"/></f></right>
		<backward public="1" get="inline" set="null" line="1051"><f a=""><c path="phoenix.Vector"/></f></backward>
		<forward public="1" get="inline" set="null" line="1055"><f a=""><c path="phoenix.Vector"/></f></forward>
		<new public="1" get="inline" set="null" line="52"><f a="?n11:?n12:?n13:?n14:?n21:?n22:?n23:?n24:?n31:?n32:?n33:?n34:?n41:?n42:?n43:?n44" v="1:0:0:0:0:1:0:0:0:0:1:0:0:0:0:1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Quaternion" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Quaternion.hx">
		<Add public="1" set="method" line="274" static="1"><f a="_a:_b">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></Add>
		<Multiply public="1" set="method" line="278" static="1"><f a="_a:_b">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></Multiply>
		<MultiplyScalar public="1" set="method" line="282" static="1"><f a="_quaternion:_scalar">
	<c path="phoenix.Quaternion"/>
	<x path="Float"/>
	<c path="phoenix.Quaternion"/>
</f></MultiplyScalar>
		<Slerp public="1" set="method" line="428" static="1"><f a="_qa:_qb:_qm:_t">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<x path="Float"/>
	<c path="phoenix.Quaternion"/>
</f></Slerp>
		<Dot public="1" set="method" line="434" static="1"><f a="_a:_b">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<x path="Float"/>
</f></Dot>
		<Listen public="1" get="inline" set="null" line="544" static="1"><f a="_q:listener">
	<c path="phoenix.Quaternion"/>
	<f a="">
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></Listen>
		<x public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</x>
		<y public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<z public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</z>
		<w public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</w>
		<euler><c path="phoenix.Vector"/></euler>
		<ignore_listeners public="1"><x path="Bool"/></ignore_listeners>
		<listen_x public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_x>
		<listen_y public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_y>
		<listen_z public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_z>
		<listen_w public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_w>
		<_construct><x path="Bool"/></_construct>
		<toString set="method" line="40"><f a=""><c path="String"/></f></toString>
		<set public="1" set="method" line="46"><f a="_x:_y:_z:_w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Quaternion"/>
</f></set>
		<copy public="1" set="method" line="55"><f a="_quaternion">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></copy>
		<dot public="1" set="method" line="66"><f a="_other">
	<c path="phoenix.Quaternion"/>
	<x path="Float"/>
</f></dot>
		<setFromEuler public="1" set="method" line="71"><f a="_euler:?_order" v=":0">
	<c path="phoenix.Vector"/>
	<x path="phoenix.ComponentOrder"/>
	<c path="phoenix.Quaternion"/>
</f></setFromEuler>
		<setFromAxisAngle public="1" set="method" line="141"><f a="_axis:_angle">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
	<c path="phoenix.Quaternion"/>
</f></setFromAxisAngle>
		<setFromRotationMatrix public="1" set="method" line="159"><f a="_m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Quaternion"/>
</f></setFromRotationMatrix>
		<inverse public="1" set="method" line="224"><f a=""><c path="phoenix.Quaternion"/></f></inverse>
		<conjugate public="1" set="method" line="231"><f a=""><c path="phoenix.Quaternion"/></f></conjugate>
		<lengthSq public="1" set="method" line="240"><f a=""><x path="Float"/></f></lengthSq>
		<length public="1" set="method" line="247"><f a=""><x path="Float"/></f></length>
		<normalize public="1" set="method" line="254"><f a=""><c path="phoenix.Quaternion"/></f></normalize>
		<multiply public="1" set="method" line="286"><f a="_quaternion">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></multiply>
		<add public="1" set="method" line="292"><f a="_quaternion">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></add>
		<addQuaternions public="1" set="method" line="298"><f a="_a:_b">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></addQuaternions>
		<multiplyScalar public="1" set="method" line="309"><f a="_scalar">
	<x path="Float"/>
	<c path="phoenix.Quaternion"/>
</f></multiplyScalar>
		<multiplyQuaternions public="1" set="method" line="320"><f a="_a:_b">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></multiplyQuaternions>
		<slerp public="1" set="method" line="335"><f a="_qb:_t">
	<c path="phoenix.Quaternion"/>
	<x path="Float"/>
	<c path="phoenix.Quaternion"/>
</f></slerp>
		<equals public="1" set="method" line="396"><f a="_q">
	<c path="phoenix.Quaternion"/>
	<x path="Bool"/>
</f></equals>
		<fromArray public="1" set="method" line="403"><f a="_a">
	<c path="Array"><x path="Float"/></c>
	<c path="phoenix.Quaternion"/>
</f></fromArray>
		<toArray public="1" set="method" line="412"><f a=""><c path="Array"><x path="Float"/></c></f></toArray>
		<clone public="1" set="method" line="418"><f a=""><c path="phoenix.Quaternion"/></f></clone>
		<toeuler public="1" set="method" line="424"><f a=""><c path="phoenix.Vector"/></f></toeuler>
		<update_euler get="inline" set="null" line="438"><f a=""><x path="Void"/></f></update_euler>
		<ignore_euler><x path="Bool"/></ignore_euler>
		<set_xyzw public="1" get="inline" set="null" line="450"><f a="_x:_y:_z:_w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set_xyzw>
		<set_xyz public="1" get="inline" set="null" line="470"><f a="_x:_y:_z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set_xyz>
		<set_x get="inline" set="null" line="488"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="502"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_z get="inline" set="null" line="516"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<set_w get="inline" set="null" line="530"><f a="_v">
	<x path="Float"/>
	<x path="Float"/>
</f></set_w>
		<new public="1" set="method" line="25"><f a="?_x:?_y:?_z:?_w" v="0:0:0:1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Ray" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Ray.hx">
		<origin public="1"><c path="phoenix.Vector"/></origin>
		<end public="1"><c path="phoenix.Vector"/></end>
		<dir public="1"><c path="phoenix.Vector"/></dir>
		<camera><c path="phoenix.Camera"/></camera>
		<viewport><c path="phoenix.Rectangle"/></viewport>
		<refresh public="1" set="method" line="32"><f a="_screen_pos">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></refresh>
		<new public="1" set="method" line="17"><f a="_screen_pos:_camera:?_viewport" v="::null">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Camera"/>
	<c path="phoenix.Rectangle"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Rectangle" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Rectangle.hx">
		<listen public="1" set="method" line="33" static="1"><f a="_r:listener">
	<c path="phoenix.Rectangle"/>
	<f a="">
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen>
		<x public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</x>
		<y public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<w public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</w>
		<h public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</h>
		<ignore_listeners public="1"><x path="Bool"/></ignore_listeners>
		<listen_x public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_x>
		<listen_y public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_y>
		<listen_w public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_w>
		<listen_h public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_h>
		<toString set="method" line="27"><f a=""><c path="String"/></f></toString>
		<point_inside public="1" set="method" line="40"><f a="_p">
	<c path="phoenix.Vector"/>
	<x path="Bool"/>
</f></point_inside>
		<overlaps public="1" set="method" line="51"><f a="_other">
	<c path="phoenix.Rectangle"/>
	<x path="Bool"/>
</f></overlaps>
		<clone public="1" set="method" line="69"><f a=""><c path="phoenix.Rectangle"/></f></clone>
		<equal public="1" set="method" line="76"><f a="_other">
	<c path="phoenix.Rectangle"/>
	<x path="Bool"/>
</f></equal>
		<copy_from public="1" set="method" line="86"><f a="_rect">
	<c path="phoenix.Rectangle"/>
	<x path="Void"/>
</f></copy_from>
		<set public="1" set="method" line="95"><f a="?_x:?_y:?_w:?_h" v="null:null:null:null">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Rectangle"/>
</f></set>
		<set_x set="method" line="117"><f a="_x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y set="method" line="129"><f a="_y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_w set="method" line="141"><f a="_w">
	<x path="Float"/>
	<x path="Float"/>
</f></set_w>
		<set_h set="method" line="153"><f a="_h">
	<x path="Float"/>
	<x path="Float"/>
</f></set_h>
		<new public="1" set="method" line="18"><f a="?_x:?_y:?_w:?_h" v="0:0:0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.RenderPass" params="" file="/Users/sven/dev/luxe/luxe/phoenix/RenderPass.hx">
		<extends path="phoenix.Batcher"/>
		<new public="1" set="method" line="6"><f a="_r:?_name">
	<c path="phoenix.Renderer"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.RenderPath" params="" file="/Users/sven/dev/luxe/luxe/phoenix/RenderPath.hx">
		<renderer public="1"><c path="phoenix.Renderer"/></renderer>
		<render public="1" set="method" line="16"><f a="_batchers:_stats">
	<c path="Array"><c path="phoenix.Batcher"/></c>
	<c path="phoenix.RendererStats"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="12"><f a="_renderer">
	<c path="phoenix.Renderer"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.RenderState" params="" file="/Users/sven/dev/luxe/luxe/phoenix/RenderState.hx">
		<cull_face><x path="Bool"/></cull_face>
		<depth_test><x path="Bool"/></depth_test>
		<depth_mask><x path="Bool"/></depth_mask>
		<renderer><c path="phoenix.Renderer"/></renderer>
		<_viewport><c path="phoenix.Rectangle"/></_viewport>
		<enable public="1" set="method" line="19"><f a="what">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<disable public="1" set="method" line="36"><f a="what">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<depth_func><x path="Int"/></depth_func>
		<depth_function public="1" set="method" line="54"><f a="what">
	<x path="Int"/>
	<x path="Void"/>
</f></depth_function>
		<viewport public="1" set="method" line="61"><f a="x:y:w:h">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></viewport>
		<_current_fbo><t path="snow.render.opengl.GLFramebuffer"/></_current_fbo>
		<bindFramebuffer public="1" set="method" line="89"><f a="?buffer" v="null">
	<t path="snow.render.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<_current_rbo><t path="snow.render.opengl.GLRenderbuffer"/></_current_rbo>
		<bindRenderbuffer public="1" set="method" line="104"><f a="?buffer" v="null">
	<t path="snow.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<_used_program><t path="snow.render.opengl.GLProgram"/></_used_program>
		<useProgram public="1" set="method" line="119"><f a="program">
	<t path="snow.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
		<_active_texture><x path="Int"/></_active_texture>
		<activeTexture public="1" set="method" line="127"><f a="val">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<_bound_texture_2D><t path="snow.render.opengl.GLTexture"/></_bound_texture_2D>
		<bindTexture2D public="1" set="method" line="135"><f a="tex">
	<t path="snow.render.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture2D>
		<_last_line_width><x path="Float"/></_last_line_width>
		<lineWidth public="1" set="method" line="143"><f a="_width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<_last_depth_mask><x path="Bool"/></_last_depth_mask>
		<depthMask public="1" set="method" line="151"><f a="_enable">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<new public="1" set="method" line="14"><f a="_renderer">
	<c path="phoenix.Renderer"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Texture" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Texture.hx">
		<extends path="luxe.resource.Resource"/>
		<load public="1" set="method" line="111" static="1"><f a="_id:?_onloaded:?_silent" v=":null:false">
	<c path="String"/>
	<f a="">
		<c path="phoenix.Texture"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<t path="Null"><c path="phoenix.Texture"/></t>
</f></load>
		<load_from_resource public="1" set="method" line="175" static="1"><f a="_name:?_cache" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<c path="phoenix.Texture"/>
</f></load_from_resource>
		<load_from_bytearray public="1" set="method" line="195" static="1">
			<f a="_name:_bytes:?_cache" v="::true">
				<c path="String"/>
				<t path="snow.utils.ByteArray"/>
				<x path="Bool"/>
				<c path="phoenix.Texture"/>
			</f>
			<haxe_doc>create and load a texture from a ByteArray. Take note this accepts image formats, not raw pixels/bytes.</haxe_doc>
		</load_from_bytearray>
		<load_from_pixels public="1" set="method" line="226" static="1"><f a="_id:_width:_height:_pixels:?_cache" v="::::true">
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.UInt8Array"/>
	<x path="Bool"/>
	<c path="phoenix.Texture"/>
</f></load_from_pixels>
		<texture public="1"><t path="snow.render.opengl.GLTexture"/></texture>
		<asset public="1"><c path="snow.assets.AssetImage"/></asset>
		<width_actual public="1"><x path="Int"/></width_actual>
		<height_actual public="1"><x path="Int"/></height_actual>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<loaded public="1"><x path="Bool"/></loaded>
		<slot public="1"><x path="Int"/></slot>
		<_onload_handlers public="1"><c path="Array"><f a="">
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></c></_onload_handlers>
		<onload public="1" get="null" set="accessor"><f a="">
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></onload>
		<filter public="1" set="accessor">
			<e path="phoenix.FilterType"/>
			<meta><m n=":isVar"/></meta>
		</filter>
		<filter_min public="1" set="accessor">
			<e path="phoenix.FilterType"/>
			<meta><m n=":isVar"/></meta>
		</filter_min>
		<filter_mag public="1" set="accessor">
			<e path="phoenix.FilterType"/>
			<meta><m n=":isVar"/></meta>
		</filter_mag>
		<clamp public="1" set="accessor">
			<e path="phoenix.ClampType"/>
			<meta><m n=":isVar"/></meta>
		</clamp>
		<set_onload public="1" set="method" line="70"><f a="f">
	<f a="">
		<c path="phoenix.Texture"/>
		<x path="Void"/>
	</f>
	<f a="">
		<c path="phoenix.Texture"/>
		<x path="Void"/>
	</f>
</f></set_onload>
		<do_onload public="1" set="method" line="85"><f a=""><x path="Void"/></f></do_onload>
		<toString set="method" line="99"><f a=""><c path="String"/></f></toString>
		<estimated_memory public="1" set="method" line="103"><f a=""><c path="String"/></f></estimated_memory>
		<check_size set="method" line="254"><f a=""><x path="Void"/></f></check_size>
		<reset public="1" set="method" line="265"><f a=""><x path="Void"/></f></reset>
		<from_asset public="1" set="method" line="280"><f a="_asset">
	<c path="snow.assets.AssetImage"/>
	<x path="Void"/>
</f></from_asset>
		<generate_mipmaps public="1" set="method" line="303"><f a=""><x path="Void"/></f></generate_mipmaps>
		<bind public="1" set="method" line="314"><f a=""><x path="Void"/></f></bind>
		<get_pixel public="1" set="method" line="319"><f a="_pos">
	<c path="phoenix.Vector"/>
	<a>
		<r><x path="Float"/></r>
		<g><x path="Float"/></g>
		<b><x path="Float"/></b>
		<a><x path="Float"/></a>
	</a>
</f></get_pixel>
		<set_pixel public="1" set="method" line="335"><f a="_pos:_color">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Color"/>
	<x path="Void"/>
</f></set_pixel>
		<lock public="1" set="method" line="349"><f a=""><x path="Bool"/></f></lock>
		<unlock public="1" set="method" line="361"><f a=""><x path="Void"/></f></unlock>
		<drop public="1" set="method" line="374" override="1"><f a=""><x path="Void"/></f></drop>
		<activate public="1" set="method" line="381"><f a="att">
	<t path="snow.render.opengl.GLUniformLocation"/>
	<x path="Void"/>
</f></activate>
		<destroy public="1" set="method" line="383"><f a=""><x path="Void"/></f></destroy>
		<_set_clamp set="method" line="391"><f a="_clamp">
	<e path="phoenix.ClampType"/>
	<x path="Void"/>
</f></_set_clamp>
		<set_clamp set="method" line="407"><f a="_clamp">
	<e path="phoenix.ClampType"/>
	<e path="phoenix.ClampType"/>
</f></set_clamp>
		<_set_filter set="method" line="427"><f a="_filter">
	<e path="phoenix.FilterType"/>
	<x path="Void"/>
</f></_set_filter>
		<_set_filter_min set="method" line="457"><f a="_filter">
	<e path="phoenix.FilterType"/>
	<x path="Void"/>
</f></_set_filter_min>
		<_set_filter_mag set="method" line="480"><f a="_filter">
	<e path="phoenix.FilterType"/>
	<x path="Void"/>
</f></_set_filter_mag>
		<set_filter set="method" line="502"><f a="_filter">
	<e path="phoenix.FilterType"/>
	<e path="phoenix.FilterType"/>
</f></set_filter>
		<set_filter_min set="method" line="522"><f a="_filter">
	<e path="phoenix.FilterType"/>
	<e path="phoenix.FilterType"/>
</f></set_filter_min>
		<set_filter_mag set="method" line="538"><f a="_filter">
	<e path="phoenix.FilterType"/>
	<e path="phoenix.FilterType"/>
</f></set_filter_mag>
		<new public="1" set="method" line="57"><f a="_manager:?_type" v=":null">
	<c path="luxe.resource.ResourceManager"/>
	<e path="luxe.resource.ResourceType"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.RenderTexture" params="" file="/Users/sven/dev/luxe/luxe/phoenix/RenderTexture.hx">
		<extends path="phoenix.Texture"/>
		<fbo public="1"><t path="snow.render.opengl.GLFramebuffer"/></fbo>
		<renderbuffer public="1"><t path="snow.render.opengl.GLRenderbuffer"/></renderbuffer>
		<destroy public="1" set="method" line="86" override="1"><f a=""><x path="Void"/></f></destroy>
		<bindBuffer public="1" set="method" line="95">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</bindBuffer>
		<unbindBuffer public="1" set="method" line="101">
			<f a="?_other" v="null">
				<t path="snow.render.opengl.GLFramebuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</unbindBuffer>
		<bindRenderBuffer public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</bindRenderBuffer>
		<unbindRenderBuffer public="1" set="method" line="113">
			<f a="?_other" v="null">
				<t path="snow.render.opengl.GLRenderbuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</unbindRenderBuffer>
		<new public="1" set="method" line="17"><f a="_manager:?_size" v=":null">
	<c path="luxe.resource.ResourceManager"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="phoenix.BatcherKey" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Renderer.hx" module="phoenix.Renderer"><a>
	<uuid><c path="String"/></uuid>
	<layer><x path="Int"/></layer>
</a></typedef>
	<typedef path="phoenix._Renderer.DefaultShader" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Renderer.hx" private="1" module="phoenix.Renderer"><a>
	<source><a>
	<vert><c path="String"/></vert>
	<frag><c path="String"/></frag>
</a></source>
	<shader><c path="phoenix.Shader"/></shader>
</a></typedef>
	<typedef path="phoenix._Renderer.DefaultShaders" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Renderer.hx" private="1" module="phoenix.Renderer"><a>
	<textured><t path="phoenix._Renderer.DefaultShader"/></textured>
	<plain><t path="phoenix._Renderer.DefaultShader"/></plain>
	<bitmapfont><t path="phoenix._Renderer.DefaultShader"/></bitmapfont>
</a></typedef>
	<class path="phoenix.Renderer" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Renderer.hx">
		<batchers public="1"><c path="Array"><c path="phoenix.Batcher"/></c></batchers>
		<core public="1"><c path="luxe.Core"/></core>
		<state public="1"><c path="phoenix.RenderState"/></state>
		<default_fbo public="1"><t path="snow.render.opengl.GLFramebuffer"/></default_fbo>
		<default_rbo public="1"><t path="snow.render.opengl.GLRenderbuffer"/></default_rbo>
		<shaders public="1"><t path="phoenix._Renderer.DefaultShaders"/></shaders>
		<batcher public="1"><c path="phoenix.Batcher"/></batcher>
		<camera public="1"><c path="phoenix.Camera"/></camera>
		<font public="1"><c path="phoenix.BitmapFont"/></font>
		<render_path public="1"><c path="phoenix.RenderPath"/></render_path>
		<default_render_path public="1"><c path="phoenix.RenderPath"/></default_render_path>
		<vsync public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</vsync>
		<target public="1" get="accessor" set="accessor">
			<c path="phoenix.RenderTexture"/>
			<meta><m n=":isVar"/></meta>
		</target>
		<target_size public="1"><c path="phoenix.Vector"/></target_size>
		<should_clear public="1"><x path="Bool"/></should_clear>
		<stop public="1"><x path="Bool"/></stop>
		<stop_count public="1"><x path="Int"/></stop_count>
		<clear_color public="1"><c path="phoenix.Color"/></clear_color>
		<stats public="1"><c path="phoenix.RendererStats"/></stats>
		<init public="1" set="method" line="91"><f a=""><x path="Void"/></f></init>
		<destroy public="1" set="method" line="140"><f a=""><x path="Void"/></f></destroy>
		<sort_batchers set="method" line="147">
			<f a="a:b">
				<c path="phoenix.Batcher"/>
				<c path="phoenix.Batcher"/>
				<x path="Int"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</sort_batchers>
		<add_batch public="1" set="method" line="155"><f a="batch">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></add_batch>
		<remove_batch public="1" set="method" line="162"><f a="batch">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></remove_batch>
		<create_batcher public="1" set="method" line="169">
			<f a="?options" v="null">
				<t path="luxe.options.BatcherOptions"/>
				<c path="phoenix.Batcher"/>
			</f>
			<haxe_doc>Create a batcher, convenience for create batcher, add batcher (option), and create a camera for the batcher.</haxe_doc>
		</create_batcher>
		<clear public="1" set="method" line="206"><f a="_color">
	<c path="phoenix.Color"/>
	<x path="Void"/>
</f></clear>
		<blend_mode public="1" set="method" line="223"><f a="?_src_mode:?_dst_mode" v="770:771">
	<x path="phoenix.BlendMode"/>
	<x path="phoenix.BlendMode"/>
	<x path="Void"/>
</f></blend_mode>
		<blend_equation public="1" set="method" line="229"><f a="?_equation" v="32774">
	<x path="phoenix.BlendEquation"/>
	<x path="Void"/>
</f></blend_equation>
		<internal_resized set="method" line="237">
			<f a="_w:_h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</internal_resized>
		<process set="method" line="247">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</process>
		<onresize public="1" set="method" line="268"><f a="e">
	<d/>
	<x path="Void"/>
</f></onresize>
		<set_vsync set="method" line="272"><f a="_vsync">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_vsync>
		<get_vsync set="method" line="280"><f a=""><x path="Bool"/></f></get_vsync>
		<get_target set="method" line="286"><f a=""><c path="phoenix.RenderTexture"/></f></get_target>
		<set_target set="method" line="292"><f a="_target">
	<c path="phoenix.RenderTexture"/>
	<c path="phoenix.RenderTexture"/>
</f></set_target>
		<create_default_shaders set="method" line="314"><f a=""><x path="Void"/></f></create_default_shaders>
		<create_default_font set="method" line="364"><f a=""><x path="Void"/></f></create_default_font>
		<new public="1" set="method" line="76"><f a="_core">
	<c path="luxe.Core"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.RendererStats" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Renderer.hx" module="phoenix.Renderer">
		<batchers public="1"><x path="Int"/></batchers>
		<geometry_count public="1"><x path="Int"/></geometry_count>
		<dynamic_batched_count public="1"><x path="Int"/></dynamic_batched_count>
		<static_batched_count public="1"><x path="Int"/></static_batched_count>
		<visible_count public="1"><x path="Int"/></visible_count>
		<draw_calls public="1"><x path="Int"/></draw_calls>
		<group_count public="1"><x path="Int"/></group_count>
		<vert_count public="1"><x path="Int"/></vert_count>
		<reset public="1" set="method" line="397"><f a=""><x path="Void"/></f></reset>
		<toString set="method" line="407"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="387"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="phoenix._Shader.Location" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Shader.hx" private="1" module="phoenix.Shader"><t path="snow.render.opengl.GLUniformLocation"/></typedef>
	<class path="phoenix.Shader" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Shader.hx">
		<extends path="luxe.resource.Resource"/>
		<load public="1" set="method" line="327" static="1"><f a="_psid:?_vsid:?_onloaded:?_silent" v=":null:null:false">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<c path="phoenix.Shader"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<c path="phoenix.Shader"/>
</f></load>
		<errors public="1"><c path="String"/></errors>
		<log public="1"><c path="String"/></log>
		<vertex_source public="1"><c path="String"/></vertex_source>
		<frag_source public="1"><c path="String"/></frag_source>
		<vertex_source_name public="1"><c path="String"/></vertex_source_name>
		<frag_source_name public="1"><c path="String"/></frag_source_name>
		<vert_shader public="1"><t path="snow.render.opengl.GLShader"/></vert_shader>
		<frag_shader public="1"><t path="snow.render.opengl.GLShader"/></frag_shader>
		<program public="1"><t path="snow.render.opengl.GLProgram"/></program>
		<shader public="1"><t path="snow.render.opengl.GLShader"/></shader>
		<vert_attribute public="1"><x path="Int"/></vert_attribute>
		<tcoord_attribute public="1"><x path="Int"/></tcoord_attribute>
		<color_attribute public="1"><x path="Int"/></color_attribute>
		<normal_attribute public="1"><x path="Int"/></normal_attribute>
		<projectionmatrix_attribute public="1"><t path="phoenix._Shader.Location"/></projectionmatrix_attribute>
		<modelviewmatrix_attribute public="1"><t path="phoenix._Shader.Location"/></modelviewmatrix_attribute>
		<tex0_attribute public="1"><t path="phoenix._Shader.Location"/></tex0_attribute>
		<tex1_attribute public="1"><t path="phoenix._Shader.Location"/></tex1_attribute>
		<tex2_attribute public="1"><t path="phoenix._Shader.Location"/></tex2_attribute>
		<tex3_attribute public="1"><t path="phoenix._Shader.Location"/></tex3_attribute>
		<tex4_attribute public="1"><t path="phoenix._Shader.Location"/></tex4_attribute>
		<tex5_attribute public="1"><t path="phoenix._Shader.Location"/></tex5_attribute>
		<tex6_attribute public="1"><t path="phoenix._Shader.Location"/></tex6_attribute>
		<tex7_attribute public="1"><t path="phoenix._Shader.Location"/></tex7_attribute>
		<uniforms public="1"><x path="Map">
	<c path="String"/>
	<t path="phoenix.Uniform"><d/></t>
</x></uniforms>
		<uniform_textures><x path="Map">
	<c path="String"/>
	<c path="phoenix.Texture"/>
</x></uniform_textures>
		<activate public="1" set="method" line="61"><f a=""><x path="Void"/></f></activate>
		<deactivate public="1" set="method" line="67"><f a=""><x path="Void"/></f></deactivate>
		<clone public="1" set="method" line="72">
			<f a=""><c path="phoenix.Shader"/></f>
			<haxe_doc>Create a new shader based on the source of this shader.</haxe_doc>
		</clone>
		<set_int public="1" set="method" line="83"><f a="_name:_value">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_int>
		<set_float public="1" set="method" line="99"><f a="_name:_value">
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set_float>
		<set_vector2 public="1" set="method" line="116"><f a="_name:_value">
	<c path="String"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></set_vector2>
		<set_vector3 public="1" set="method" line="136"><f a="_name:_value">
	<c path="String"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></set_vector3>
		<set_vector4 public="1" set="method" line="158"><f a="_name:_value">
	<c path="String"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></set_vector4>
		<set_color public="1" set="method" line="180"><f a="_name:_value">
	<c path="String"/>
	<c path="phoenix.Color"/>
	<x path="Void"/>
</f></set_color>
		<set_texture public="1" set="method" line="202"><f a="_name:_value">
	<c path="String"/>
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></set_texture>
		<compile public="1" set="method" line="223"><f a="_type:_source:?_verbose" v="::false">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.render.opengl.GLShader"/>
</f></compile>
		<link public="1" set="method" line="271"><f a=""><x path="Void"/></f></link>
		<drop public="1" set="method" line="316" override="1"><f a=""><x path="Void"/></f></drop>
		<destroy public="1" set="method" line="321"><f a=""><x path="Void"/></f></destroy>
		<from_string public="1" set="method" line="384">
			<f a="_vertex_source:_fragment_source:?_vertex_name:?_frag_name:?_verbose" v="::'':'':false">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Loads shaders from a string, compiles, and links them</haxe_doc>
		</from_string>
		<toString set="method" line="433"><f a=""><c path="String"/></f></toString>
		<apply_uniforms public="1" set="method" line="437">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</apply_uniforms>
		<location get="inline" set="null" line="464"><f a="_name">
	<c path="String"/>
	<t path="phoenix._Shader.Location"/>
</f></location>
		<apply_int get="inline" set="null" line="468"><f a="_location:_int">
	<t path="phoenix._Shader.Location"/>
	<x path="Int"/>
	<x path="Void"/>
</f></apply_int>
		<apply_float get="inline" set="null" line="472"><f a="_location:_float">
	<t path="phoenix._Shader.Location"/>
	<x path="Float"/>
	<x path="Void"/>
</f></apply_float>
		<apply_vec2 get="inline" set="null" line="476"><f a="_location:_vec">
	<t path="phoenix._Shader.Location"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></apply_vec2>
		<apply_vec3 get="inline" set="null" line="480"><f a="_location:_vec">
	<t path="phoenix._Shader.Location"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></apply_vec3>
		<apply_vec4 get="inline" set="null" line="484"><f a="_location:_vec">
	<t path="phoenix._Shader.Location"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></apply_vec4>
		<apply_color get="inline" set="null" line="488"><f a="_location:_color">
	<t path="phoenix._Shader.Location"/>
	<c path="phoenix.Color"/>
	<x path="Void"/>
</f></apply_color>
		<apply_texture get="inline" set="null" line="492"><f a="_location:_tex">
	<t path="phoenix._Shader.Location"/>
	<c path="phoenix.Texture"/>
	<x path="Void"/>
</f></apply_texture>
		<add_log get="inline" set="null" line="497"><f a="_log">
	<c path="String"/>
	<x path="Void"/>
</f></add_log>
		<add_error get="inline" set="null" line="501"><f a="_error">
	<c path="String"/>
	<x path="Void"/>
</f></add_error>
		<new public="1" set="method" line="53"><f a="_manager">
	<c path="luxe.resource.ResourceManager"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="phoenix.UniformType" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Shader.hx" module="phoenix.Shader">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="phoenix._Shader.UniformType_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Shader.hx" private="1" module="phoenix.Shader">
	<unknown public="1" get="inline" set="null" line="509" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</unknown>
	<int public="1" get="inline" set="null" line="510" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</int>
	<float public="1" get="inline" set="null" line="511" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</float>
	<vector2 public="1" get="inline" set="null" line="512" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</vector2>
	<vector3 public="1" get="inline" set="null" line="513" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</vector3>
	<vector4 public="1" get="inline" set="null" line="514" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</vector4>
	<color public="1" get="inline" set="null" line="515" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</color>
	<texture public="1" get="inline" set="null" line="516" static="1">
		<x path="phoenix.UniformType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</texture>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="phoenix._Shader.UniformType_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Shader.hx" private="1" module="phoenix.Shader">
		<unknown public="1" get="inline" set="null" line="509" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</unknown>
		<int public="1" get="inline" set="null" line="510" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</int>
		<float public="1" get="inline" set="null" line="511" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</float>
		<vector2 public="1" get="inline" set="null" line="512" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</vector2>
		<vector3 public="1" get="inline" set="null" line="513" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</vector3>
		<vector4 public="1" get="inline" set="null" line="514" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</vector4>
		<color public="1" get="inline" set="null" line="515" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</color>
		<texture public="1" get="inline" set="null" line="516" static="1">
			<x path="phoenix.UniformType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</texture>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="phoenix.Uniform" params="T" file="/Users/sven/dev/luxe/luxe/phoenix/Shader.hx" module="phoenix.Shader"><a>
	<value><c path="phoenix.Uniform.T"/></value>
	<type><x path="phoenix.UniformType"/></type>
	<name><c path="String"/></name>
	<location><t path="phoenix._Shader.Location"/></location>
</a></typedef>
	<enum path="phoenix.FilterType" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Texture.hx" module="phoenix.Texture">
		<nearest/>
		<linear/>
		<mip_nearest_nearest/>
		<mip_linear_nearest/>
		<mip_nearest_linear/>
		<mip_linear_linear/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="phoenix.ClampType" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Texture.hx" module="phoenix.Texture">
		<edge/>
		<repeat/>
		<mirror/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="phoenix.Transform" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Transform.hx">
		<extends path="luxe.ID"/>
		<parent public="1" get="accessor" set="accessor">
			<c path="phoenix.Transform"/>
			<meta><m n=":isVar"/></meta>
		</parent>
		<local public="1" get="accessor" set="accessor">
			<c path="phoenix.Spatial"/>
			<meta><m n=":isVar"/></meta>
		</local>
		<world public="1" get="accessor" set="accessor">
			<c path="phoenix.Spatial"/>
			<meta><m n=":isVar"/></meta>
		</world>
		<origin public="1" get="accessor" set="accessor">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</origin>
		<dirty public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</dirty>
		<pos public="1" get="accessor" set="accessor"><c path="phoenix.Vector"/></pos>
		<rotation public="1" get="accessor" set="accessor"><c path="phoenix.Quaternion"/></rotation>
		<scale public="1" get="accessor" set="accessor"><c path="phoenix.Vector"/></scale>
		<_origin_undo_matrix><c path="phoenix.Matrix"/></_origin_undo_matrix>
		<_pos_matrix><c path="phoenix.Matrix"/></_pos_matrix>
		<_rotation_matrix><c path="phoenix.Matrix"/></_rotation_matrix>
		<_setup><x path="Bool"/></_setup>
		<_cleaning><x path="Bool"/></_cleaning>
		<_clean_handlers><c path="Array"><f a="">
	<c path="phoenix.Transform"/>
	<x path="Void"/>
</f></c></_clean_handlers>
		<_dirty_handlers><c path="Array"><f a="">
	<c path="phoenix.Transform"/>
	<x path="Void"/>
</f></c></_dirty_handlers>
		<_pos_handlers><c path="Array"><f a="">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></c></_pos_handlers>
		<_rotation_handlers><c path="Array"><f a="">
	<c path="phoenix.Quaternion"/>
	<x path="Void"/>
</f></c></_rotation_handlers>
		<_scale_handlers><c path="Array"><f a="">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></c></_scale_handlers>
		<_origin_handlers><c path="Array"><f a="">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></c></_origin_handlers>
		<_parent_handlers><c path="Array"><f a="">
	<c path="phoenix.Transform"/>
	<x path="Void"/>
</f></c></_parent_handlers>
		<_destroying><x path="Bool"/></_destroying>
		<destroy public="1" set="method" line="67"><f a=""><x path="Void"/></f></destroy>
		<set_dirty get="inline" set="null" line="98"><f a="_dirty">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dirty>
		<on_local_pos_change get="inline" set="null" line="115"><f a="v">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></on_local_pos_change>
		<on_local_rotation_change get="inline" set="null" line="126"><f a="r">
	<c path="phoenix.Quaternion"/>
	<x path="Void"/>
</f></on_local_rotation_change>
		<on_local_scale_change get="inline" set="null" line="137"><f a="s">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></on_local_scale_change>
		<on_parent_cleaned get="inline" set="null" line="148"><f a="p">
	<c path="phoenix.Transform"/>
	<x path="Void"/>
</f></on_parent_cleaned>
		<get_local get="inline" set="null" line="154"><f a=""><c path="phoenix.Spatial"/></f></get_local>
		<set_local get="inline" set="null" line="160"><f a="l">
	<c path="phoenix.Spatial"/>
	<c path="phoenix.Spatial"/>
</f></set_local>
		<get_world get="inline" set="null" line="177"><f a=""><c path="phoenix.Spatial"/></f></get_world>
		<clean_check public="1" get="inline" set="null" line="187">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</clean_check>
		<clean public="1" get="inline" set="null" line="204">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</clean>
		<toString get="inline" set="null" line="254"><f a=""><c path="String"/></f></toString>
		<get_origin get="inline" set="null" line="258"><f a=""><c path="phoenix.Vector"/></f></get_origin>
		<set_origin get="inline" set="null" line="264"><f a="o">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_origin>
		<set_world get="inline" set="null" line="279"><f a="w">
	<c path="phoenix.Spatial"/>
	<c path="phoenix.Spatial"/>
</f></set_world>
		<get_parent get="inline" set="null" line="291"><f a=""><c path="phoenix.Transform"/></f></get_parent>
		<set_parent get="inline" set="null" line="297"><f a="_p">
	<c path="phoenix.Transform"/>
	<c path="phoenix.Transform"/>
</f></set_parent>
		<get_pos get="inline" set="null" line="323"><f a=""><c path="phoenix.Vector"/></f></get_pos>
		<get_rotation get="inline" set="null" line="327"><f a=""><c path="phoenix.Quaternion"/></f></get_rotation>
		<get_scale get="inline" set="null" line="331"><f a=""><c path="phoenix.Vector"/></f></get_scale>
		<set_pos get="inline" set="null" line="336"><f a="value">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<set_rotation get="inline" set="null" line="340"><f a="value">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></set_rotation>
		<set_scale get="inline" set="null" line="344"><f a="value">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_scale>
		<propagate_clean get="inline" set="null" line="349"><f a=""><x path="Void"/></f></propagate_clean>
		<propagate_dirty get="inline" set="null" line="357"><f a=""><x path="Void"/></f></propagate_dirty>
		<propagate_pos get="inline" set="null" line="365"><f a="_pos">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></propagate_pos>
		<propagate_rotation get="inline" set="null" line="373"><f a="_rotation">
	<c path="phoenix.Quaternion"/>
	<x path="Void"/>
</f></propagate_rotation>
		<propagate_scale get="inline" set="null" line="381"><f a="_scale">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></propagate_scale>
		<propagate_origin get="inline" set="null" line="389"><f a="_origin">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></propagate_origin>
		<propagate_parent get="inline" set="null" line="397"><f a="_parent">
	<c path="phoenix.Transform"/>
	<x path="Void"/>
</f></propagate_parent>
		<listen public="1" get="inline" set="null" line="405"><f a="_handler">
	<f a="">
		<c path="phoenix.Transform"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen>
		<unlisten public="1" get="inline" set="null" line="415"><f a="_handler">
	<f a="">
		<c path="phoenix.Transform"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten>
		<listen_dirty public="1" get="inline" set="null" line="425"><f a="_handler">
	<f a="">
		<c path="phoenix.Transform"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen_dirty>
		<unlisten_dirty public="1" get="inline" set="null" line="435"><f a="_handler">
	<f a="">
		<c path="phoenix.Transform"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten_dirty>
		<listen_pos public="1" get="inline" set="null" line="445"><f a="_handler">
	<f a="">
		<c path="phoenix.Vector"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen_pos>
		<unlisten_pos public="1" get="inline" set="null" line="455"><f a="_handler">
	<f a="">
		<c path="phoenix.Vector"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten_pos>
		<listen_scale public="1" get="inline" set="null" line="465"><f a="_handler">
	<f a="">
		<c path="phoenix.Vector"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen_scale>
		<unlisten_scale public="1" get="inline" set="null" line="475"><f a="_handler">
	<f a="">
		<c path="phoenix.Vector"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten_scale>
		<listen_rotation public="1" get="inline" set="null" line="485"><f a="_handler">
	<f a="">
		<c path="phoenix.Quaternion"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen_rotation>
		<unlisten_rotation public="1" get="inline" set="null" line="495"><f a="_handler">
	<f a="">
		<c path="phoenix.Quaternion"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten_rotation>
		<listen_origin public="1" get="inline" set="null" line="505"><f a="_handler">
	<f a="">
		<c path="phoenix.Vector"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen_origin>
		<unlisten_origin public="1" get="inline" set="null" line="515"><f a="_handler">
	<f a="">
		<c path="phoenix.Vector"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten_origin>
		<listen_parent public="1" get="inline" set="null" line="525"><f a="_handler">
	<f a="">
		<c path="phoenix.Transform"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen_parent>
		<unlisten_parent public="1" get="inline" set="null" line="535"><f a="_handler">
	<f a="">
		<c path="phoenix.Transform"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
</f></unlisten_parent>
		<new public="1" get="inline" set="null" line="42"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Spatial" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Transform.hx" module="phoenix.Transform">
		<pos public="1" set="accessor">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</pos>
		<rotation public="1" set="accessor">
			<c path="phoenix.Quaternion"/>
			<meta><m n=":isVar"/></meta>
		</rotation>
		<scale public="1" set="accessor">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</scale>
		<matrix public="1" get="accessor" set="accessor">
			<c path="phoenix.Matrix"/>
			<meta><m n=":isVar"/></meta>
		</matrix>
		<floats public="1"><t path="snow.utils.Float32Array"/></floats>
		<ignore_listeners public="1"><x path="Bool"/></ignore_listeners>
		<auto_decompose public="1"><x path="Bool"/></auto_decompose>
		<pos_changed public="1">
			<f a="">
				<c path="phoenix.Vector"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</pos_changed>
		<rotation_changed public="1">
			<f a="">
				<c path="phoenix.Quaternion"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</rotation_changed>
		<scale_changed public="1">
			<f a="">
				<c path="phoenix.Vector"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</scale_changed>
		<_setup><x path="Bool"/></_setup>
		<destroy public="1" get="inline" set="null" line="578"><f a=""><x path="Void"/></f></destroy>
		<decompose public="1" get="inline" set="null" line="591"><f a="?_force" v="true">
	<x path="Bool"/>
	<c path="phoenix.Spatial"/>
</f></decompose>
		<get_matrix get="inline" set="null" line="607"><f a=""><c path="phoenix.Matrix"/></f></get_matrix>
		<set_matrix get="inline" set="null" line="613"><f a="_m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Matrix"/>
</f></set_matrix>
		<propagate_pos get="inline" set="null" line="626"><f a="_p">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></propagate_pos>
		<propagate_rotation get="inline" set="null" line="632"><f a="_r">
	<c path="phoenix.Quaternion"/>
	<x path="Void"/>
</f></propagate_rotation>
		<propagate_scale get="inline" set="null" line="638"><f a="_s">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></propagate_scale>
		<set_pos get="inline" set="null" line="644"><f a="_p">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_pos>
		<set_rotation get="inline" set="null" line="660"><f a="_r">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Quaternion"/>
</f></set_rotation>
		<set_scale get="inline" set="null" line="676"><f a="_s">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></set_scale>
		<_pos_change get="inline" set="null" line="695"><f a="_v">
	<x path="Float"/>
	<x path="Void"/>
</f></_pos_change>
		<_scale_change get="inline" set="null" line="697"><f a="_v">
	<x path="Float"/>
	<x path="Void"/>
</f></_scale_change>
		<_rotation_change get="inline" set="null" line="699"><f a="_v">
	<x path="Float"/>
	<x path="Void"/>
</f></_rotation_change>
		<new public="1" get="inline" set="null" line="565"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.Vector" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx">
		<Add public="1" get="inline" set="null" line="231" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></Add>
		<Subtract public="1" get="inline" set="null" line="239" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></Subtract>
		<MultiplyVector public="1" get="inline" set="null" line="247" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></MultiplyVector>
		<DivideVector public="1" get="inline" set="null" line="255" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></DivideVector>
		<Multiply public="1" set="method" line="263" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></Multiply>
		<Divide public="1" get="inline" set="null" line="271" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></Divide>
		<AddScalar public="1" get="inline" set="null" line="279" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></AddScalar>
		<SubtractScalar public="1" get="inline" set="null" line="287" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></SubtractScalar>
		<Cross public="1" get="inline" set="null" line="295" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></Cross>
		<RotationTo public="1" get="inline" set="null" line="303" static="1"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<x path="Float"/>
</f></RotationTo>
		<Listen public="1" set="method" line="309" static="1"><f a="_v:listener">
	<c path="phoenix.Vector"/>
	<f a="">
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></Listen>
		<Degrees public="1" set="method" line="770" static="1"><f a="_radian_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></Degrees>
		<Radians public="1" set="method" line="776" static="1"><f a="_degree_vector">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></Radians>
		<x public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</x>
		<y public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<z public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</z>
		<w public="1">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</w>
		<length public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</length>
		<lengthsq public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</lengthsq>
		<angle2D public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</angle2D>
		<normalized public="1" get="accessor" set="null">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</normalized>
		<inverted public="1" get="accessor" set="null">
			<c path="phoenix.Vector"/>
			<meta><m n=":isVar"/></meta>
		</inverted>
		<ignore_listeners public="1"><x path="Bool"/></ignore_listeners>
		<listen_x public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_x>
		<listen_y public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_y>
		<listen_z public="1">
			<f a="">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":isVar"/></meta>
		</listen_z>
		<_construct><x path="Bool"/></_construct>
		<copy_from public="1" get="inline" set="null" line="39"><f a="_other">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></copy_from>
		<set public="1" get="inline" set="null" line="47"><f a="_x:_y:_z:_w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></set>
		<set_xy public="1" get="inline" set="null" line="68"><f a="_x:_y">
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></set_xy>
		<set_xyz public="1" get="inline" set="null" line="86"><f a="_x:_y:_z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></set_xyz>
		<lerp_xy public="1" get="inline" set="null" line="107"><f a="_dest_x:_dest_y:_t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></lerp_xy>
		<lerp_xyz public="1" get="inline" set="null" line="119"><f a="_dest_x:_dest_y:_dest_z:_t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></lerp_xyz>
		<weighted_average_xy public="1" get="inline" set="null" line="131"><f a="_dest_x:_dest_y:_slowness">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></weighted_average_xy>
		<weighted_average_xyz public="1" get="inline" set="null" line="142"><f a="_dest_x:_dest_y:_dest_z:_slowness">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></weighted_average_xyz>
		<int public="1" get="inline" set="null" line="154"><f a=""><c path="phoenix.Vector"/></f></int>
		<int_x public="1" get="inline" set="null" line="162"><f a=""><c path="phoenix.Vector"/></f></int_x>
		<int_y public="1" get="inline" set="null" line="170"><f a=""><c path="phoenix.Vector"/></f></int_y>
		<int_z public="1" get="inline" set="null" line="178"><f a=""><c path="phoenix.Vector"/></f></int_z>
		<toString get="inline" set="null" line="186"><f a=""><c path="String"/></f></toString>
		<equals public="1" get="inline" set="null" line="192"><f a="other">
	<c path="phoenix.Vector"/>
	<x path="Bool"/>
</f></equals>
		<clone public="1" get="inline" set="null" line="196"><f a=""><c path="phoenix.Vector"/></f></clone>
		<normalize public="1" get="inline" set="null" line="200"><f a=""><c path="phoenix.Vector"/></f></normalize>
		<dot public="1" get="inline" set="null" line="204"><f a="other">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
</f></dot>
		<cross public="1" get="inline" set="null" line="211"><f a="a:b">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></cross>
		<invert public="1" set="method" line="221"><f a=""><c path="phoenix.Vector"/></f></invert>
		<add public="1" get="inline" set="null" line="319"><f a="other">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></add>
		<add_xyz public="1" get="inline" set="null" line="331"><f a="?_x:?_y:?_z" v="0:0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></add_xyz>
		<subtract public="1" get="inline" set="null" line="340"><f a="other">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></subtract>
		<subtract_xyz public="1" get="inline" set="null" line="352"><f a="?_x:?_y:?_z" v="0:0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></subtract_xyz>
		<multiply public="1" get="inline" set="null" line="360"><f a="other">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></multiply>
		<multiply_xyz public="1" get="inline" set="null" line="372"><f a="?_x:?_y:?_z" v="1:1:1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></multiply_xyz>
		<divide public="1" get="inline" set="null" line="381"><f a="other">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Vector"/>
</f></divide>
		<divide_xyz public="1" get="inline" set="null" line="393"><f a="?_x:?_y:?_z" v="1:1:1">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></divide_xyz>
		<addScalar public="1" get="inline" set="null" line="402"><f a="v">
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></addScalar>
		<subtractScalar public="1" get="inline" set="null" line="410"><f a="v">
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></subtractScalar>
		<multiplyScalar public="1" get="inline" set="null" line="418"><f a="v">
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></multiplyScalar>
		<divideScalar public="1" get="inline" set="null" line="426"><f a="v">
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></divideScalar>
		<set_length get="inline" set="null" line="445"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_length>
		<get_length get="inline" set="null" line="453"><f a=""><x path="Float"/></f></get_length>
		<get_lengthsq get="inline" set="null" line="460"><f a=""><x path="Float"/></f></get_lengthsq>
		<get_normalized get="inline" set="null" line="466"><f a=""><c path="phoenix.Vector"/></f></get_normalized>
		<set_x get="inline" set="null" line="472"><f a="_x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<set_y get="inline" set="null" line="484"><f a="_y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<set_z get="inline" set="null" line="496"><f a="_z">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<get_inverted get="inline" set="null" line="508"><f a=""><c path="phoenix.Vector"/></f></get_inverted>
		<set_angle2D get="inline" set="null" line="517"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_angle2D>
		<get_angle2D get="inline" set="null" line="527"><f a=""><x path="Float"/></f></get_angle2D>
		<truncate public="1" get="inline" set="null" line="538"><f a="max">
	<x path="Float"/>
	<c path="phoenix.Vector"/>
</f></truncate>
		<rotationTo public="1" get="inline" set="null" line="546"><f a="other">
	<c path="phoenix.Vector"/>
	<x path="Float"/>
</f></rotationTo>
		<applyQuaternion public="1" get="inline" set="null" line="554"><f a="q">
	<c path="phoenix.Quaternion"/>
	<c path="phoenix.Vector"/>
</f></applyQuaternion>
		<applyProjection public="1" get="inline" set="null" line="574"><f a="m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Vector"/>
</f></applyProjection>
		<transform public="1" get="inline" set="null" line="588"><f a="_m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Vector"/>
</f></transform>
		<transformDirection public="1" get="inline" set="null" line="604"><f a="m">
	<c path="phoenix.Matrix"/>
	<c path="phoenix.Vector"/>
</f></transformDirection>
		<setEulerFromRotationMatrix public="1" get="inline" set="null" line="619"><f a="m:?order" v=":0">
	<c path="phoenix.Matrix"/>
	<x path="phoenix.ComponentOrder"/>
	<c path="phoenix.Vector"/>
</f></setEulerFromRotationMatrix>
		<setEulerFromQuaternion public="1" get="inline" set="null" line="711"><f a="q:?order" v=":0">
	<c path="phoenix.Quaternion"/>
	<x path="phoenix.ComponentOrder"/>
	<c path="phoenix.Vector"/>
</f></setEulerFromQuaternion>
		<degrees public="1" get="inline" set="null" line="754"><f a=""><c path="phoenix.Vector"/></f></degrees>
		<radians public="1" get="inline" set="null" line="762"><f a=""><c path="phoenix.Vector"/></f></radians>
		<new public="1" get="inline" set="null" line="26"><f a="?_x:?_y:?_z:?_w" v="0:0:0:0">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="phoenix.ComponentOrder" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx" module="phoenix.Vector">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="phoenix._Vector.ComponentOrder_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx" private="1" module="phoenix.Vector">
	<XYZ public="1" get="inline" set="null" line="788" static="1">
		<x path="phoenix.ComponentOrder"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XYZ>
	<YXZ public="1" get="inline" set="null" line="789" static="1">
		<x path="phoenix.ComponentOrder"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YXZ>
	<ZXY public="1" get="inline" set="null" line="790" static="1">
		<x path="phoenix.ComponentOrder"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZXY>
	<ZYX public="1" get="inline" set="null" line="791" static="1">
		<x path="phoenix.ComponentOrder"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ZYX>
	<YZX public="1" get="inline" set="null" line="792" static="1">
		<x path="phoenix.ComponentOrder"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</YZX>
	<XZY public="1" get="inline" set="null" line="793" static="1">
		<x path="phoenix.ComponentOrder"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</XZY>
	<meta>
		<m n=":keep"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="phoenix._Vector.ComponentOrder_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx" private="1" module="phoenix.Vector">
		<XYZ public="1" get="inline" set="null" line="788" static="1">
			<x path="phoenix.ComponentOrder"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XYZ>
		<YXZ public="1" get="inline" set="null" line="789" static="1">
			<x path="phoenix.ComponentOrder"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YXZ>
		<ZXY public="1" get="inline" set="null" line="790" static="1">
			<x path="phoenix.ComponentOrder"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZXY>
		<ZYX public="1" get="inline" set="null" line="791" static="1">
			<x path="phoenix.ComponentOrder"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ZYX>
		<YZX public="1" get="inline" set="null" line="792" static="1">
			<x path="phoenix.ComponentOrder"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</YZX>
		<XZY public="1" get="inline" set="null" line="793" static="1">
			<x path="phoenix.ComponentOrder"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</XZY>
		<meta>
			<m n=":keep"/>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="phoenix.Vec" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx" module="phoenix.Vector">
		<from><icast><c path="phoenix.Vector"/></icast></from>
		<this><c path="phoenix.Vector"/></this>
		<to><icast><c path="phoenix.Vector"/></icast></to>
		<impl><class path="phoenix._Vector.Vec_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx" private="1" module="phoenix.Vector">
	<_new public="1" get="inline" set="null" line="800" static="1">
		<f a="?_x:?_y:?_z:?_w" v="null:null:null:null">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<c path="phoenix.Vector"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<_multiply public="1" get="inline" set="null" line="804" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A*B</e></m>
		</meta>
	</_multiply>
	<_multiply_scalar public="1" get="inline" set="null" line="807" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Float"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A*B</e></m>
		</meta>
	</_multiply_scalar>
	<_multiply_scalar_int public="1" get="inline" set="null" line="810" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Int"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A*B</e></m>
		</meta>
	</_multiply_scalar_int>
	<_divide public="1" get="inline" set="null" line="814" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A/B</e></m>
		</meta>
	</_divide>
	<_divide_scalar public="1" get="inline" set="null" line="817" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Float"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A/B</e></m>
		</meta>
	</_divide_scalar>
	<_divide_scalar_int public="1" get="inline" set="null" line="820" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Int"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A/B</e></m>
		</meta>
	</_divide_scalar_int>
	<_add public="1" get="inline" set="null" line="824" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
	</_add>
	<_add_scalar public="1" get="inline" set="null" line="827" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Float"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
	</_add_scalar>
	<_add_scalar_int public="1" get="inline" set="null" line="830" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Int"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A+B</e></m>
		</meta>
	</_add_scalar_int>
	<_subtract public="1" get="inline" set="null" line="834" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A-B</e></m>
		</meta>
	</_subtract>
	<_subtract_scalar public="1" get="inline" set="null" line="837" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Float"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A-B</e></m>
		</meta>
	</_subtract_scalar>
	<_subtract_scalar_int public="1" get="inline" set="null" line="840" static="1">
		<f a="lhs:rhs">
			<x path="phoenix.Vec"/>
			<x path="Int"/>
			<x path="phoenix.Vec"/>
		</f>
		<meta>
			<m n=":communitative"/>
			<m n=":op"><e>A-B</e></m>
		</meta>
	</_subtract_scalar_int>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="phoenix._Vector.Vec_Impl_" params="" file="/Users/sven/dev/luxe/luxe/phoenix/Vector.hx" private="1" module="phoenix.Vector">
		<_new public="1" get="inline" set="null" line="800" static="1">
			<f a="?_x:?_y:?_z:?_w" v="null:null:null:null">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="phoenix.Vector"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<_multiply public="1" get="inline" set="null" line="804" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A*B</e></m>
			</meta>
		</_multiply>
		<_multiply_scalar public="1" get="inline" set="null" line="807" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Float"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A*B</e></m>
			</meta>
		</_multiply_scalar>
		<_multiply_scalar_int public="1" get="inline" set="null" line="810" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Int"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A*B</e></m>
			</meta>
		</_multiply_scalar_int>
		<_divide public="1" get="inline" set="null" line="814" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A/B</e></m>
			</meta>
		</_divide>
		<_divide_scalar public="1" get="inline" set="null" line="817" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Float"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A/B</e></m>
			</meta>
		</_divide_scalar>
		<_divide_scalar_int public="1" get="inline" set="null" line="820" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Int"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A/B</e></m>
			</meta>
		</_divide_scalar_int>
		<_add public="1" get="inline" set="null" line="824" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
		</_add>
		<_add_scalar public="1" get="inline" set="null" line="827" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Float"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
		</_add_scalar>
		<_add_scalar_int public="1" get="inline" set="null" line="830" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Int"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A+B</e></m>
			</meta>
		</_add_scalar_int>
		<_subtract public="1" get="inline" set="null" line="834" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A-B</e></m>
			</meta>
		</_subtract>
		<_subtract_scalar public="1" get="inline" set="null" line="837" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Float"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A-B</e></m>
			</meta>
		</_subtract_scalar>
		<_subtract_scalar_int public="1" get="inline" set="null" line="840" static="1">
			<f a="lhs:rhs">
				<x path="phoenix.Vec"/>
				<x path="Int"/>
				<x path="phoenix.Vec"/>
			</f>
			<meta>
				<m n=":communitative"/>
				<m n=":op"><e>A-B</e></m>
			</meta>
		</_subtract_scalar_int>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.Geometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/Geometry.hx">
		<_sequence_key line="101" static="1"><x path="Int"/></_sequence_key>
		<transform public="1"><c path="phoenix.Transform"/></transform>
		<vertices public="1"><c path="Array"><c path="phoenix.geometry.Vertex"/></c></vertices>
		<submitted public="1"><x path="Bool"/></submitted>
		<static_vertex_buffer public="1"><t path="snow.render.opengl.GLBuffer"/></static_vertex_buffer>
		<static_tcoord_buffer public="1"><t path="snow.render.opengl.GLBuffer"/></static_tcoord_buffer>
		<static_vcolor_buffer public="1"><t path="snow.render.opengl.GLBuffer"/></static_vcolor_buffer>
		<static_normal_buffer public="1"><t path="snow.render.opengl.GLBuffer"/></static_normal_buffer>
		<added public="1"><x path="Bool"/></added>
		<batchers public="1"><c path="Array"><c path="phoenix.Batcher"/></c></batchers>
		<state public="1"><c path="phoenix.geometry.GeometryState"/></state>
		<dropped public="1"><x path="Bool"/></dropped>
		<uuid public="1"><c path="String"/></uuid>
		<id public="1"><c path="String"/></id>
		<primitive_type public="1" get="accessor" set="accessor">
			<x path="phoenix.PrimitiveType"/>
			<meta><m n=":isVar"/></meta>
		</primitive_type>
		<texture public="1" get="accessor" set="accessor">
			<c path="phoenix.Texture"/>
			<meta><m n=":isVar"/></meta>
		</texture>
		<shader public="1" get="accessor" set="accessor">
			<c path="phoenix.Shader"/>
			<meta><m n=":isVar"/></meta>
		</shader>
		<depth public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</depth>
		<group public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</group>
		<clip_rect public="1" get="accessor" set="accessor">
			<c path="phoenix.Rectangle"/>
			<meta><m n=":isVar"/></meta>
		</clip_rect>
		<shadow_primitive_type><x path="phoenix.PrimitiveType"/></shadow_primitive_type>
		<shadow_texture><c path="phoenix.Texture"/></shadow_texture>
		<shadow_shader><c path="phoenix.Shader"/></shadow_shader>
		<shadow_group><x path="Int"/></shadow_group>
		<shadow_depth><x path="Float"/></shadow_depth>
		<shadow_clip><x path="Bool"/></shadow_clip>
		<dirty_primitive_type><x path="Bool"/></dirty_primitive_type>
		<dirty_texture><x path="Bool"/></dirty_texture>
		<dirty_shader><x path="Bool"/></dirty_shader>
		<dirty_group><x path="Bool"/></dirty_group>
		<dirty_depth><x path="Bool"/></dirty_depth>
		<dirty_clip><x path="Bool"/></dirty_clip>
		<visible public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</visible>
		<immediate public="1">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</immediate>
		<locked public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</locked>
		<dirty public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</dirty>
		<color public="1" set="accessor">
			<c path="phoenix.Color"/>
			<meta><m n=":isVar"/></meta>
		</color>
		<clip public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta>
				<m n=":noCompletion"/>
				<m n=":isVar"/>
			</meta>
		</clip>
		<_final_vert_position><c path="phoenix.Vector"/></_final_vert_position>
		<key public="1"><c path="phoenix.geometry.GeometryKey"/></key>
		<key_string public="1" set="method" line="179"><f a=""><c path="String"/></f></key_string>
		<refresh_key public="1" set="method" line="193"><f a=""><x path="Void"/></f></refresh_key>
		<str public="1" set="method" line="209"><f a=""><x path="Void"/></f></str>
		<drop public="1" set="method" line="217"><f a="?remove" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></drop>
		<add public="1" set="method" line="236"><f a="v">
	<c path="phoenix.geometry.Vertex"/>
	<x path="Void"/>
</f></add>
		<remove public="1" set="method" line="246"><f a="v">
	<c path="phoenix.geometry.Vertex"/>
	<x path="Void"/>
</f></remove>
		<batch public="1" set="method" line="252"><f a="vert_index:tcoord_index:color_index:normal_index:vertlist:tcoordlist:colorlist:normallist">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<t path="snow.utils.Float32Array"/>
	<t path="snow.utils.Float32Array"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></batch>
		<batch_into_arrays public="1" set="method" line="323"><f a="vertlist:tcoordlist:colorlist:normallist">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></batch_into_arrays>
		<translate public="1" set="method" line="363"><f a="_offset">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></translate>
		<set_locked set="method" line="369"><f a="_locked">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_locked>
		<get_locked set="method" line="375"><f a=""><x path="Bool"/></f></get_locked>
		<set_dirty set="method" line="381"><f a="_dirty">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dirty>
		<get_dirty set="method" line="387"><f a=""><x path="Bool"/></f></get_dirty>
		<refresh set="method" line="395"><f a=""><x path="Void"/></f></refresh>
		<get_primitive_type set="method" line="444"><f a=""><x path="phoenix.PrimitiveType"/></f></get_primitive_type>
		<set_primitive_type set="method" line="450"><f a="val">
	<x path="phoenix.PrimitiveType"/>
	<x path="phoenix.PrimitiveType"/>
</f></set_primitive_type>
		<get_texture set="method" line="464"><f a=""><c path="phoenix.Texture"/></f></get_texture>
		<set_texture set="method" line="470"><f a="val">
	<c path="phoenix.Texture"/>
	<c path="phoenix.Texture"/>
</f></set_texture>
		<set_visible set="method" line="484"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<set_color set="method" line="492"><f a="val">
	<c path="phoenix.Color"/>
	<c path="phoenix.Color"/>
</f></set_color>
		<get_shader set="method" line="504"><f a=""><c path="phoenix.Shader"/></f></get_shader>
		<set_shader set="method" line="510"><f a="val">
	<c path="phoenix.Shader"/>
	<c path="phoenix.Shader"/>
</f></set_shader>
		<get_depth set="method" line="524"><f a=""><x path="Float"/></f></get_depth>
		<set_depth set="method" line="531"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_depth>
		<get_group set="method" line="545"><f a=""><x path="Int"/></f></get_group>
		<set_group set="method" line="551"><f a="val">
	<x path="Int"/>
	<x path="Int"/>
</f></set_group>
		<get_clip set="method" line="565"><f a=""><x path="Bool"/></f></get_clip>
		<set_clip set="method" line="571"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clip>
		<get_clip_rect set="method" line="585"><f a=""><c path="phoenix.Rectangle"/></f></get_clip_rect>
		<set_clip_rect set="method" line="591"><f a="val">
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Rectangle"/>
</f></set_clip_rect>
		<new public="1" set="method" line="103"><f a="?options" v="null">
	<t path="luxe.options.GeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.CircleGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/CircleGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<set public="1" set="method" line="67"><f a="_x:_y:_rx:_ry:_steps:?_start_angle:?_end_angle" v=":::::0:360">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<new public="1" set="method" line="16"><f a="?options" v="null">
	<t path="luxe.options.CircleGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.RingGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/RingGeometry.hx">
		<extends path="phoenix.geometry.CircleGeometry"/>
		<set public="1" set="method" line="23" override="1"><f a="_x:_y:_rx:_ry:_steps:?_start_angle_degrees:?_end_angle_degrees" v=":::::0:360">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<new public="1" set="method" line="14"><f a="?options" v="null">
	<t path="luxe.options.CircleGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.ArcGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/ArcGeometry.hx">
		<extends path="phoenix.geometry.RingGeometry"/>
		<new public="1" set="method" line="15"><f a="?options" v="null">
	<t path="luxe.options.CircleGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.CompositeGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/CompositeGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<geometry public="1"><c path="Array"><c path="phoenix.geometry.Geometry"/></c></geometry>
		<toString set="method" line="28"><f a=""><c path="String"/></f></toString>
		<clear public="1" set="method" line="34"><f a=""><x path="Void"/></f></clear>
		<replace public="1" set="method" line="45"><f a="_geometry">
	<c path="Array"><c path="phoenix.geometry.Geometry"/></c>
	<x path="Void"/>
</f></replace>
		<has_geometry public="1" set="method" line="58"><f a="geom">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Bool"/>
</f></has_geometry>
		<add_geometry public="1" set="method" line="64"><f a="geom">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Void"/>
</f></add_geometry>
		<remove_geometry public="1" set="method" line="73"><f a="g">
	<c path="phoenix.geometry.Geometry"/>
	<x path="Void"/>
</f></remove_geometry>
		<add_to_batcher public="1" set="method" line="81"><f a="_batcher">
	<c path="phoenix.Batcher"/>
	<x path="Void"/>
</f></add_to_batcher>
		<drop public="1" set="method" line="89" override="1"><f a="?remove" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></drop>
		<translate public="1" set="method" line="103" override="1"><f a="_offset">
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></translate>
		<set_color set="method" line="117" override="1"><f a="_color">
	<c path="phoenix.Color"/>
	<c path="phoenix.Color"/>
</f></set_color>
		<set_primitive_type set="method" line="129" override="1"><f a="val">
	<x path="phoenix.PrimitiveType"/>
	<x path="phoenix.PrimitiveType"/>
</f></set_primitive_type>
		<set_shader set="method" line="141" override="1"><f a="val">
	<c path="phoenix.Shader"/>
	<c path="phoenix.Shader"/>
</f></set_shader>
		<set_texture set="method" line="153" override="1"><f a="val">
	<c path="phoenix.Texture"/>
	<c path="phoenix.Texture"/>
</f></set_texture>
		<set_depth set="method" line="166" override="1"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_depth>
		<set_group set="method" line="178" override="1"><f a="val">
	<x path="Int"/>
	<x path="Int"/>
</f></set_group>
		<set_locked set="method" line="190" override="1"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_locked>
		<set_dirty set="method" line="202" override="1"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dirty>
		<set_clip_rect set="method" line="214" override="1"><f a="val">
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Rectangle"/>
</f></set_clip_rect>
		<set_visible set="method" line="226" override="1"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<new public="1" set="method" line="20"><f a="?_options" v="null">
	<t path="luxe.options.GeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.GeometryKey" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/Geometry.hx" module="phoenix.geometry.Geometry">
		<timestamp public="1"><x path="Float"/></timestamp>
		<sequence public="1"><x path="Int"/></sequence>
		<uuid public="1"><c path="String"/></uuid>
		<primitive_type public="1"><x path="phoenix.PrimitiveType"/></primitive_type>
		<texture public="1"><c path="phoenix.Texture"/></texture>
		<shader public="1"><c path="phoenix.Shader"/></shader>
		<group public="1"><x path="Int"/></group>
		<depth public="1"><x path="Float"/></depth>
		<clip public="1"><x path="Bool"/></clip>
		<new public="1" get="inline" set="null" line="23"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.GeometryState" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/GeometryState.hx">
		<dirty public="1"><x path="Bool"/></dirty>
		<primitive_type public="1" set="accessor">
			<x path="phoenix.PrimitiveType"/>
			<meta><m n=":isVar"/></meta>
		</primitive_type>
		<shader public="1" set="accessor">
			<c path="phoenix.Shader"/>
			<meta><m n=":isVar"/></meta>
		</shader>
		<texture public="1" set="accessor">
			<c path="phoenix.Texture"/>
			<meta><m n=":isVar"/></meta>
		</texture>
		<depth public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</depth>
		<group public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</group>
		<clip public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</clip>
		<clip_rect public="1" set="accessor">
			<c path="phoenix.Rectangle"/>
			<meta><m n=":isVar"/></meta>
		</clip_rect>
		<log public="1"><x path="Bool"/></log>
		<clone_onto public="1" set="method" line="36"><f a="_other">
	<c path="phoenix.geometry.GeometryState"/>
	<x path="Void"/>
</f></clone_onto>
		<str public="1" set="method" line="49"><f a=""><x path="Void"/></f></str>
		<clean public="1" set="method" line="68"><f a=""><x path="Void"/></f></clean>
		<update public="1" set="method" line="74"><f a="other">
	<c path="phoenix.geometry.GeometryState"/>
	<x path="Void"/>
</f></update>
		<set_primitive_type public="1" set="method" line="109"><f a="val">
	<x path="phoenix.PrimitiveType"/>
	<x path="phoenix.PrimitiveType"/>
</f></set_primitive_type>
		<set_texture public="1" set="method" line="114"><f a="val">
	<c path="phoenix.Texture"/>
	<c path="phoenix.Texture"/>
</f></set_texture>
		<set_shader public="1" set="method" line="119"><f a="val">
	<c path="phoenix.Shader"/>
	<c path="phoenix.Shader"/>
</f></set_shader>
		<set_depth public="1" set="method" line="124"><f a="val">
	<x path="Float"/>
	<x path="Float"/>
</f></set_depth>
		<set_group public="1" set="method" line="128"><f a="val">
	<x path="Int"/>
	<x path="Int"/>
</f></set_group>
		<set_clip public="1" set="method" line="133"><f a="val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clip>
		<set_clip_rect public="1" set="method" line="138"><f a="val">
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Rectangle"/>
</f></set_clip_rect>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.LineGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/LineGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<p0 public="1" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</p0>
		<p1 public="1" set="accessor">
			<t path="luxe.Vector"/>
			<meta><m n=":isVar"/></meta>
		</p1>
		<set_p0 public="1" set="method" line="42"><f a="_p">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_p0>
		<set_p1 public="1" set="method" line="54"><f a="_p">
	<t path="luxe.Vector"/>
	<t path="luxe.Vector"/>
</f></set_p1>
		<set public="1" set="method" line="66"><f a="options">
	<d/>
	<x path="Void"/>
</f></set>
		<new public="1" set="method" line="14"><f a="?options" v="null">
	<t path="luxe.options.LineGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.PlaneGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/PlaneGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<flipx public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</flipx>
		<flipy public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</flipy>
		<_uv_cache><t path="luxe.Rectangle"/></_uv_cache>
		<is_set><x path="Bool"/></is_set>
		<uv public="1" set="method" line="42"><f a="_rect">
	<t path="luxe.Rectangle"/>
	<x path="Void"/>
</f></uv>
		<uv_space public="1" set="method" line="58"><f a="_rect">
	<t path="luxe.Rectangle"/>
	<x path="Void"/>
</f></uv_space>
		<set public="1" set="method" line="127"><f a="quad:y">
	<t path="luxe.Rectangle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<set_flipx public="1" set="method" line="174"><f a="_val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_flipx>
		<set_flipy public="1" set="method" line="185"><f a="_val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_flipy>
		<new public="1" set="method" line="21"><f a="?options" v="null">
	<t path="luxe.options.PlaneGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.QuadGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/QuadGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<flipx public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</flipx>
		<flipy public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</flipy>
		<_uv_cache><t path="luxe.Rectangle"/></_uv_cache>
		<is_set><x path="Bool"/></is_set>
		<uv public="1" set="method" line="41"><f a="_rect">
	<t path="luxe.Rectangle"/>
	<x path="Void"/>
</f></uv>
		<uv_space public="1" set="method" line="57"><f a="_rect">
	<t path="luxe.Rectangle"/>
	<x path="Void"/>
</f></uv_space>
		<resize public="1" set="method" line="126"><f a="quad">
	<t path="luxe.Vector"/>
	<x path="Void"/>
</f></resize>
		<set public="1" set="method" line="138"><f a="quad">
	<t path="luxe.Rectangle"/>
	<x path="Void"/>
</f></set>
		<set_flipx set="method" line="182"><f a="_val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_flipx>
		<set_flipy set="method" line="194"><f a="_val">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_flipy>
		<new public="1" set="method" line="20"><f a="?options" v="null">
	<t path="luxe.options.QuadGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="phoenix.geometry.PackedQuad" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/QuadPackGeometry.hx" module="phoenix.geometry.QuadPackGeometry"><a>
	<visible><x path="Bool"/></visible>
	<verts><c path="Array"><c path="phoenix.geometry.Vertex"/></c></verts>
	<uid><x path="Int"/></uid>
	<flipy><x path="Bool"/></flipy>
	<flipx><x path="Bool"/></flipx>
	<_uv_cache><c path="phoenix.Rectangle"/></_uv_cache>
</a></typedef>
	<typedef path="phoenix.geometry.PackedQuadOptions" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/QuadPackGeometry.hx" module="phoenix.geometry.QuadPackGeometry"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
	<w><x path="Float"/></w>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</visible>
	<uv>
		<c path="phoenix.Rectangle"/>
		<meta><m n=":optional"/></meta>
	</uv>
	<h><x path="Float"/></h>
	<flipy>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</flipy>
	<flipx>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</flipx>
	<color>
		<c path="phoenix.Color"/>
		<meta><m n=":optional"/></meta>
	</color>
</a></typedef>
	<class path="phoenix.geometry.QuadPackGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/QuadPackGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<quads public="1"><x path="Map">
	<x path="Int"/>
	<t path="phoenix.geometry.PackedQuad"/>
</x></quads>
		<clear public="1" set="method" line="55"><f a=""><x path="Void"/></f></clear>
		<quad_add public="1" set="method" line="63"><f a="_options">
	<t path="phoenix.geometry.PackedQuadOptions"/>
	<x path="Int"/>
</f></quad_add>
		<quad_remove public="1" set="method" line="124"><f a="_quad_id">
	<x path="Int"/>
	<x path="Void"/>
</f></quad_remove>
		<quad_visible public="1" set="method" line="146"><f a="_quad_id:visible">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></quad_visible>
		<quad_resize public="1" set="method" line="184"><f a="_quad_id:_size">
	<x path="Int"/>
	<c path="phoenix.Rectangle"/>
	<x path="Void"/>
</f></quad_resize>
		<quad_pos public="1" set="method" line="205"><f a="_quad_id:_p">
	<x path="Int"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></quad_pos>
		<quad_color public="1" set="method" line="239"><f a="_quad_id:_c">
	<x path="Int"/>
	<c path="phoenix.Color"/>
	<x path="Void"/>
</f></quad_color>
		<quad_alpha public="1" set="method" line="254"><f a="_quad_id:_a">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></quad_alpha>
		<quad_uv_space public="1" set="method" line="269"><f a="_quad_id:_uv">
	<x path="Int"/>
	<c path="phoenix.Rectangle"/>
	<x path="Void"/>
</f></quad_uv_space>
		<quad_uv public="1" set="method" line="347"><f a="_quad_id:_uv">
	<x path="Int"/>
	<c path="phoenix.Rectangle"/>
	<x path="Void"/>
</f></quad_uv>
		<quad_flipx public="1" set="method" line="363"><f a="_quad_id:_flip">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></quad_flipx>
		<quad_flipy public="1" set="method" line="374"><f a="_quad_id:_flip">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></quad_flipy>
		<new public="1" set="method" line="46"><f a="?_options" v="null">
	<t path="luxe.options.GeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.RectangleGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/RectangleGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<set public="1" set="method" line="25"><f a="options">
	<t path="luxe.options.RectangleGeometryOptions"/>
	<x path="Void"/>
</f></set>
		<new public="1" set="method" line="13"><f a="?options" v="null">
	<t path="luxe.options.RectangleGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="phoenix.geometry.TextGeometryOptions" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/TextGeometry.hx" module="phoenix.geometry.TextGeometry"><a>
	<visible>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the visibility</haxe_doc>
	</visible>
	<thickness>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</thickness>
	<texture>
		<c path="phoenix.Texture"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the texture for the geometry</haxe_doc>
	</texture>
	<text>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</text>
	<smoothness>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</smoothness>
	<shader>
		<c path="phoenix.Shader"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the shader for the geometry</haxe_doc>
	</shader>
	<sdf>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</sdf>
	<scale>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform scale</haxe_doc>
	</scale>
	<rotation>
		<c path="phoenix.Quaternion"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform rotation</haxe_doc>
	</rotation>
	<primitive_type>
		<t path="Null"><x path="phoenix.PrimitiveType"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the primitive type of the geometry. lines, triangles, point etc</haxe_doc>
	</primitive_type>
	<pos>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform position</haxe_doc>
	</pos>
	<point_size>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</point_size>
	<outline_color>
		<c path="phoenix.Color"/>
		<meta><m n=":optional"/></meta>
	</outline_color>
	<outline>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</outline>
	<origin>
		<c path="phoenix.Vector"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the transform origin</haxe_doc>
	</origin>
	<no_batcher_add>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if specified, the geometry will not be added to any batcher.</haxe_doc>
	</no_batcher_add>
	<line_spacing>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</line_spacing>
	<letter_spacing>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</letter_spacing>
	<immediate>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>if immediate, this geometry is dropped from the batcher at the end of the frame.</haxe_doc>
	</immediate>
	<id>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The geometry id. if none given, a unique id is generated.</haxe_doc>
	</id>
	<group>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry group id (see guides)</haxe_doc>
	</group>
	<glow_threshold>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</glow_threshold>
	<glow_color>
		<c path="phoenix.Color"/>
		<meta><m n=":optional"/></meta>
	</glow_color>
	<glow_amount>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
	</glow_amount>
	<font>
		<c path="phoenix.BitmapFont"/>
		<meta><m n=":optional"/></meta>
	</font>
	<depth>
		<t path="Null"><x path="Float"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the geometry depth value (see guides)</haxe_doc>
	</depth>
	<color>
		<t path="luxe.Color"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the base color</haxe_doc>
	</color>
	<clip_rect>
		<t path="luxe.Rectangle"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If specified, the geometry will be clipped to this rectangle region (in world space).</haxe_doc>
	</clip_rect>
	<bounds_wrap>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</bounds_wrap>
	<bounds>
		<c path="phoenix.Rectangle"/>
		<meta><m n=":optional"/></meta>
	</bounds>
	<batcher>
		<c path="phoenix.Batcher"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>the batcher to add the geometry to. If not specified, the default batcher is used.</haxe_doc>
	</batcher>
	<align_vertical>
		<t path="Null"><x path="phoenix.TextAlign"/></t>
		<meta><m n=":optional"/></meta>
	</align_vertical>
	<align>
		<t path="Null"><x path="phoenix.TextAlign"/></t>
		<meta><m n=":optional"/></meta>
	</align>
</a></typedef>
	<class path="phoenix.geometry.TextGeometry" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/TextGeometry.hx">
		<extends path="phoenix.geometry.Geometry"/>
		<tab_regex line="99" static="1"><c path="EReg"/></tab_regex>
		<text public="1" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
		</text>
		<font public="1">
			<c path="phoenix.BitmapFont"/>
			<meta><m n=":isVar"/></meta>
		</font>
		<point_size public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</point_size>
		<line_spacing public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</line_spacing>
		<letter_spacing public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</letter_spacing>
		<bounds public="1" set="accessor">
			<c path="phoenix.Rectangle"/>
			<meta><m n=":isVar"/></meta>
		</bounds>
		<bounds_wrap public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
		</bounds_wrap>
		<align public="1" set="accessor">
			<x path="phoenix.TextAlign"/>
			<meta><m n=":isVar"/></meta>
		</align>
		<align_vertical public="1" set="accessor">
			<x path="phoenix.TextAlign"/>
			<meta><m n=":isVar"/></meta>
		</align_vertical>
		<sdf public="1"><x path="Bool"/></sdf>
		<unique public="1"><x path="Bool"/></unique>
		<smoothness public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</smoothness>
		<thickness public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</thickness>
		<outline public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</outline>
		<outline_color public="1" set="accessor">
			<c path="phoenix.Color"/>
			<meta><m n=":isVar"/></meta>
		</outline_color>
		<glow_threshold public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</glow_threshold>
		<glow_amount public="1" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
		</glow_amount>
		<glow_color public="1" set="accessor">
			<c path="phoenix.Color"/>
			<meta><m n=":isVar"/></meta>
		</glow_color>
		<line_widths public="1"><c path="Array"><x path="Float"/></c></line_widths>
		<text_width public="1"><x path="Float"/></text_width>
		<text_height public="1"><x path="Float"/></text_height>
		<line_offsets public="1"><c path="Array"><c path="Array"><x path="Float"/></c></c></line_offsets>
		<lines public="1"><c path="Array"><c path="String"/></c></lines>
		<cache><c path="Array"><c path="Array"><c path="phoenix.geometry.Vertex"/></c></c></cache>
		<options><t path="phoenix.geometry.TextGeometryOptions"/></options>
		<text_h_w><x path="Float"/></text_h_w>
		<text_h_h><x path="Float"/></text_h_h>
		<point_ratio><x path="Float"/></point_ratio>
		<dirty_sizing set="accessor"><x path="Bool"/></dirty_sizing>
		<dirty_align><x path="Bool"/></dirty_align>
		<tidy public="1" set="method" line="153">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Remove any cached vertices that are unused by the current text.</haxe_doc>
		</tidy>
		<default_options set="method" line="178"><f a=""><x path="Void"/></f></default_options>
		<set_text set="method" line="225"><f a="_text">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<stats set="method" line="254"><f a=""><c path="String"/></f></stats>
		<update_sizes set="method" line="259"><f a=""><x path="Bool"/></f></update_sizes>
		<update_text set="method" line="288"><f a=""><x path="Void"/></f></update_text>
		<update_char set="method" line="444"><f a="_letteridx:_x:_y:_w:_h:_u:_v:_u2:_v2:_color">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.Color"/>
	<x path="Void"/>
</f></update_char>
		<set_dirty_sizing set="method" line="507"><f a="_b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_dirty_sizing>
		<set_bounds set="method" line="516"><f a="_bounds">
	<c path="phoenix.Rectangle"/>
	<c path="phoenix.Rectangle"/>
</f></set_bounds>
		<set_bounds_wrap set="method" line="528"><f a="_wrap">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bounds_wrap>
		<set_line_spacing set="method" line="540"><f a="_line_spacing">
	<x path="Float"/>
	<x path="Float"/>
</f></set_line_spacing>
		<set_letter_spacing set="method" line="552"><f a="_letter_spacing">
	<x path="Float"/>
	<x path="Float"/>
</f></set_letter_spacing>
		<set_align set="method" line="564"><f a="_align">
	<x path="phoenix.TextAlign"/>
	<x path="phoenix.TextAlign"/>
</f></set_align>
		<set_align_vertical set="method" line="576"><f a="_align_vertical">
	<x path="phoenix.TextAlign"/>
	<x path="phoenix.TextAlign"/>
</f></set_align_vertical>
		<set_point_size set="method" line="588"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_point_size>
		<set_smoothness set="method" line="605"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_smoothness>
		<set_thickness set="method" line="618"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_thickness>
		<set_outline set="method" line="631"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_outline>
		<set_glow_threshold set="method" line="644"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_glow_threshold>
		<set_glow_amount set="method" line="657"><f a="s">
	<x path="Float"/>
	<x path="Float"/>
</f></set_glow_amount>
		<set_outline_color set="method" line="670"><f a="c">
	<c path="phoenix.Color"/>
	<c path="phoenix.Color"/>
</f></set_outline_color>
		<set_glow_color set="method" line="681"><f a="c">
	<c path="phoenix.Color"/>
	<c path="phoenix.Color"/>
</f></set_glow_color>
		<flush_uniforms set="method" line="695"><f a=""><x path="Void"/></f></flush_uniforms>
		<new public="1" set="method" line="101"><f a="_options">
	<t path="phoenix.geometry.TextGeometryOptions"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.TextureCoordSet" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/TextureCoord.hx" module="phoenix.geometry.TextureCoord">
		<uv0 public="1"><c path="phoenix.geometry.TextureCoord"/></uv0>
		<uv1 public="1"><c path="phoenix.geometry.TextureCoord"/></uv1>
		<uv2 public="1"><c path="phoenix.geometry.TextureCoord"/></uv2>
		<uv3 public="1"><c path="phoenix.geometry.TextureCoord"/></uv3>
		<uv4 public="1"><c path="phoenix.geometry.TextureCoord"/></uv4>
		<uv5 public="1"><c path="phoenix.geometry.TextureCoord"/></uv5>
		<uv6 public="1"><c path="phoenix.geometry.TextureCoord"/></uv6>
		<uv7 public="1"><c path="phoenix.geometry.TextureCoord"/></uv7>
		<clone public="1" get="inline" set="null" line="30"><f a=""><c path="phoenix.geometry.TextureCoordSet"/></f></clone>
		<new public="1" get="inline" set="null" line="17"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.TextureCoord" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/TextureCoord.hx">
		<u public="1"><x path="Float"/></u>
		<v public="1"><x path="Float"/></v>
		<w public="1"><x path="Float"/></w>
		<t public="1"><x path="Float"/></t>
		<clone public="1" get="inline" set="null" line="69"><f a=""><c path="phoenix.geometry.TextureCoord"/></f></clone>
		<set public="1" get="inline" set="null" line="75"><f a="_u:_v:_w:_t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.geometry.TextureCoord"/>
</f></set>
		<set_uv public="1" get="inline" set="null" line="86"><f a="_u:_v">
	<x path="Float"/>
	<x path="Float"/>
	<c path="phoenix.geometry.TextureCoord"/>
</f></set_uv>
		<toString get="inline" set="null" line="95"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="60"><f a="?_u:?_v:?_w:?_t" v="0.0f:0.0f:0.0f:0.0f">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.geometry.Vertex" params="" file="/Users/sven/dev/luxe/luxe/phoenix/geometry/Vertex.hx">
		<pos public="1"><c path="phoenix.Vector"/></pos>
		<color public="1"><c path="phoenix.Color"/></color>
		<uv public="1"><c path="phoenix.geometry.TextureCoordSet"/></uv>
		<normal public="1"><c path="phoenix.Vector"/></normal>
		<clone public="1" get="inline" set="null" line="28"><f a=""><c path="phoenix.geometry.Vertex"/></f></clone>
		<new public="1" get="inline" set="null" line="18"><f a="_pos:?_color:?_normal" v=":null:null">
	<c path="phoenix.Vector"/>
	<c path="phoenix.Color"/>
	<c path="phoenix.Vector"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="phoenix.utils.Rendering" params="" file="/Users/sven/dev/luxe/luxe/phoenix/utils/Rendering.hx">
		<gl_blend_mode_from_BlendMode public="1" set="method" line="9" static="1"><f a="_b">
	<x path="phoenix.BlendMode"/>
	<x path="Int"/>
</f></gl_blend_mode_from_BlendMode>
		<get_elements_for_type public="1" set="method" line="38" static="1"><f a="type:length">
	<x path="phoenix.PrimitiveType"/>
	<x path="Int"/>
	<x path="Int"/>
</f></get_elements_for_type>
		<fovx_to_y public="1" get="inline" set="null" line="58" static="1"><f a="fovx:aspect">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></fovx_to_y>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.AppFixedTimestep" params="" file="/Users/sven/dev/snow/snow/App.hx" module="snow.App">
		<extends path="snow.App"/>
		<frame_time public="1">
			<x path="Float"/>
			<haxe_doc>fixed simulation update speed</haxe_doc>
		</frame_time>
		<overflow public="1">
			<x path="Float"/>
			<haxe_doc>the overflow of the updates. This is used internally, for you, to calculate the alpha time for rendering interpolation as follows `alpha = overflow / frame_time;`</haxe_doc>
		</overflow>
		<on_internal_init set="method" line="174" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</on_internal_init>
		<on_internal_update set="method" line="186" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</on_internal_update>
		<new public="1" set="method" line="166"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Read the {App Guide} for full info, and for even more information see : http://gafferongames.com/game-physics/fix-your-timestep/
    this stores and calculates a fixed game update loop, and rendering interpolation is required
    for smooth updates between frames.</haxe_doc>
	</class>
	<typedef path="snow.Core" params="" file="/Users/sven/dev/snow/snow/Core.hx">
		<c path="snow.platform.native.Core"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.utils.AbstractClass" params="" file="/Users/sven/dev/snow/snow/utils/AbstractClass.hx" interface="1">
		<haxe_doc>Old school abstract class.
	Classes that implements it, and their sub-classes, will be able to declare abstract methods (methods that without body).
	There will be a check in compile-time such that no public constructor is allowed without all abstract methods implemented.</haxe_doc>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="snow.CoreBinding" params="" file="/Users/sven/dev/snow/snow/Core.hx" module="snow.Core">
		<implements path="snow.utils.AbstractClass"/>
		<app><c path="snow.Snow"/></app>
		<init public="1" set="method" line="23">
			<f a="_event_handler">
				<f a="">
					<t path="snow.types.SystemEvent"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called by the snow internals to intiialize the core and subsystems of the framework, with the event handler passed in for where to deliver system events</haxe_doc>
		</init>
		<shutdown public="1" set="method" line="25">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called to explicitly shutdown the framework cleanly. Called by `quit` and `app_terminated` type events by the core, for example.</haxe_doc>
		</shutdown>
		<timestamp public="1" set="method" line="27">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Get the most precise timestamp available on the platform, in seconds (time is always in seconds in snow)</haxe_doc>
		</timestamp>
		<app_path public="1" set="method" line="29">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the full path that the application is located</haxe_doc>
		</app_path>
		<pref_path public="1" set="method" line="31">
			<f a="_package:_appname">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>On platforms where this makes sense, get the application specific writeable data path</haxe_doc>
		</pref_path>
		<haxe_doc>Implemented in the platform specific concrete versions of this class.</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.Log" params="" file="/Users/sven/dev/snow/snow/Log.hx">
		<_level public="1" line="10" static="1"><x path="Int"/></_level>
		<_filter public="1" static="1"><c path="Array"><c path="String"/></c></_filter>
		<_exclude public="1" static="1"><c path="Array"><c path="String"/></c></_exclude>
		<_log_width public="1" line="13" static="1"><x path="Int"/></_log_width>
		<_get_spacing set="method" line="210" static="1"><f a="_file">
	<c path="String"/>
	<c path="String"/>
</f></_get_spacing>
	</class>
	<class path="snow.Snow" params="" file="/Users/sven/dev/snow/snow/Snow.hx">
		<core public="1" static="1">
			<t path="snow.Core"/>
			<meta><m n=":noCompletion"/></meta>
		</core>
		<load public="1" set="method" line="483" static="1">
			<f a="library:method:?args" v="::0">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Loads a function out of a library</haxe_doc>
		</load>
		<next_list static="1"><c path="Array"><f a=""><x path="Void"/></f></c></next_list>
		<next public="1" set="method" line="493" static="1">
			<f a="func">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call a function at the start of the next frame,
            useful for async calls in a sync context, allowing the sync function to return safely before the onload is fired.</haxe_doc>
		</next>
		<time public="1" get="accessor" set="null">
			<x path="Float"/>
			<haxe_doc>The current timestamp</haxe_doc>
		</time>
		<uniqueid public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Generate a unique ID to use</haxe_doc>
		</uniqueid>
		<host public="1">
			<c path="snow.App"/>
			<haxe_doc>The host application</haxe_doc>
		</host>
		<config public="1">
			<t path="snow.types.AppConfig"/>
			<haxe_doc>The application configuration specifics (like window, runtime, and asset lists)</haxe_doc>
		</config>
		<snow_config public="1">
			<t path="snow.types.SnowConfig"/>
			<haxe_doc>The configuration for snow itself, set via build project flags</haxe_doc>
		</snow_config>
		<freeze public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Whether or not we are frozen, ignoring events i.e backgrounded/paused</haxe_doc>
		</freeze>
		<io public="1">
			<c path="snow.io.IO"/>
			<haxe_doc>The io system</haxe_doc>
		</io>
		<input public="1">
			<c path="snow.input.Input"/>
			<haxe_doc>The input system</haxe_doc>
		</input>
		<assets public="1">
			<c path="snow.assets.Assets"/>
			<haxe_doc>The asset system</haxe_doc>
		</assets>
		<audio public="1">
			<c path="snow.audio.Audio"/>
			<haxe_doc>The audio system</haxe_doc>
		</audio>
		<windowing public="1">
			<c path="snow.window.Windowing"/>
			<haxe_doc>The window manager</haxe_doc>
		</windowing>
		<shutting_down public="1">
			<x path="Bool"/>
			<haxe_doc>Set if shut down has commenced</haxe_doc>
		</shutting_down>
		<has_shutdown public="1">
			<x path="Bool"/>
			<haxe_doc>Set if shut dow has completed</haxe_doc>
		</has_shutdown>
		<window public="1">
			<c path="snow.window.Window"/>
			<haxe_doc>If the config specifies a default window, this is it</haxe_doc>
		</window>
		<was_ready><x path="Bool"/></was_ready>
		<is_ready><x path="Bool"/></is_ready>
		<init public="1" set="method" line="85">
			<f a="_snow_config:_host">
				<t path="snow.types.SnowConfig"/>
				<c path="snow.App"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<shutdown public="1" set="method" line="113">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Shutdown the engine and quit</haxe_doc>
		</shutdown>
		<get_time get="inline" set="null" line="129"><f a=""><x path="Float"/></f></get_time>
		<on_snow_init set="method" line="135"><f a=""><x path="Void"/></f></on_snow_init>
		<on_snow_ready set="method" line="163"><f a=""><x path="Void"/></f></on_snow_ready>
		<do_internal_update set="method" line="236">
			<f a="dt">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
		</do_internal_update>
		<render public="1" set="method" line="246">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called for you by snow, unless configured otherwise. Only call this manually if your render_rate is 0!</haxe_doc>
		</render>
		<on_snow_update set="method" line="252"><f a=""><x path="Void"/></f></on_snow_update>
		<dispatch_system_event public="1" set="method" line="286"><f a="_event">
	<t path="snow.types.SystemEvent"/>
	<x path="Void"/>
</f></dispatch_system_event>
		<on_event set="method" line="292"><f a="_event">
	<t path="snow.types.SystemEvent"/>
	<x path="Void"/>
</f></on_event>
		<set_freeze set="method" line="347"><f a="_freeze">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_freeze>
		<default_runtime_config set="method" line="365">
			<f a=""><d/></f>
			<haxe_doc>handles the default method of parsing a runtime config json,
            To change this behavior override `get_runtime_config`. This is called by default in get_runtime_config.</haxe_doc>
		</default_runtime_config>
		<default_asset_list set="method" line="394">
			<f a=""><c path="Array"><t path="snow.types.AssetInfo"/></c></f>
			<haxe_doc>handles the default method of parsing the file manifest list as json, stored in an array and returned.</haxe_doc>
		</default_asset_list>
		<default_render_config set="method" line="428">
			<f a=""><t path="snow.types.RenderConfig"/></f>
			<haxe_doc>Returns a default configured render config</haxe_doc>
		</default_render_config>
		<default_window_config set="method" line="449">
			<f a=""><t path="snow.types.WindowConfig"/></f>
			<haxe_doc>Returns a default configured window config</haxe_doc>
		</default_window_config>
		<get_uniqueid set="method" line="476"><f a=""><c path="String"/></f></get_uniqueid>
		<new public="1" set="method" line="75">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</new>
	</class>
	<class path="snow.assets.Asset" params="" file="/Users/sven/dev/snow/snow/assets/Asset.hx">
		<assets public="1">
			<c path="snow.assets.Assets"/>
			<haxe_doc>The asset manager associated with this asset</haxe_doc>
		</assets>
		<id public="1">
			<c path="String"/>
			<haxe_doc>The id of this asset like `assets/image.png`</haxe_doc>
		</id>
		<info public="1">
			<t path="snow.types.AssetInfo"/>
			<haxe_doc>The `AssetInfo` of this asset</haxe_doc>
		</info>
		<type public="1">
			<x path="snow.types.AssetType"/>
			<haxe_doc>The concrete type this asset holds (useful when handling as Asset base class)</haxe_doc>
		</type>
		<loaded public="1">
			<x path="Bool"/>
			<haxe_doc>True if this asset has completely loaded. Only changed through `load` and when load completes</haxe_doc>
		</loaded>
		<new public="1" set="method" line="24">
			<f a="_assets:_info">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from subclasses, by `app.assets`</haxe_doc>
		</new>
		<haxe_doc>An asset base class. Get assets from the `app.assets`</haxe_doc>
	</class>
	<class path="snow.assets.AssetAudio" params="" file="/Users/sven/dev/snow/snow/assets/AssetAudio.hx">
		<extends path="snow.assets.Asset"/>
		<audio public="1">
			<t path="snow.types.AudioInfo"/>
			<haxe_doc>The `AudioInfo` this asset contains</haxe_doc>
		</audio>
		<format public="1">
			<x path="snow.types.AudioFormatType"/>
			<haxe_doc>The audio format of this asset.</haxe_doc>
		</format>
		<load_full public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this asset is to be loaded in full (or alternatively, streamed). Used from `load` only.</haxe_doc>
		</load_full>
		<load public="1" set="method" line="35">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetAudio"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.audio`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<new public="1" set="method" line="23">
			<f a="_assets:_info:_format:?_load" v=":::true">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="snow.types.AudioFormatType"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Created from `app.assets.audio`.</haxe_doc>
		</new>
		<haxe_doc>An asset that contains audio file `audio` as an `AudioInfo`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</class>
	<class path="snow.assets.AssetBytes" params="" file="/Users/sven/dev/snow/snow/assets/AssetBytes.hx">
		<extends path="snow.assets.Asset"/>
		<bytes public="1">
			<t path="snow.utils.ByteArray"/>
			<haxe_doc>The `ByteArray` this asset contains</haxe_doc>
		</bytes>
		<async public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this bytes data will load syncronously. Used in `load` only.</haxe_doc>
		</async>
		<load public="1" set="method" line="31">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetBytes"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.bytes`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<load_from_bytes public="1" set="method" line="53"><f a="_bytes:?onload" v=":null">
	<t path="snow.utils.ByteArray"/>
	<f a="">
		<c path="snow.assets.AssetBytes"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></load_from_bytes>
		<new public="1" set="method" line="21">
			<f a="_assets:_info:?_async" v="::false">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains byte `bytes` as a `ByteArray`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</class>
	<class path="snow.assets.AssetImage" params="" file="/Users/sven/dev/snow/snow/assets/AssetImage.hx">
		<extends path="snow.assets.Asset"/>
		<image public="1">
			<t path="snow.types.ImageInfo"/>
			<haxe_doc>The `ImageInfo` this asset contains</haxe_doc>
		</image>
		<components public="1">
			<x path="Int"/>
			<haxe_doc>The requested components when loading this image.</haxe_doc>
		</components>
		<load public="1" set="method" line="32">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetImage"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.image`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<load_from_bytes public="1" set="method" line="57">
			<f a="bytes:?onload" v=":null">
				<t path="snow.utils.ByteArray"/>
				<f a="">
					<c path="snow.assets.AssetImage"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.image`, or manually, if reloading the asset data at a later point. This is a synchronous call</haxe_doc>
		</load_from_bytes>
		<load_from_pixels public="1" set="method" line="77">
			<f a="_id:_width:_height:_pixels:?onload" v="::::null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.utils.UInt8Array"/>
				<f a="">
					<c path="snow.assets.AssetImage"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create an image asset from a pre-existing decoded image info. This is a synchronous call</haxe_doc>
		</load_from_pixels>
		<new public="1" set="method" line="22">
			<f a="_assets:_info:?_components" v="::4">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains image file `image` as an `ImageInfo`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</class>
	<typedef path="snow.assets.AssetSystem" params="" file="/Users/sven/dev/snow/snow/assets/AssetSystem.hx">
		<c path="snow.platform.native.assets.AssetSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.assets.AssetSystemBinding" params="" file="/Users/sven/dev/snow/snow/assets/AssetSystem.hx" module="snow.assets.AssetSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.assets.Assets"/></manager>
		<exists public="1" set="method" line="28">
			<f a="_id:?_strict" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Return true if the asset exists or false if not.
            If strict is enabled, it will only check the stored asset list.
            If strict is false, will allow unlisted paths and use platform specific exists checks.
            On web targets, this will return false for unlisted files as http requests for 404's is silly.</haxe_doc>
		</exists>
		<image_load_info public="1" set="method" line="33">
			<f a="_path:?_components:?_onload" v=":4:null">
				<c path="String"/>
				<x path="Int"/>
				<f a="?">
					<t path="snow.types.ImageInfo"/>
					<x path="Void"/>
				</f>
				<t path="snow.types.ImageInfo"/>
			</f>
			<haxe_doc>Image info load from file path. Use `app.assets`</haxe_doc>
		</image_load_info>
		<image_info_from_bytes public="1" set="method" line="35">
			<f a="_path:_bytes:?_components" v="::4">
				<c path="String"/>
				<t path="snow.utils.ByteArray"/>
				<x path="Int"/>
				<t path="snow.types.ImageInfo"/>
			</f>
			<haxe_doc>Image info load from `ByteArray`. Use `app.assets`</haxe_doc>
		</image_info_from_bytes>
		<audio_load_info public="1" set="method" line="40">
			<f a="_path:?_format:?_load:?_onload" v=":null:true:null">
				<c path="String"/>
				<x path="snow.types.AudioFormatType"/>
				<x path="Bool"/>
				<f a="?">
					<t path="snow.types.AudioInfo"/>
					<x path="Void"/>
				</f>
				<t path="snow.types.AudioInfo"/>
			</f>
			<haxe_doc>Audio info loader, use `app.assets`.</haxe_doc>
		</audio_load_info>
		<audio_seek_source public="1" set="method" line="55">
			<f a="_info:_to">
				<t path="snow.types.AudioInfo"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Audio seek the specified audio info to the given position in bytes. `native` only</haxe_doc>
		</audio_seek_source>
		<audio_load_portion public="1" set="method" line="57">
			<f a="_info:_start:_len">
				<t path="snow.types.AudioInfo"/>
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.AudioDataBlob"/>
			</f>
			<haxe_doc>Audio portion loading (used for streaming or splitting source files into multiple blobs). sizes are in bytes. `native` only</haxe_doc>
		</audio_load_portion>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.assets.AssetText" params="" file="/Users/sven/dev/snow/snow/assets/AssetText.hx">
		<extends path="snow.assets.Asset"/>
		<text public="1">
			<c path="String"/>
			<haxe_doc>The `String` this asset contains</haxe_doc>
		</text>
		<async public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this bytes data will load syncronously. Used in `load` only.</haxe_doc>
		</async>
		<load public="1" set="method" line="31">
			<f a="?onload" v="null">
				<f a="">
					<c path="snow.assets.AssetText"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.text`, or manually, if reloading the asset data at a later point.
            Note this function calls the onload handler in the next frame, so sync code can return.</haxe_doc>
		</load>
		<load_from_string public="1" set="method" line="53"><f a="_string:?onload" v=":null">
	<c path="String"/>
	<f a="">
		<c path="snow.assets.AssetText"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></load_from_string>
		<new public="1" set="method" line="21">
			<f a="_assets:_info:?_async" v="::false">
				<c path="snow.assets.Assets"/>
				<t path="snow.types.AssetInfo"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called from `app.assets.text`</haxe_doc>
		</new>
		<haxe_doc>An asset that contains `text` as a `String`. Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</class>
	<class path="snow.assets.Assets" params="" file="/Users/sven/dev/snow/snow/assets/Assets.hx">
		<list public="1">
			<x path="Map">
				<c path="String"/>
				<t path="snow.types.AssetInfo"/>
			</x>
			<haxe_doc>The list of assets in the system, added at startup by the `App` class, in the `get_asset_list` function</haxe_doc>
		</list>
		<assets_root public="1">
			<c path="String"/>
			<haxe_doc>If the assets are not relative to the runtime root path, this value can adjust all asset paths. This is automatically handled and exists to allow control.</haxe_doc>
		</assets_root>
		<manifest_path public="1">
			<c path="String"/>
			<haxe_doc>The manifest file to parse for the asset list. By default, this is set to `manifest` from the build tools but the `App` class can have a custom `get_asset_list` handler use this value.</haxe_doc>
		</manifest_path>
		<strict public="1">
			<x path="Bool"/>
			<haxe_doc>The default approach to finding assets, overridable in each get call, this value will be used if the flag is not specified.</haxe_doc>
		</strict>
		<platform public="1">
			<t path="snow.assets.AssetSystem"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to platform implementation</haxe_doc>
		</platform>
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to snow from subsystems</haxe_doc>
		</lib>
		<add public="1" set="method" line="56">
			<f a="_list">
				<c path="Array"><t path="snow.types.AssetInfo"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Add an asset info list to the system</haxe_doc>
		</add>
		<get public="1" set="method" line="80">
			<f a="_id">
				<c path="String"/>
				<t path="snow.types.AssetInfo"/>
			</f>
			<haxe_doc>Get an asset info for a given id</haxe_doc>
		</get>
		<listed public="1" set="method" line="87">
			<f a="_id">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if an asset info exists in the list for a given id.</haxe_doc>
		</listed>
		<exists public="1" set="method" line="96">
			<f a="_id:?_strict" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if an asset exists for a given id.
            On web targets, there is no file exists check so unless it is stored in the asset list
            this function will return false specyifying why.</haxe_doc>
		</exists>
		<path public="1" set="method" line="105">
			<f a="_id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the asset path for an asset, adjusted by platform, root etc.
            If it fails to find the asset the id is returned as is with the asset root prefixed.</haxe_doc>
		</path>
		<bytes public="1" set="method" line="117">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetBytesOptions"/>
				<c path="snow.assets.AssetBytes"/>
			</f>
			<haxe_doc>Get an asset as a `AssetBytes`, data stored as `ByteArray` used for binary assets.</haxe_doc>
		</bytes>
		<text public="1" set="method" line="148">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetTextOptions"/>
				<c path="snow.assets.AssetText"/>
			</f>
			<haxe_doc>Get an asset as a `AssetText`, data stored as `String`, used for text based assets</haxe_doc>
		</text>
		<image public="1" set="method" line="179">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetImageOptions"/>
				<c path="snow.assets.AssetImage"/>
			</f>
			<haxe_doc>Get an asset as a `AssetImage`, data stored as `ImageInfo`, used for image files</haxe_doc>
		</image>
		<audio public="1" set="method" line="222">
			<f a="_id:?options" v=":null">
				<c path="String"/>
				<t path="snow.types.AssetAudioOptions"/>
				<c path="snow.assets.AssetAudio"/>
			</f>
			<haxe_doc>Get an asset as a `AssetAudio`, used for audio files</haxe_doc>
		</audio>
		<info_from_id public="1" set="method" line="283">
			<f a="_id:_type">
				<c path="String"/>
				<c path="String"/>
				<t path="snow.types.AssetInfo"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</info_from_id>
		<exists_error set="method" line="293"><f a="_id">
	<c path="String"/>
	<x path="Void"/>
</f></exists_error>
		<load_error set="method" line="297"><f a="_id:?reason" v=":'unknown'">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></load_error>
		<new set="method" line="40">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>constructed internally, use `app.assets`</haxe_doc>
		</new>
		<haxe_doc>The asset system class gives you access to fetching and manipulating assets,
    handling loading files and data in a consistent cross platform way</haxe_doc>
	</class>
	<class path="snow.audio.Audio" params="" file="/Users/sven/dev/snow/snow/audio/Audio.hx">
		<platform public="1">
			<t path="snow.audio.AudioSystem"/>
			<haxe_doc>access to platform specific implementation</haxe_doc>
		</platform>
		<active public="1">
			<x path="Bool"/>
			<haxe_doc>Set to false to stop any and all processing in the audio system</haxe_doc>
		</active>
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for external access to the library by the systems</haxe_doc>
		</lib>
		<handles public="1">
			<c path="snow.audio._Audio.AudioHandleMap"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for mapping native handles to Sound instances. Use the `app.audio` to manipulate preferably.</haxe_doc>
		</handles>
		<sound_list public="1">
			<x path="Map">
				<c path="String"/>
				<t path="snow.audio.Sound"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for mapping named sounds to Sound instances. Use the `app.audio` to manipulate preferably.</haxe_doc>
		</sound_list>
		<stream_list public="1">
			<x path="Map">
				<c path="String"/>
				<t path="snow.audio.SoundStream"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>for mapping named streams to SoundStream instances. Use the `app.audio` to manipulate preferably.</haxe_doc>
		</stream_list>
		<create public="1" set="method" line="58">
			<f a="_id:?_name:?streaming" v=":'':false">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<t path="snow.audio.Sound"/>
			</f>
			<haxe_doc>Create a sound for playing. If no name is given, a unique id is assigned. Use the sound instance or the public api by name.</haxe_doc>
		</create>
		<uncreate public="1" set="method" line="109">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Destroy a sound instance by name. Use sound_instance.destroy() if you have an instance already.</haxe_doc>
		</uncreate>
		<on public="1" set="method" line="123">
			<f a="_name:_event:_handler">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="snow.audio.Sound"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Listen for a event on a named sound. `load` and `end` are valid events.</haxe_doc>
		</on>
		<off public="1" set="method" line="131">
			<f a="_name:_event:_handler">
				<c path="String"/>
				<c path="String"/>
				<f a="">
					<t path="snow.audio.Sound"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove a listener for a event on a named sound. see `on`</haxe_doc>
		</off>
		<get public="1" set="method" line="139">
			<f a="_name">
				<c path="String"/>
				<t path="snow.audio.Sound"/>
			</f>
			<haxe_doc>Get a sound instance by name</haxe_doc>
		</get>
		<volume public="1" set="method" line="153">
			<f a="_name:?_volume" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the volume of a sound instance by name.
            Leave the second argument blank to return the current value.</haxe_doc>
		</volume>
		<pan public="1" set="method" line="167">
			<f a="_name:?_pan" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the pan of a sound instance by name
            Leave the second argument blank to return the current value.</haxe_doc>
		</pan>
		<pitch public="1" set="method" line="181">
			<f a="_name:?_pitch" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the pitch of a sound instance by name
            Leave the second argument blank to return the current value.</haxe_doc>
		</pitch>
		<position public="1" set="method" line="195">
			<f a="_name:?_position" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get/Set the position **in seconds** of a sound instance by name.
            Leave the second argument blank to return the current value.</haxe_doc>
		</position>
		<duration public="1" set="method" line="209">
			<f a="_name">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Get the duration of a sound instance by name.
            Duration is set from the sound instance, so it is read only.</haxe_doc>
		</duration>
		<play public="1" set="method" line="218">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Play a sound instance by name</haxe_doc>
		</play>
		<loop public="1" set="method" line="231">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Loop a sound instance by name, indefinitely. Use stop to end it</haxe_doc>
		</loop>
		<pause public="1" set="method" line="244">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pause a sound instance by name</haxe_doc>
		</pause>
		<stop public="1" set="method" line="257">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stop a sound instance by name</haxe_doc>
		</stop>
		<toggle public="1" set="method" line="270">
			<f a="_name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle a sound instance by name, pausing the sound</haxe_doc>
		</toggle>
		<kill public="1" set="method" line="286">
			<f a="_sound">
				<t path="snow.audio.Sound"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Stop managing a sound instance</haxe_doc>
		</kill>
		<suspend public="1" set="method" line="294">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</suspend>
		<resume public="1" set="method" line="312">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</resume>
		<on_event set="method" line="333">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow when a system event is dispatched</haxe_doc>
		</on_event>
		<destroy set="method" line="359">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow, cleans up sounds/system</haxe_doc>
		</destroy>
		<update set="method" line="373">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow, update any sounds / streams</haxe_doc>
		</update>
		<new set="method" line="37">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>constructed internally, use `app.audio`</haxe_doc>
		</new>
	</class>
	<class path="snow.audio._Audio.AudioHandleMap" params="" file="/Users/sven/dev/snow/snow/audio/Audio.hx" private="1" module="snow.audio.Audio">
		<extends path="haxe.ds.BalancedTree">
			<t path="snow.types.AudioHandle"/>
			<t path="snow.audio.Sound"/>
		</extends>
		<compare set="method" line="401" override="1"><f a="k1:k2">
	<t path="snow.types.AudioHandle"/>
	<t path="snow.types.AudioHandle"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="399"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="snow.audio.AudioSystem" params="" file="/Users/sven/dev/snow/snow/audio/AudioSystem.hx">
		<c path="snow.platform.native.audio.openal.AudioSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.audio.AudioSystemBinding" params="" file="/Users/sven/dev/snow/snow/audio/AudioSystem.hx" module="snow.audio.AudioSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.audio.Audio"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when initiating this system</haxe_doc>
		</init>
		<process public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when updating this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="38">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when destroying this system</haxe_doc>
		</destroy>
		<suspend public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when suspending this system</haxe_doc>
		</suspend>
		<resume public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called by the audio manager when resuming this system</haxe_doc>
		</resume>
		<haxe_doc>Internal audio system definition, interact with this system through `snow.Audio`, not directly</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="snow.audio.Sound" params="" file="/Users/sven/dev/snow/snow/audio/Sound.hx"><c path="snow.platform.native.audio.openal.Sound"/></typedef>
	<typedef path="snow.audio.SoundStream" params="" file="/Users/sven/dev/snow/snow/audio/Sound.hx" module="snow.audio.Sound"><c path="snow.platform.native.audio.openal.SoundStream"/></typedef>
	<class path="snow.audio.SoundBinding" params="" file="/Users/sven/dev/snow/snow/audio/Sound.hx" module="snow.audio.Sound">
		<manager public="1">
			<c path="snow.audio.Audio"/>
			<haxe_doc>The `Audio` system handling this sound</haxe_doc>
		</manager>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of this sound</haxe_doc>
		</name>
		<playing public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is playing</haxe_doc>
		</playing>
		<paused public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is paused</haxe_doc>
		</paused>
		<loaded public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is loaded or ready to use</haxe_doc>
		</loaded>
		<is_stream public="1">
			<x path="Bool"/>
			<haxe_doc>If the sound is a stream source</haxe_doc>
		</is_stream>
		<info public="1" get="accessor" set="accessor">
			<t path="snow.types.AudioInfo"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The `AudioInfo` this sound is created from. When assigning this it will clean up and set itself to this info instead.</haxe_doc>
		</info>
		<pitch public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The pitch of this sound</haxe_doc>
		</pitch>
		<volume public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The volume of this sound</haxe_doc>
		</volume>
		<pan public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The pan of this sound. Pan only logically works on mono sounds, and is by default 2D sounds</haxe_doc>
		</pan>
		<looping public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>If the sound is looping or not. Use `loop()` to change this.</haxe_doc>
		</looping>
		<position public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The current playback position of this sound in `seconds`</haxe_doc>
		</position>
		<duration public="1" get="accessor" set="null">
			<x path="Float"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The duration of this sound, in `seconds`</haxe_doc>
		</duration>
		<emit public="1" set="method" line="73">
			<f a="_event">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</emit>
		<on public="1" set="method" line="84"><f a="_event:_handler">
	<c path="String"/>
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></on>
		<off public="1" set="method" line="95"><f a="_event:_handler">
	<c path="String"/>
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></off>
		<onload_list><c path="Array"><f a="">
	<t path="snow.audio.Sound"/>
	<x path="Void"/>
</f></c></onload_list>
		<onend_list><c path="Array"><f a="">
	<t path="snow.audio.Sound"/>
	<x path="Void"/>
</f></c></onend_list>
		<play public="1" set="method" line="123">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Play this sound</haxe_doc>
		</play>
		<loop public="1" set="method" line="125">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Loop this sound</haxe_doc>
		</loop>
		<stop public="1" set="method" line="127">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stop this sound</haxe_doc>
		</stop>
		<pause public="1" set="method" line="129">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Pause this sound</haxe_doc>
		</pause>
		<destroy public="1" set="method" line="131">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy this sound and it's data.</haxe_doc>
		</destroy>
		<internal_update public="1" set="method" line="135">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_update>
		<internal_play public="1" set="method" line="136">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_play>
		<internal_loop public="1" set="method" line="137">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_loop>
		<internal_stop public="1" set="method" line="138">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_stop>
		<internal_pause public="1" set="method" line="139">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</internal_pause>
		<toggle public="1" set="method" line="144">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Toggle this sound</haxe_doc>
		</toggle>
		<get_info set="method" line="162"><f a=""><t path="snow.types.AudioInfo"/></f></get_info>
		<set_info set="method" line="166"><f a="_info">
	<t path="snow.types.AudioInfo"/>
	<t path="snow.types.AudioInfo"/>
</f></set_info>
		<get_pan set="method" line="170"><f a=""><x path="Float"/></f></get_pan>
		<get_pitch set="method" line="174"><f a=""><x path="Float"/></f></get_pitch>
		<get_volume set="method" line="178"><f a=""><x path="Float"/></f></get_volume>
		<get_looping set="method" line="182"><f a=""><x path="Bool"/></f></get_looping>
		<get_position set="method" line="186"><f a=""><x path="Float"/></f></get_position>
		<get_duration set="method" line="191"><f a=""><x path="Float"/></f></get_duration>
		<set_pan set="method" line="195"><f a="_pan">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_pitch set="method" line="199"><f a="_pitch">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pitch>
		<set_volume set="method" line="203"><f a="_volume">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<set_position set="method" line="207"><f a="_position">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<set_looping set="method" line="211"><f a="_looping">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_looping>
		<do_onload public="1" set="method" line="217">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</do_onload>
		<do_onend public="1" set="method" line="228">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</do_onend>
		<add_onload set="method" line="236"><f a="_onload">
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="snow.audio.Sound"/>
		<x path="Void"/>
	</f>
</f></add_onload>
		<new public="1" set="method" line="111"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":noCompletion"/></meta>
	</class>
	<typedef path="snow.audio.openal.AL" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx"><c path="snow.platform.native.audio.openal.AL"/></typedef>
	<typedef path="snow.audio.openal.ALC" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx" module="snow.audio.openal.AL"><c path="snow.platform.native.audio.openal.ALC"/></typedef>
	<typedef path="snow.audio.openal.Device" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx" module="snow.audio.openal.AL"><x path="snow.platform.native.audio.openal.Device"/></typedef>
	<typedef path="snow.audio.openal.Context" params="" file="/Users/sven/dev/snow/snow/audio/openal/AL.hx" module="snow.audio.openal.AL"><x path="snow.platform.native.audio.openal.Context"/></typedef>
	<typedef path="snow.input.MapIntBool" params="" file="/Users/sven/dev/snow/snow/input/Input.hx" module="snow.input.Input"><x path="Map">
	<x path="Int"/>
	<x path="Bool"/>
</x></typedef>
	<typedef path="snow.input.MapIntFloat" params="" file="/Users/sven/dev/snow/snow/input/Input.hx" module="snow.input.Input"><x path="Map">
	<x path="Int"/>
	<x path="Float"/>
</x></typedef>
	<class path="snow.input.Input" params="" file="/Users/sven/dev/snow/snow/input/Input.hx">
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to snow from subsystems</haxe_doc>
		</lib>
		<platform public="1">
			<t path="snow.input.InputSystem"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to platform implementation</haxe_doc>
		</platform>
		<key_code_down><t path="snow.input.MapIntBool"/></key_code_down>
		<key_code_pressed><t path="snow.input.MapIntBool"/></key_code_pressed>
		<key_code_released><t path="snow.input.MapIntBool"/></key_code_released>
		<scan_code_down><t path="snow.input.MapIntBool"/></scan_code_down>
		<scan_code_pressed><t path="snow.input.MapIntBool"/></scan_code_pressed>
		<scan_code_released><t path="snow.input.MapIntBool"/></scan_code_released>
		<mouse_button_down><t path="snow.input.MapIntBool"/></mouse_button_down>
		<mouse_button_pressed><t path="snow.input.MapIntBool"/></mouse_button_pressed>
		<mouse_button_released><t path="snow.input.MapIntBool"/></mouse_button_released>
		<gamepad_button_down><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntBool"/>
</x></gamepad_button_down>
		<gamepad_button_pressed><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntBool"/>
</x></gamepad_button_pressed>
		<gamepad_button_released><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntBool"/>
</x></gamepad_button_released>
		<gamepad_axis_values><x path="Map">
	<x path="Int"/>
	<t path="snow.input.MapIntFloat"/>
</x></gamepad_axis_values>
		<keypressed public="1" set="method" line="80">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Key` value was pressed in the latest frame</haxe_doc>
		</keypressed>
		<keyreleased public="1" set="method" line="85">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Key` value was released in the latest frame</haxe_doc>
		</keyreleased>
		<keydown public="1" set="method" line="90">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Key` value is down at the time of calling this</haxe_doc>
		</keydown>
		<scanpressed public="1" set="method" line="95">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Scan` value was pressed in the latest frame</haxe_doc>
		</scanpressed>
		<scanreleased public="1" set="method" line="100">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Scan` value was released in the latest frame</haxe_doc>
		</scanreleased>
		<scandown public="1" set="method" line="105">
			<f a="_code">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the `Scan` value is down at the time of calling this</haxe_doc>
		</scandown>
		<mousepressed public="1" set="method" line="112">
			<f a="_button">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button was pressed in the latest frame</haxe_doc>
		</mousepressed>
		<mousereleased public="1" set="method" line="117">
			<f a="_button">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button was released in the latest frame</haxe_doc>
		</mousereleased>
		<mousedown public="1" set="method" line="122">
			<f a="_button">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button value is down at the time of calling this</haxe_doc>
		</mousedown>
		<gamepadpressed public="1" set="method" line="129">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the mouse button was pressed in the latest frame</haxe_doc>
		</gamepadpressed>
		<gamepadreleased public="1" set="method" line="137">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the gamepad button was released in the latest frame</haxe_doc>
		</gamepadreleased>
		<gamepaddown public="1" set="method" line="145">
			<f a="_gamepad:_button">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>returns true if the gamepad button value is down at the time of calling this</haxe_doc>
		</gamepaddown>
		<gamepadaxis public="1" set="method" line="153">
			<f a="_gamepad:_axis">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>returns true if the gamepad button value is down at the time of calling this</haxe_doc>
		</gamepadaxis>
		<dispatch_key_down_event public="1" set="method" line="167">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a key down event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_key_down_event>
		<dispatch_key_up_event public="1" set="method" line="187">
			<f a="keycode:scancode:repeat:mod:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<t path="snow.types.ModState"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a key up event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_key_up_event>
		<dispatch_text_event public="1" set="method" line="206">
			<f a="text:start:length:type:timestamp:window_id">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="snow.types.TextEventType"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a text event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_text_event>
		<dispatch_mouse_move_event public="1" set="method" line="214">
			<f a="x:y:xrel:yrel:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse move event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_move_event>
		<dispatch_mouse_down_event public="1" set="method" line="221">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse button down event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_down_event>
		<dispatch_mouse_up_event public="1" set="method" line="234">
			<f a="x:y:button:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse button up event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_up_event>
		<dispatch_mouse_wheel_event public="1" set="method" line="247">
			<f a="x:y:timestamp:window_id">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a mouse wheel event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_mouse_wheel_event>
		<dispatch_touch_down_event public="1" set="method" line="254">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a touch down through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_touch_down_event>
		<dispatch_touch_up_event public="1" set="method" line="261">
			<f a="x:y:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a touch up through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_touch_up_event>
		<dispatch_touch_move_event public="1" set="method" line="268">
			<f a="x:y:dx:dy:touch_id:timestamp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a touch move through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_touch_move_event>
		<dispatch_gamepad_axis_event public="1" set="method" line="275">
			<f a="gamepad:axis:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad axis event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_axis_event>
		<dispatch_gamepad_button_down_event public="1" set="method" line="290">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad button down event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_button_down_event>
		<dispatch_gamepad_button_up_event public="1" set="method" line="312">
			<f a="gamepad:button:value:timestamp">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad button up event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_button_up_event>
		<dispatch_gamepad_device_event public="1" set="method" line="334">
			<f a="gamepad:type:timestamp">
				<x path="Int"/>
				<x path="snow.types.GamepadDeviceEventType"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>manually dispatch a gamepad device event through the system, delivered to the app handlers, internal and external</haxe_doc>
		</dispatch_gamepad_device_event>
		<listen public="1" set="method" line="343">
			<f a="_window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Attach to a window to listen for input from it</haxe_doc>
		</listen>
		<unlisten public="1" set="method" line="350">
			<f a="_window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Detach a listening window, stopping listening of input from it</haxe_doc>
		</unlisten>
		<on_event public="1" set="method" line="357">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called when a system event is dispatched through the core</haxe_doc>
		</on_event>
		<on_gamepad_added public="1" set="method" line="366">
			<f a="_event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called when a gamepad is added, in order to handle any platform details</haxe_doc>
		</on_gamepad_added>
		<on_gamepad_removed public="1" set="method" line="373">
			<f a="_event">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Called when a gamepad is removed, in order to handle any platform details</haxe_doc>
		</on_gamepad_removed>
		<update set="method" line="381">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Handle any input related processing, called by Snow</haxe_doc>
		</update>
		<destroy set="method" line="393">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Destroy and clean up etc.</haxe_doc>
		</destroy>
		<_update_mousestate set="method" line="402">
			<f a=""><x path="Void"/></f>
			<haxe_doc>update mouse pressed/released/down states</haxe_doc>
		</_update_mousestate>
		<_update_gamepadstate set="method" line="427">
			<f a=""><x path="Void"/></f>
			<haxe_doc>update gamepad pressed/released/down/axis states</haxe_doc>
		</_update_gamepadstate>
		<_update_keystate set="method" line="456">
			<f a=""><x path="Void"/></f>
			<haxe_doc>update key pressed/released/down states</haxe_doc>
		</_update_keystate>
		<new set="method" line="42">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>constructed internally, use `app.input`</haxe_doc>
		</new>
		<haxe_doc>Internal input system, accessed via `app.input`</haxe_doc>
	</class>
	<typedef path="snow.input.InputSystem" params="" file="/Users/sven/dev/snow/snow/input/InputSystem.hx">
		<c path="snow.platform.native.input.sdl.InputSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.input.InputSystemBinding" params="" file="/Users/sven/dev/snow/snow/input/InputSystem.hx" module="snow.input.InputSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.input.Input"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="32">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the input manager initiates this system</haxe_doc>
		</init>
		<process public="1" set="method" line="34">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the input manager updates this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="36">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the input manager destroys this system</haxe_doc>
		</destroy>
		<on_event public="1" set="method" line="38">
			<f a="_event">
				<t path="snow.types.InputEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when the input manager forwards an event to this system</haxe_doc>
		</on_event>
		<text_input_start public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Start a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_start>
		<text_input_stop public="1" set="method" line="43">
			<f a=""><x path="Void"/></f>
			<haxe_doc>End a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_stop>
		<text_input_rect public="1" set="method" line="45">
			<f a="x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>In a system text input state, this determines the area that is accepting input.</haxe_doc>
		</text_input_rect>
		<gamepad_add public="1" set="method" line="48">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Open a gamepad with this id</haxe_doc>
		</gamepad_add>
		<gamepad_remove public="1" set="method" line="50">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Close a gamepad with this id</haxe_doc>
		</gamepad_remove>
		<listen public="1" set="method" line="52">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Listen for input events on the given window</haxe_doc>
		</listen>
		<unlisten public="1" set="method" line="54">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Stop listening for input events on the given window</haxe_doc>
		</unlisten>
		<haxe_doc>Internal input system, accessed through `snow.Input`, not directly</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.input.Scancodes" params="" file="/Users/sven/dev/snow/snow/input/Keycodes.hx" module="snow.input.Keycodes">
		<name public="1" set="method" line="402" static="1">
			<f a="scancode">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert a scancode to a name</haxe_doc>
		</name>
		<MASK public="1" line="415" static="1"><x path="Int"/></MASK>
		<unknown public="1" line="417" static="1"><x path="Int"/></unknown>
		<key_a public="1" line="422" static="1"><x path="Int"/></key_a>
		<key_b public="1" line="423" static="1"><x path="Int"/></key_b>
		<key_c public="1" line="424" static="1"><x path="Int"/></key_c>
		<key_d public="1" line="425" static="1"><x path="Int"/></key_d>
		<key_e public="1" line="426" static="1"><x path="Int"/></key_e>
		<key_f public="1" line="427" static="1"><x path="Int"/></key_f>
		<key_g public="1" line="428" static="1"><x path="Int"/></key_g>
		<key_h public="1" line="429" static="1"><x path="Int"/></key_h>
		<key_i public="1" line="430" static="1"><x path="Int"/></key_i>
		<key_j public="1" line="431" static="1"><x path="Int"/></key_j>
		<key_k public="1" line="432" static="1"><x path="Int"/></key_k>
		<key_l public="1" line="433" static="1"><x path="Int"/></key_l>
		<key_m public="1" line="434" static="1"><x path="Int"/></key_m>
		<key_n public="1" line="435" static="1"><x path="Int"/></key_n>
		<key_o public="1" line="436" static="1"><x path="Int"/></key_o>
		<key_p public="1" line="437" static="1"><x path="Int"/></key_p>
		<key_q public="1" line="438" static="1"><x path="Int"/></key_q>
		<key_r public="1" line="439" static="1"><x path="Int"/></key_r>
		<key_s public="1" line="440" static="1"><x path="Int"/></key_s>
		<key_t public="1" line="441" static="1"><x path="Int"/></key_t>
		<key_u public="1" line="442" static="1"><x path="Int"/></key_u>
		<key_v public="1" line="443" static="1"><x path="Int"/></key_v>
		<key_w public="1" line="444" static="1"><x path="Int"/></key_w>
		<key_x public="1" line="445" static="1"><x path="Int"/></key_x>
		<key_y public="1" line="446" static="1"><x path="Int"/></key_y>
		<key_z public="1" line="447" static="1"><x path="Int"/></key_z>
		<key_1 public="1" line="449" static="1"><x path="Int"/></key_1>
		<key_2 public="1" line="450" static="1"><x path="Int"/></key_2>
		<key_3 public="1" line="451" static="1"><x path="Int"/></key_3>
		<key_4 public="1" line="452" static="1"><x path="Int"/></key_4>
		<key_5 public="1" line="453" static="1"><x path="Int"/></key_5>
		<key_6 public="1" line="454" static="1"><x path="Int"/></key_6>
		<key_7 public="1" line="455" static="1"><x path="Int"/></key_7>
		<key_8 public="1" line="456" static="1"><x path="Int"/></key_8>
		<key_9 public="1" line="457" static="1"><x path="Int"/></key_9>
		<key_0 public="1" line="458" static="1"><x path="Int"/></key_0>
		<enter public="1" line="460" static="1"><x path="Int"/></enter>
		<escape public="1" line="461" static="1"><x path="Int"/></escape>
		<backspace public="1" line="462" static="1"><x path="Int"/></backspace>
		<tab public="1" line="463" static="1"><x path="Int"/></tab>
		<space public="1" line="464" static="1"><x path="Int"/></space>
		<minus public="1" line="466" static="1"><x path="Int"/></minus>
		<equals public="1" line="467" static="1"><x path="Int"/></equals>
		<leftbracket public="1" line="468" static="1"><x path="Int"/></leftbracket>
		<rightbracket public="1" line="469" static="1"><x path="Int"/></rightbracket>
		<backslash public="1" line="485" static="1">
			<x path="Int"/>
			<haxe_doc>Located at the lower left of the return
    key on ISO keyboards and at the right end
    of the QWERTY row on ANSI keyboards.
    Produces REVERSE SOLIDUS (backslash) and
    VERTICAL LINE in a US layout, REVERSE
    SOLIDUS and VERTICAL LINE in a UK Mac
    layout, NUMBER SIGN and TILDE in a UK
    Windows layout, DOLLAR SIGN and POUND SIGN
    in a Swiss German layout, NUMBER SIGN and
    APOSTROPHE in a German layout, GRAVE
    ACCENT and POUND SIGN in a French Mac
    layout, and ASTERISK and MICRO SIGN in a
    French Windows layout.</haxe_doc>
		</backslash>
		<nonushash public="1" line="499" static="1">
			<x path="Int"/>
			<haxe_doc>ISO USB keyboards actually use this code
    instead of 49 for the same key, but all
    OSes I've seen treat the two codes
    identically. So, as an implementor, unless
    your keyboard generates both of those
    codes and your OS treats them differently,
    you should generate public static var BACKSLASH
    instead of this code. As a user, you
    should not rely on this code because SDL
    will never generate it with most (all?)
    keyboards.</haxe_doc>
		</nonushash>
		<semicolon public="1" line="500" static="1"><x path="Int"/></semicolon>
		<apostrophe public="1" line="501" static="1"><x path="Int"/></apostrophe>
		<grave public="1" line="520" static="1">
			<x path="Int"/>
			<haxe_doc>Located in the top left corner (on both ANSI
    and ISO keyboards). Produces GRAVE ACCENT and
    TILDE in a US Windows layout and in US and UK
    Mac layouts on ANSI keyboards, GRAVE ACCENT
    and NOT SIGN in a UK Windows layout, SECTION
    SIGN and PLUS-MINUS SIGN in US and UK Mac
    layouts on ISO keyboards, SECTION SIGN and
    DEGREE SIGN in a Swiss German layout (Mac:
    only on ISO keyboards); CIRCUMFLEX ACCENT and
    DEGREE SIGN in a German layout (Mac: only on
    ISO keyboards), SUPERSCRIPT TWO and TILDE in a
    French Windows layout, COMMERCIAL AT and
    NUMBER SIGN in a French Mac layout on ISO
    keyboards, and LESS-THAN SIGN and GREATER-THAN
    SIGN in a Swiss German, German, or French Mac
    layout on ANSI keyboards.</haxe_doc>
		</grave>
		<comma public="1" line="521" static="1"><x path="Int"/></comma>
		<period public="1" line="522" static="1"><x path="Int"/></period>
		<slash public="1" line="523" static="1"><x path="Int"/></slash>
		<capslock public="1" line="525" static="1"><x path="Int"/></capslock>
		<f1 public="1" line="527" static="1"><x path="Int"/></f1>
		<f2 public="1" line="528" static="1"><x path="Int"/></f2>
		<f3 public="1" line="529" static="1"><x path="Int"/></f3>
		<f4 public="1" line="530" static="1"><x path="Int"/></f4>
		<f5 public="1" line="531" static="1"><x path="Int"/></f5>
		<f6 public="1" line="532" static="1"><x path="Int"/></f6>
		<f7 public="1" line="533" static="1"><x path="Int"/></f7>
		<f8 public="1" line="534" static="1"><x path="Int"/></f8>
		<f9 public="1" line="535" static="1"><x path="Int"/></f9>
		<f10 public="1" line="536" static="1"><x path="Int"/></f10>
		<f11 public="1" line="537" static="1"><x path="Int"/></f11>
		<f12 public="1" line="538" static="1"><x path="Int"/></f12>
		<printscreen public="1" line="540" static="1"><x path="Int"/></printscreen>
		<scrolllock public="1" line="541" static="1"><x path="Int"/></scrolllock>
		<pause public="1" line="542" static="1"><x path="Int"/></pause>
		<insert public="1" line="545" static="1">
			<x path="Int"/>
			<haxe_doc>insert on PC, help on some Mac keyboards (but does send code 73, not 117)</haxe_doc>
		</insert>
		<home public="1" line="546" static="1"><x path="Int"/></home>
		<pageup public="1" line="547" static="1"><x path="Int"/></pageup>
		<delete public="1" line="548" static="1"><x path="Int"/></delete>
		<end public="1" line="549" static="1"><x path="Int"/></end>
		<pagedown public="1" line="550" static="1"><x path="Int"/></pagedown>
		<right public="1" line="551" static="1"><x path="Int"/></right>
		<left public="1" line="552" static="1"><x path="Int"/></left>
		<down public="1" line="553" static="1"><x path="Int"/></down>
		<up public="1" line="554" static="1"><x path="Int"/></up>
		<numlockclear public="1" line="557" static="1">
			<x path="Int"/>
			<haxe_doc>num lock on PC, clear on Mac keyboards</haxe_doc>
		</numlockclear>
		<kp_divide public="1" line="558" static="1"><x path="Int"/></kp_divide>
		<kp_multiply public="1" line="559" static="1"><x path="Int"/></kp_multiply>
		<kp_minus public="1" line="560" static="1"><x path="Int"/></kp_minus>
		<kp_plus public="1" line="561" static="1"><x path="Int"/></kp_plus>
		<kp_enter public="1" line="562" static="1"><x path="Int"/></kp_enter>
		<kp_1 public="1" line="563" static="1"><x path="Int"/></kp_1>
		<kp_2 public="1" line="564" static="1"><x path="Int"/></kp_2>
		<kp_3 public="1" line="565" static="1"><x path="Int"/></kp_3>
		<kp_4 public="1" line="566" static="1"><x path="Int"/></kp_4>
		<kp_5 public="1" line="567" static="1"><x path="Int"/></kp_5>
		<kp_6 public="1" line="568" static="1"><x path="Int"/></kp_6>
		<kp_7 public="1" line="569" static="1"><x path="Int"/></kp_7>
		<kp_8 public="1" line="570" static="1"><x path="Int"/></kp_8>
		<kp_9 public="1" line="571" static="1"><x path="Int"/></kp_9>
		<kp_0 public="1" line="572" static="1"><x path="Int"/></kp_0>
		<kp_period public="1" line="573" static="1"><x path="Int"/></kp_period>
		<nonusbackslash public="1" line="586" static="1">
			<x path="Int"/>
			<haxe_doc>This is the additional key that ISO
    keyboards have over ANSI ones,
    located between left shift and Y.
    Produces GRAVE ACCENT and TILDE in a
    US or UK Mac layout, REVERSE SOLIDUS
    (backslash) and VERTICAL LINE in a
    US or UK Windows layout, and
    LESS-THAN SIGN and GREATER-THAN SIGN
    in a Swiss German, German, or French
    layout.</haxe_doc>
		</nonusbackslash>
		<application public="1" line="589" static="1">
			<x path="Int"/>
			<haxe_doc>windows contextual menu, compose</haxe_doc>
		</application>
		<power public="1" line="594" static="1">
			<x path="Int"/>
			<haxe_doc>The USB document says this is a status flag,
    not a physical key - but some Mac keyboards
    do have a power key.</haxe_doc>
		</power>
		<kp_equals public="1" line="595" static="1"><x path="Int"/></kp_equals>
		<f13 public="1" line="596" static="1"><x path="Int"/></f13>
		<f14 public="1" line="597" static="1"><x path="Int"/></f14>
		<f15 public="1" line="598" static="1"><x path="Int"/></f15>
		<f16 public="1" line="599" static="1"><x path="Int"/></f16>
		<f17 public="1" line="600" static="1"><x path="Int"/></f17>
		<f18 public="1" line="601" static="1"><x path="Int"/></f18>
		<f19 public="1" line="602" static="1"><x path="Int"/></f19>
		<f20 public="1" line="603" static="1"><x path="Int"/></f20>
		<f21 public="1" line="604" static="1"><x path="Int"/></f21>
		<f22 public="1" line="605" static="1"><x path="Int"/></f22>
		<f23 public="1" line="606" static="1"><x path="Int"/></f23>
		<f24 public="1" line="607" static="1"><x path="Int"/></f24>
		<execute public="1" line="608" static="1"><x path="Int"/></execute>
		<help public="1" line="609" static="1"><x path="Int"/></help>
		<menu public="1" line="610" static="1"><x path="Int"/></menu>
		<select public="1" line="611" static="1"><x path="Int"/></select>
		<stop public="1" line="612" static="1"><x path="Int"/></stop>
		<again public="1" line="615" static="1">
			<x path="Int"/>
			<haxe_doc>redo</haxe_doc>
		</again>
		<undo public="1" line="616" static="1"><x path="Int"/></undo>
		<cut public="1" line="617" static="1"><x path="Int"/></cut>
		<copy public="1" line="618" static="1"><x path="Int"/></copy>
		<paste public="1" line="619" static="1"><x path="Int"/></paste>
		<find public="1" line="620" static="1"><x path="Int"/></find>
		<mute public="1" line="621" static="1"><x path="Int"/></mute>
		<volumeup public="1" line="622" static="1"><x path="Int"/></volumeup>
		<volumedown public="1" line="623" static="1"><x path="Int"/></volumedown>
		<kp_comma public="1" line="630" static="1"><x path="Int"/></kp_comma>
		<kp_equalsas400 public="1" line="631" static="1"><x path="Int"/></kp_equalsas400>
		<international1 public="1" line="634" static="1">
			<x path="Int"/>
			<haxe_doc>used on Asian keyboards; see footnotes in USB doc</haxe_doc>
		</international1>
		<international2 public="1" line="635" static="1"><x path="Int"/></international2>
		<international3 public="1" line="638" static="1">
			<x path="Int"/>
			<haxe_doc>Yen</haxe_doc>
		</international3>
		<international4 public="1" line="639" static="1"><x path="Int"/></international4>
		<international5 public="1" line="640" static="1"><x path="Int"/></international5>
		<international6 public="1" line="641" static="1"><x path="Int"/></international6>
		<international7 public="1" line="642" static="1"><x path="Int"/></international7>
		<international8 public="1" line="643" static="1"><x path="Int"/></international8>
		<international9 public="1" line="644" static="1"><x path="Int"/></international9>
		<lang1 public="1" line="646" static="1">
			<x path="Int"/>
			<haxe_doc>Hangul/English toggle</haxe_doc>
		</lang1>
		<lang2 public="1" line="648" static="1">
			<x path="Int"/>
			<haxe_doc>Hanja conversion</haxe_doc>
		</lang2>
		<lang3 public="1" line="650" static="1">
			<x path="Int"/>
			<haxe_doc>Katakana</haxe_doc>
		</lang3>
		<lang4 public="1" line="652" static="1">
			<x path="Int"/>
			<haxe_doc>Hiragana</haxe_doc>
		</lang4>
		<lang5 public="1" line="654" static="1">
			<x path="Int"/>
			<haxe_doc>Zenkaku/Hankaku</haxe_doc>
		</lang5>
		<lang6 public="1" line="656" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang6>
		<lang7 public="1" line="658" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang7>
		<lang8 public="1" line="660" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang8>
		<lang9 public="1" line="662" static="1">
			<x path="Int"/>
			<haxe_doc>reserved</haxe_doc>
		</lang9>
		<alterase public="1" line="664" static="1">
			<x path="Int"/>
			<haxe_doc>Erase-Eaze</haxe_doc>
		</alterase>
		<sysreq public="1" line="665" static="1"><x path="Int"/></sysreq>
		<cancel public="1" line="666" static="1"><x path="Int"/></cancel>
		<clear public="1" line="667" static="1"><x path="Int"/></clear>
		<prior public="1" line="668" static="1"><x path="Int"/></prior>
		<return2 public="1" line="669" static="1"><x path="Int"/></return2>
		<separator public="1" line="670" static="1"><x path="Int"/></separator>
		<out public="1" line="671" static="1"><x path="Int"/></out>
		<oper public="1" line="672" static="1"><x path="Int"/></oper>
		<clearagain public="1" line="673" static="1"><x path="Int"/></clearagain>
		<crsel public="1" line="674" static="1"><x path="Int"/></crsel>
		<exsel public="1" line="675" static="1"><x path="Int"/></exsel>
		<kp_00 public="1" line="677" static="1"><x path="Int"/></kp_00>
		<kp_000 public="1" line="678" static="1"><x path="Int"/></kp_000>
		<thousandsseparator public="1" line="679" static="1"><x path="Int"/></thousandsseparator>
		<decimalseparator public="1" line="680" static="1"><x path="Int"/></decimalseparator>
		<currencyunit public="1" line="681" static="1"><x path="Int"/></currencyunit>
		<currencysubunit public="1" line="682" static="1"><x path="Int"/></currencysubunit>
		<kp_leftparen public="1" line="683" static="1"><x path="Int"/></kp_leftparen>
		<kp_rightparen public="1" line="684" static="1"><x path="Int"/></kp_rightparen>
		<kp_leftbrace public="1" line="685" static="1"><x path="Int"/></kp_leftbrace>
		<kp_rightbrace public="1" line="686" static="1"><x path="Int"/></kp_rightbrace>
		<kp_tab public="1" line="687" static="1"><x path="Int"/></kp_tab>
		<kp_backspace public="1" line="688" static="1"><x path="Int"/></kp_backspace>
		<kp_a public="1" line="689" static="1"><x path="Int"/></kp_a>
		<kp_b public="1" line="690" static="1"><x path="Int"/></kp_b>
		<kp_c public="1" line="691" static="1"><x path="Int"/></kp_c>
		<kp_d public="1" line="692" static="1"><x path="Int"/></kp_d>
		<kp_e public="1" line="693" static="1"><x path="Int"/></kp_e>
		<kp_f public="1" line="694" static="1"><x path="Int"/></kp_f>
		<kp_xor public="1" line="695" static="1"><x path="Int"/></kp_xor>
		<kp_power public="1" line="696" static="1"><x path="Int"/></kp_power>
		<kp_percent public="1" line="697" static="1"><x path="Int"/></kp_percent>
		<kp_less public="1" line="698" static="1"><x path="Int"/></kp_less>
		<kp_greater public="1" line="699" static="1"><x path="Int"/></kp_greater>
		<kp_ampersand public="1" line="700" static="1"><x path="Int"/></kp_ampersand>
		<kp_dblampersand public="1" line="701" static="1"><x path="Int"/></kp_dblampersand>
		<kp_verticalbar public="1" line="702" static="1"><x path="Int"/></kp_verticalbar>
		<kp_dblverticalbar public="1" line="703" static="1"><x path="Int"/></kp_dblverticalbar>
		<kp_colon public="1" line="704" static="1"><x path="Int"/></kp_colon>
		<kp_hash public="1" line="705" static="1"><x path="Int"/></kp_hash>
		<kp_space public="1" line="706" static="1"><x path="Int"/></kp_space>
		<kp_at public="1" line="707" static="1"><x path="Int"/></kp_at>
		<kp_exclam public="1" line="708" static="1"><x path="Int"/></kp_exclam>
		<kp_memstore public="1" line="709" static="1"><x path="Int"/></kp_memstore>
		<kp_memrecall public="1" line="710" static="1"><x path="Int"/></kp_memrecall>
		<kp_memclear public="1" line="711" static="1"><x path="Int"/></kp_memclear>
		<kp_memadd public="1" line="712" static="1"><x path="Int"/></kp_memadd>
		<kp_memsubtract public="1" line="713" static="1"><x path="Int"/></kp_memsubtract>
		<kp_memmultiply public="1" line="714" static="1"><x path="Int"/></kp_memmultiply>
		<kp_memdivide public="1" line="715" static="1"><x path="Int"/></kp_memdivide>
		<kp_plusminus public="1" line="716" static="1"><x path="Int"/></kp_plusminus>
		<kp_clear public="1" line="717" static="1"><x path="Int"/></kp_clear>
		<kp_clearentry public="1" line="718" static="1"><x path="Int"/></kp_clearentry>
		<kp_binary public="1" line="719" static="1"><x path="Int"/></kp_binary>
		<kp_octal public="1" line="720" static="1"><x path="Int"/></kp_octal>
		<kp_decimal public="1" line="721" static="1"><x path="Int"/></kp_decimal>
		<kp_hexadecimal public="1" line="722" static="1"><x path="Int"/></kp_hexadecimal>
		<lctrl public="1" line="724" static="1"><x path="Int"/></lctrl>
		<lshift public="1" line="725" static="1"><x path="Int"/></lshift>
		<lalt public="1" line="727" static="1">
			<x path="Int"/>
			<haxe_doc>alt, option</haxe_doc>
		</lalt>
		<lmeta public="1" line="729" static="1">
			<x path="Int"/>
			<haxe_doc>windows, command (apple), meta</haxe_doc>
		</lmeta>
		<rctrl public="1" line="730" static="1"><x path="Int"/></rctrl>
		<rshift public="1" line="731" static="1"><x path="Int"/></rshift>
		<ralt public="1" line="733" static="1">
			<x path="Int"/>
			<haxe_doc>alt gr, option</haxe_doc>
		</ralt>
		<rmeta public="1" line="735" static="1">
			<x path="Int"/>
			<haxe_doc>windows, command (apple), meta</haxe_doc>
		</rmeta>
		<mode public="1" line="740" static="1">
			<x path="Int"/>
			<haxe_doc>Not sure if this is really not covered
    by any of the above, but since there's a
    special KMOD_MODE for it I'm adding it here</haxe_doc>
		</mode>
		<audionext public="1" line="747" static="1"><x path="Int"/></audionext>
		<audioprev public="1" line="748" static="1"><x path="Int"/></audioprev>
		<audiostop public="1" line="749" static="1"><x path="Int"/></audiostop>
		<audioplay public="1" line="750" static="1"><x path="Int"/></audioplay>
		<audiomute public="1" line="751" static="1"><x path="Int"/></audiomute>
		<mediaselect public="1" line="752" static="1"><x path="Int"/></mediaselect>
		<www public="1" line="753" static="1"><x path="Int"/></www>
		<mail public="1" line="754" static="1"><x path="Int"/></mail>
		<calculator public="1" line="755" static="1"><x path="Int"/></calculator>
		<computer public="1" line="756" static="1"><x path="Int"/></computer>
		<ac_search public="1" line="757" static="1"><x path="Int"/></ac_search>
		<ac_home public="1" line="758" static="1"><x path="Int"/></ac_home>
		<ac_back public="1" line="759" static="1"><x path="Int"/></ac_back>
		<ac_forward public="1" line="760" static="1"><x path="Int"/></ac_forward>
		<ac_stop public="1" line="761" static="1"><x path="Int"/></ac_stop>
		<ac_refresh public="1" line="762" static="1"><x path="Int"/></ac_refresh>
		<ac_bookmarks public="1" line="763" static="1"><x path="Int"/></ac_bookmarks>
		<brightnessdown public="1" line="768" static="1"><x path="Int"/></brightnessdown>
		<brightnessup public="1" line="769" static="1"><x path="Int"/></brightnessup>
		<displayswitch public="1" line="772" static="1">
			<x path="Int"/>
			<haxe_doc>display mirroring/dual display switch, video mode switch</haxe_doc>
		</displayswitch>
		<kbdillumtoggle public="1" line="774" static="1"><x path="Int"/></kbdillumtoggle>
		<kbdillumdown public="1" line="775" static="1"><x path="Int"/></kbdillumdown>
		<kbdillumup public="1" line="776" static="1"><x path="Int"/></kbdillumup>
		<eject public="1" line="777" static="1"><x path="Int"/></eject>
		<sleep public="1" line="778" static="1"><x path="Int"/></sleep>
		<app1 public="1" line="780" static="1"><x path="Int"/></app1>
		<app2 public="1" line="781" static="1"><x path="Int"/></app2>
		<scancode_names line="783" static="1"><c path="Array"><c path="String"/></c></scancode_names>
		<haxe_doc>The scancode class. The values below come directly from SDL header include files,
but they aren't specific to SDL so they are used generically</haxe_doc>
		<meta><m n=":noCompletion"/></meta>
	</class>
	<class path="snow.input.Keycodes" params="" file="/Users/sven/dev/snow/snow/input/Keycodes.hx">
		<from_scan public="1" set="method" line="9" static="1">
			<f a="scancode">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Convert a scancode to a keycode for comparison</haxe_doc>
		</from_scan>
		<to_scan public="1" set="method" line="16" static="1">
			<f a="keycode">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Convert a keycode to a scancode if possible.
            NOTE - this will only map a large % but not all keys,
            there is a list of unmapped keys commented in the code.</haxe_doc>
		</to_scan>
		<name public="1" set="method" line="111" static="1">
			<f a="keycode">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert a keycode to string</haxe_doc>
		</name>
		<unknown public="1" line="142" static="1"><x path="Int"/></unknown>
		<enter public="1" line="144" static="1"><x path="Int"/></enter>
		<escape public="1" line="145" static="1"><x path="Int"/></escape>
		<backspace public="1" line="146" static="1"><x path="Int"/></backspace>
		<tab public="1" line="147" static="1"><x path="Int"/></tab>
		<space public="1" line="148" static="1"><x path="Int"/></space>
		<exclaim public="1" line="149" static="1"><x path="Int"/></exclaim>
		<quotedbl public="1" line="150" static="1"><x path="Int"/></quotedbl>
		<hash public="1" line="151" static="1"><x path="Int"/></hash>
		<percent public="1" line="152" static="1"><x path="Int"/></percent>
		<dollar public="1" line="153" static="1"><x path="Int"/></dollar>
		<ampersand public="1" line="154" static="1"><x path="Int"/></ampersand>
		<quote public="1" line="155" static="1"><x path="Int"/></quote>
		<leftparen public="1" line="156" static="1"><x path="Int"/></leftparen>
		<rightparen public="1" line="157" static="1"><x path="Int"/></rightparen>
		<asterisk public="1" line="158" static="1"><x path="Int"/></asterisk>
		<plus public="1" line="159" static="1"><x path="Int"/></plus>
		<comma public="1" line="160" static="1"><x path="Int"/></comma>
		<minus public="1" line="161" static="1"><x path="Int"/></minus>
		<period public="1" line="162" static="1"><x path="Int"/></period>
		<slash public="1" line="163" static="1"><x path="Int"/></slash>
		<key_0 public="1" line="164" static="1"><x path="Int"/></key_0>
		<key_1 public="1" line="165" static="1"><x path="Int"/></key_1>
		<key_2 public="1" line="166" static="1"><x path="Int"/></key_2>
		<key_3 public="1" line="167" static="1"><x path="Int"/></key_3>
		<key_4 public="1" line="168" static="1"><x path="Int"/></key_4>
		<key_5 public="1" line="169" static="1"><x path="Int"/></key_5>
		<key_6 public="1" line="170" static="1"><x path="Int"/></key_6>
		<key_7 public="1" line="171" static="1"><x path="Int"/></key_7>
		<key_8 public="1" line="172" static="1"><x path="Int"/></key_8>
		<key_9 public="1" line="173" static="1"><x path="Int"/></key_9>
		<colon public="1" line="174" static="1"><x path="Int"/></colon>
		<semicolon public="1" line="175" static="1"><x path="Int"/></semicolon>
		<less public="1" line="176" static="1"><x path="Int"/></less>
		<equals public="1" line="177" static="1"><x path="Int"/></equals>
		<greater public="1" line="178" static="1"><x path="Int"/></greater>
		<question public="1" line="179" static="1"><x path="Int"/></question>
		<at public="1" line="180" static="1"><x path="Int"/></at>
		<leftbracket public="1" line="184" static="1"><x path="Int"/></leftbracket>
		<backslash public="1" line="185" static="1"><x path="Int"/></backslash>
		<rightbracket public="1" line="186" static="1"><x path="Int"/></rightbracket>
		<caret public="1" line="187" static="1"><x path="Int"/></caret>
		<underscore public="1" line="188" static="1"><x path="Int"/></underscore>
		<backquote public="1" line="189" static="1"><x path="Int"/></backquote>
		<key_a public="1" line="190" static="1"><x path="Int"/></key_a>
		<key_b public="1" line="191" static="1"><x path="Int"/></key_b>
		<key_c public="1" line="192" static="1"><x path="Int"/></key_c>
		<key_d public="1" line="193" static="1"><x path="Int"/></key_d>
		<key_e public="1" line="194" static="1"><x path="Int"/></key_e>
		<key_f public="1" line="195" static="1"><x path="Int"/></key_f>
		<key_g public="1" line="196" static="1"><x path="Int"/></key_g>
		<key_h public="1" line="197" static="1"><x path="Int"/></key_h>
		<key_i public="1" line="198" static="1"><x path="Int"/></key_i>
		<key_j public="1" line="199" static="1"><x path="Int"/></key_j>
		<key_k public="1" line="200" static="1"><x path="Int"/></key_k>
		<key_l public="1" line="201" static="1"><x path="Int"/></key_l>
		<key_m public="1" line="202" static="1"><x path="Int"/></key_m>
		<key_n public="1" line="203" static="1"><x path="Int"/></key_n>
		<key_o public="1" line="204" static="1"><x path="Int"/></key_o>
		<key_p public="1" line="205" static="1"><x path="Int"/></key_p>
		<key_q public="1" line="206" static="1"><x path="Int"/></key_q>
		<key_r public="1" line="207" static="1"><x path="Int"/></key_r>
		<key_s public="1" line="208" static="1"><x path="Int"/></key_s>
		<key_t public="1" line="209" static="1"><x path="Int"/></key_t>
		<key_u public="1" line="210" static="1"><x path="Int"/></key_u>
		<key_v public="1" line="211" static="1"><x path="Int"/></key_v>
		<key_w public="1" line="212" static="1"><x path="Int"/></key_w>
		<key_x public="1" line="213" static="1"><x path="Int"/></key_x>
		<key_y public="1" line="214" static="1"><x path="Int"/></key_y>
		<key_z public="1" line="215" static="1"><x path="Int"/></key_z>
		<capslock public="1" line="217" static="1"><x path="Int"/></capslock>
		<f1 public="1" line="219" static="1"><x path="Int"/></f1>
		<f2 public="1" line="220" static="1"><x path="Int"/></f2>
		<f3 public="1" line="221" static="1"><x path="Int"/></f3>
		<f4 public="1" line="222" static="1"><x path="Int"/></f4>
		<f5 public="1" line="223" static="1"><x path="Int"/></f5>
		<f6 public="1" line="224" static="1"><x path="Int"/></f6>
		<f7 public="1" line="225" static="1"><x path="Int"/></f7>
		<f8 public="1" line="226" static="1"><x path="Int"/></f8>
		<f9 public="1" line="227" static="1"><x path="Int"/></f9>
		<f10 public="1" line="228" static="1"><x path="Int"/></f10>
		<f11 public="1" line="229" static="1"><x path="Int"/></f11>
		<f12 public="1" line="230" static="1"><x path="Int"/></f12>
		<printscreen public="1" line="232" static="1"><x path="Int"/></printscreen>
		<scrolllock public="1" line="233" static="1"><x path="Int"/></scrolllock>
		<pause public="1" line="234" static="1"><x path="Int"/></pause>
		<insert public="1" line="235" static="1"><x path="Int"/></insert>
		<home public="1" line="236" static="1"><x path="Int"/></home>
		<pageup public="1" line="237" static="1"><x path="Int"/></pageup>
		<delete public="1" line="238" static="1"><x path="Int"/></delete>
		<end public="1" line="239" static="1"><x path="Int"/></end>
		<pagedown public="1" line="240" static="1"><x path="Int"/></pagedown>
		<right public="1" line="241" static="1"><x path="Int"/></right>
		<left public="1" line="242" static="1"><x path="Int"/></left>
		<down public="1" line="243" static="1"><x path="Int"/></down>
		<up public="1" line="244" static="1"><x path="Int"/></up>
		<numlockclear public="1" line="246" static="1"><x path="Int"/></numlockclear>
		<kp_divide public="1" line="247" static="1"><x path="Int"/></kp_divide>
		<kp_multiply public="1" line="248" static="1"><x path="Int"/></kp_multiply>
		<kp_minus public="1" line="249" static="1"><x path="Int"/></kp_minus>
		<kp_plus public="1" line="250" static="1"><x path="Int"/></kp_plus>
		<kp_enter public="1" line="251" static="1"><x path="Int"/></kp_enter>
		<kp_1 public="1" line="252" static="1"><x path="Int"/></kp_1>
		<kp_2 public="1" line="253" static="1"><x path="Int"/></kp_2>
		<kp_3 public="1" line="254" static="1"><x path="Int"/></kp_3>
		<kp_4 public="1" line="255" static="1"><x path="Int"/></kp_4>
		<kp_5 public="1" line="256" static="1"><x path="Int"/></kp_5>
		<kp_6 public="1" line="257" static="1"><x path="Int"/></kp_6>
		<kp_7 public="1" line="258" static="1"><x path="Int"/></kp_7>
		<kp_8 public="1" line="259" static="1"><x path="Int"/></kp_8>
		<kp_9 public="1" line="260" static="1"><x path="Int"/></kp_9>
		<kp_0 public="1" line="261" static="1"><x path="Int"/></kp_0>
		<kp_period public="1" line="262" static="1"><x path="Int"/></kp_period>
		<application public="1" line="264" static="1"><x path="Int"/></application>
		<power public="1" line="265" static="1"><x path="Int"/></power>
		<kp_equals public="1" line="266" static="1"><x path="Int"/></kp_equals>
		<f13 public="1" line="267" static="1"><x path="Int"/></f13>
		<f14 public="1" line="268" static="1"><x path="Int"/></f14>
		<f15 public="1" line="269" static="1"><x path="Int"/></f15>
		<f16 public="1" line="270" static="1"><x path="Int"/></f16>
		<f17 public="1" line="271" static="1"><x path="Int"/></f17>
		<f18 public="1" line="272" static="1"><x path="Int"/></f18>
		<f19 public="1" line="273" static="1"><x path="Int"/></f19>
		<f20 public="1" line="274" static="1"><x path="Int"/></f20>
		<f21 public="1" line="275" static="1"><x path="Int"/></f21>
		<f22 public="1" line="276" static="1"><x path="Int"/></f22>
		<f23 public="1" line="277" static="1"><x path="Int"/></f23>
		<f24 public="1" line="278" static="1"><x path="Int"/></f24>
		<execute public="1" line="279" static="1"><x path="Int"/></execute>
		<help public="1" line="280" static="1"><x path="Int"/></help>
		<menu public="1" line="281" static="1"><x path="Int"/></menu>
		<select public="1" line="282" static="1"><x path="Int"/></select>
		<stop public="1" line="283" static="1"><x path="Int"/></stop>
		<again public="1" line="284" static="1"><x path="Int"/></again>
		<undo public="1" line="285" static="1"><x path="Int"/></undo>
		<cut public="1" line="286" static="1"><x path="Int"/></cut>
		<copy public="1" line="287" static="1"><x path="Int"/></copy>
		<paste public="1" line="288" static="1"><x path="Int"/></paste>
		<find public="1" line="289" static="1"><x path="Int"/></find>
		<mute public="1" line="290" static="1"><x path="Int"/></mute>
		<volumeup public="1" line="291" static="1"><x path="Int"/></volumeup>
		<volumedown public="1" line="292" static="1"><x path="Int"/></volumedown>
		<kp_comma public="1" line="293" static="1"><x path="Int"/></kp_comma>
		<kp_equalsas400 public="1" line="294" static="1"><x path="Int"/></kp_equalsas400>
		<alterase public="1" line="296" static="1"><x path="Int"/></alterase>
		<sysreq public="1" line="297" static="1"><x path="Int"/></sysreq>
		<cancel public="1" line="298" static="1"><x path="Int"/></cancel>
		<clear public="1" line="299" static="1"><x path="Int"/></clear>
		<prior public="1" line="300" static="1"><x path="Int"/></prior>
		<return2 public="1" line="301" static="1"><x path="Int"/></return2>
		<separator public="1" line="302" static="1"><x path="Int"/></separator>
		<out public="1" line="303" static="1"><x path="Int"/></out>
		<oper public="1" line="304" static="1"><x path="Int"/></oper>
		<clearagain public="1" line="305" static="1"><x path="Int"/></clearagain>
		<crsel public="1" line="306" static="1"><x path="Int"/></crsel>
		<exsel public="1" line="307" static="1"><x path="Int"/></exsel>
		<kp_00 public="1" line="309" static="1"><x path="Int"/></kp_00>
		<kp_000 public="1" line="310" static="1"><x path="Int"/></kp_000>
		<thousandsseparator public="1" line="311" static="1"><x path="Int"/></thousandsseparator>
		<decimalseparator public="1" line="312" static="1"><x path="Int"/></decimalseparator>
		<currencyunit public="1" line="313" static="1"><x path="Int"/></currencyunit>
		<currencysubunit public="1" line="314" static="1"><x path="Int"/></currencysubunit>
		<kp_leftparen public="1" line="315" static="1"><x path="Int"/></kp_leftparen>
		<kp_rightparen public="1" line="316" static="1"><x path="Int"/></kp_rightparen>
		<kp_leftbrace public="1" line="317" static="1"><x path="Int"/></kp_leftbrace>
		<kp_rightbrace public="1" line="318" static="1"><x path="Int"/></kp_rightbrace>
		<kp_tab public="1" line="319" static="1"><x path="Int"/></kp_tab>
		<kp_backspace public="1" line="320" static="1"><x path="Int"/></kp_backspace>
		<kp_a public="1" line="321" static="1"><x path="Int"/></kp_a>
		<kp_b public="1" line="322" static="1"><x path="Int"/></kp_b>
		<kp_c public="1" line="323" static="1"><x path="Int"/></kp_c>
		<kp_d public="1" line="324" static="1"><x path="Int"/></kp_d>
		<kp_e public="1" line="325" static="1"><x path="Int"/></kp_e>
		<kp_f public="1" line="326" static="1"><x path="Int"/></kp_f>
		<kp_xor public="1" line="327" static="1"><x path="Int"/></kp_xor>
		<kp_power public="1" line="328" static="1"><x path="Int"/></kp_power>
		<kp_percent public="1" line="329" static="1"><x path="Int"/></kp_percent>
		<kp_less public="1" line="330" static="1"><x path="Int"/></kp_less>
		<kp_greater public="1" line="331" static="1"><x path="Int"/></kp_greater>
		<kp_ampersand public="1" line="332" static="1"><x path="Int"/></kp_ampersand>
		<kp_dblampersand public="1" line="333" static="1"><x path="Int"/></kp_dblampersand>
		<kp_verticalbar public="1" line="334" static="1"><x path="Int"/></kp_verticalbar>
		<kp_dblverticalbar public="1" line="335" static="1"><x path="Int"/></kp_dblverticalbar>
		<kp_colon public="1" line="336" static="1"><x path="Int"/></kp_colon>
		<kp_hash public="1" line="337" static="1"><x path="Int"/></kp_hash>
		<kp_space public="1" line="338" static="1"><x path="Int"/></kp_space>
		<kp_at public="1" line="339" static="1"><x path="Int"/></kp_at>
		<kp_exclam public="1" line="340" static="1"><x path="Int"/></kp_exclam>
		<kp_memstore public="1" line="341" static="1"><x path="Int"/></kp_memstore>
		<kp_memrecall public="1" line="342" static="1"><x path="Int"/></kp_memrecall>
		<kp_memclear public="1" line="343" static="1"><x path="Int"/></kp_memclear>
		<kp_memadd public="1" line="344" static="1"><x path="Int"/></kp_memadd>
		<kp_memsubtract public="1" line="345" static="1"><x path="Int"/></kp_memsubtract>
		<kp_memmultiply public="1" line="346" static="1"><x path="Int"/></kp_memmultiply>
		<kp_memdivide public="1" line="347" static="1"><x path="Int"/></kp_memdivide>
		<kp_plusminus public="1" line="348" static="1"><x path="Int"/></kp_plusminus>
		<kp_clear public="1" line="349" static="1"><x path="Int"/></kp_clear>
		<kp_clearentry public="1" line="350" static="1"><x path="Int"/></kp_clearentry>
		<kp_binary public="1" line="351" static="1"><x path="Int"/></kp_binary>
		<kp_octal public="1" line="352" static="1"><x path="Int"/></kp_octal>
		<kp_decimal public="1" line="353" static="1"><x path="Int"/></kp_decimal>
		<kp_hexadecimal public="1" line="354" static="1"><x path="Int"/></kp_hexadecimal>
		<lctrl public="1" line="356" static="1"><x path="Int"/></lctrl>
		<lshift public="1" line="357" static="1"><x path="Int"/></lshift>
		<lalt public="1" line="358" static="1"><x path="Int"/></lalt>
		<lmeta public="1" line="359" static="1"><x path="Int"/></lmeta>
		<rctrl public="1" line="360" static="1"><x path="Int"/></rctrl>
		<rshift public="1" line="361" static="1"><x path="Int"/></rshift>
		<ralt public="1" line="362" static="1"><x path="Int"/></ralt>
		<rmeta public="1" line="363" static="1"><x path="Int"/></rmeta>
		<mode public="1" line="365" static="1"><x path="Int"/></mode>
		<audionext public="1" line="367" static="1"><x path="Int"/></audionext>
		<audioprev public="1" line="368" static="1"><x path="Int"/></audioprev>
		<audiostop public="1" line="369" static="1"><x path="Int"/></audiostop>
		<audioplay public="1" line="370" static="1"><x path="Int"/></audioplay>
		<audiomute public="1" line="371" static="1"><x path="Int"/></audiomute>
		<mediaselect public="1" line="372" static="1"><x path="Int"/></mediaselect>
		<www public="1" line="373" static="1"><x path="Int"/></www>
		<mail public="1" line="374" static="1"><x path="Int"/></mail>
		<calculator public="1" line="375" static="1"><x path="Int"/></calculator>
		<computer public="1" line="376" static="1"><x path="Int"/></computer>
		<ac_search public="1" line="377" static="1"><x path="Int"/></ac_search>
		<ac_home public="1" line="378" static="1"><x path="Int"/></ac_home>
		<ac_back public="1" line="379" static="1"><x path="Int"/></ac_back>
		<ac_forward public="1" line="380" static="1"><x path="Int"/></ac_forward>
		<ac_stop public="1" line="381" static="1"><x path="Int"/></ac_stop>
		<ac_refresh public="1" line="382" static="1"><x path="Int"/></ac_refresh>
		<ac_bookmarks public="1" line="383" static="1"><x path="Int"/></ac_bookmarks>
		<brightnessdown public="1" line="385" static="1"><x path="Int"/></brightnessdown>
		<brightnessup public="1" line="386" static="1"><x path="Int"/></brightnessup>
		<displayswitch public="1" line="387" static="1"><x path="Int"/></displayswitch>
		<kbdillumtoggle public="1" line="388" static="1"><x path="Int"/></kbdillumtoggle>
		<kbdillumdown public="1" line="389" static="1"><x path="Int"/></kbdillumdown>
		<kbdillumup public="1" line="390" static="1"><x path="Int"/></kbdillumup>
		<eject public="1" line="391" static="1"><x path="Int"/></eject>
		<sleep public="1" line="392" static="1"><x path="Int"/></sleep>
		<haxe_doc>The keycode class, with conversion helpers for scancodes. The values below come directly from SDL header include files,
but they aren't specific to SDL so they are used generically</haxe_doc>
		<meta><m n=":noCompletion"/></meta>
	</class>
	<class path="snow.io.IO" params="" file="/Users/sven/dev/snow/snow/io/IO.hx">
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
		</lib>
		<platform public="1">
			<t path="snow.io.IOSystem"/>
			<meta><m n=":noCompletion"/></meta>
		</platform>
		<url_open public="1" set="method" line="25">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to open a url in the default browser</haxe_doc>
		</url_open>
		<on_event set="method" line="33">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow when a system event happens.</haxe_doc>
		</on_event>
		<update set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow, update any IO related processing</haxe_doc>
		</update>
		<destroy set="method" line="49">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow, cleans up IO</haxe_doc>
		</destroy>
		<new set="method" line="14">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>constructed internally, use `app.io`</haxe_doc>
		</new>
	</class>
	<typedef path="snow.io.IOSystem" params="" file="/Users/sven/dev/snow/snow/io/IOSystem.hx">
		<c path="snow.platform.native.io.IOSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.io.IOSystemBinding" params="" file="/Users/sven/dev/snow/snow/io/IOSystem.hx" module="snow.io.IOSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.io.IO"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="23">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the IO manager initiates this system</haxe_doc>
		</init>
		<process public="1" set="method" line="25">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the IO manager updates this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the IO manager destroys this system</haxe_doc>
		</destroy>
		<on_event public="1" set="method" line="29">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called when the IO manager forwards an event to this system</haxe_doc>
		</on_event>
		<url_open public="1" set="method" line="31">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to open a url in the default browser</haxe_doc>
		</url_open>
		<watch_add public="1" set="method" line="38">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to add a directory to watch for file change notifications.
                This is for directories only. Children files + sub folders children files will notify of change.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_add>
		<watch_remove public="1" set="method" line="41">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to remove a watched directory.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_remove>
		<dialog_open public="1" set="method" line="45">
			<f a="?_title:?_filters" v="'Select file':null">
				<c path="String"/>
				<c path="Array"><t path="snow.types.FileFilter"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file open dialog.
                Returns a blank string if they cancel or any error occurs.
                supports: `windows` `mac` `linux`</haxe_doc>
		</dialog_open>
		<dialog_save public="1" set="method" line="49">
			<f a="?_title:?_filter" v="'Save file':null">
				<c path="String"/>
				<t path="snow.types.FileFilter"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file save dialog.
                Returns a blank string if they cancel or any error occurs.
                supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_save>
		<dialog_folder public="1" set="method" line="53">
			<f a="?_title" v="'Select folder'">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform folder select dialog.
                Returns a blank string if they cancel or any error occurs.
                supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_folder>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="snow.utils.Libs" params="" file="/Users/sven/dev/snow/snow/utils/Libs.hx">
		<__moduleNames line="6" static="1">
			<x path="Map">
				<c path="String"/>
				<c path="String"/>
			</x>
			<meta><m n=":noCompletion"/></meta>
		</__moduleNames>
		<tryLoad set="method" line="8" static="1"><f a="name:library:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></tryLoad>
		<findHaxeLib set="method" line="64" static="1"><f a="library">
	<c path="String"/>
	<c path="String"/>
</f></findHaxeLib>
		<get_system_name set="method" line="108" static="1"><f a=""><c path="String"/></f></get_system_name>
		<load public="1" set="method" line="160" static="1"><f a="library:method:?args" v="::0">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></load>
		<loaderTrace set="method" line="222" static="1"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></loaderTrace>
	</class>
	<class path="sys.io.Process" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx">
		<_run line="123" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></_run>
		<_close line="126" static="1"><f a="">
	<d/>
	<unknown/>
</f></_close>
		<p><d/></p>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<close public="1" set="method" line="115"><f a=""><x path="Void"/></f></close>
		<new public="1" set="method" line="100"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io._Process.Stdin" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<p><d/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<new public="1" set="method" line="29"><f a="p">
	<unknown/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="87" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stdout_read>
		<_stderr_read line="88" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stderr_read>
		<p><d/></p>
		<out><x path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="70" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="76" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="64"><f a="p:out">
	<unknown/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="snow.platform.native.Core" params="" file="/Users/sven/dev/snow/snow/platform/native/Core.hx">
		<extends path="snow.CoreBinding"/>
		<snow_init line="62" static="1"><f a=":">
	<f a="">
		<t path="snow.types.SystemEvent"/>
		<x path="Void"/>
	</f>
	<a>
		<log_level><x path="Int"/></log_level>
		<has_loop><t path="Null"><x path="Bool"/></t></has_loop>
	</a>
	<unknown/>
</f></snow_init>
		<snow_shutdown line="63" static="1"><f a=""><unknown/></f></snow_shutdown>
		<snow_timestamp line="64" static="1"><f a=""><x path="Float"/></f></snow_timestamp>
		<snow_app_path line="66" static="1"><f a=""><c path="String"/></f></snow_app_path>
		<snow_pref_path line="67" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></snow_pref_path>
		<start_timestamp><x path="Float"/></start_timestamp>
		<init public="1" set="method" line="30" override="1">
			<f a="_event_handler">
				<f a="">
					<t path="snow.types.SystemEvent"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Called by the snow internals to intiialize the core and subsystems of the framework, with the event handler passed in for where to deliver system events</haxe_doc>
		</init>
		<shutdown public="1" set="method" line="42" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called to explicitly shutdown the framework cleanly. Called by `quit` and `app_terminated` type events by the core, for example.</haxe_doc>
		</shutdown>
		<timestamp public="1" set="method" line="47" override="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Get the most precise timestamp available on the platform, in seconds (time is always in seconds in snow)</haxe_doc>
		</timestamp>
		<app_path public="1" set="method" line="53" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the full path that the application is located</haxe_doc>
		</app_path>
		<pref_path public="1" set="method" line="58" override="1">
			<f a="_package:_appname">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>On platforms where this makes sense, get the application specific writeable data path</haxe_doc>
		</pref_path>
		<new public="1" set="method" line="25"><f a="_app">
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Implemented in the platform specific concrete versions of this class</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.StaticSnow" params="" file="/Users/sven/dev/snow/snow/platform/native/StaticSnow.hx"><meta>
	<m n=":cppFileCode"><e>"extern \"C\" void snow_register_prims();"</e></m>
	<m n=":buildXml"><e><![CDATA["\n\n<set name='MSVC_LIB_VERSION' value='-${MSVC_VER}' if='windows'/>\n<set name='DEBUG_SNOW' value='${DBG}' if='debug_snow'/>\n<target id='haxe'>\n  <lib name='${haxelib:snow}/ndll/${BINDIR}/libsnow${DEBUG_SNOW}${LIBEXTRA}${LIBEXT}'/>\n\n    <section if='mac'>\n        <vflag name='-l' value='iconv'/>\n        <vflag name='-framework' value='IOKit' />\n        <vflag name='-framework' value='Foundation' />\n        <vflag name='-framework' value='CoreAudio' />\n        <vflag name='-framework' value='CoreVideo' />\n        <vflag name='-framework' value='Cocoa' />\n        <vflag name='-framework' value='OpenGL' />\n        <vflag name='-framework' value='AudioToolbox' />\n        <vflag name='-framework' value='AudioUnit' />\n        <vflag name='-framework' value='ForceFeedback' />\n        <vflag name='-framework' value='Carbon' />\n        <vflag name='-framework' value='AppKit' />\n        <vflag name='-framework' value='OpenAL'/>\n    </section>\n\n    <section if='windows'>\n\n        <lib name='gdi32.lib' />\n        <lib name='opengl32.lib' />\n        <lib name='user32.lib' />\n        <lib name='kernel32.lib' />\n        <lib name='advapi32.lib' />\n        <lib name='winmm.lib' />\n        <lib name='imm32.lib'  />\n        <lib name='ole32.lib' />\n        <lib name='oleaut32.lib' />\n        <lib name='version.lib' />\n        <lib name='ws2_32.lib'  />\n        <lib name='wldap32.lib' />\n        <lib name='shell32.lib' />\n        <lib name='comdlg32.lib' />\n\n     </section>\n\n    <section if='linux'>\n\n        <lib name='${HXCPP}/lib/${BINDIR}/liblinuxcompat.a' />\n        <lib name='-lpthread' />\n        <lib name='-lrt' />\n        <lib name='-lGL' />\n\n            <!-- These are from `pkg-config --libs gtk+-3.0` -->\n        <lib name='-lgtk-3'  unless='SNOW_NO_GTK'/>\n        <lib name='-lgdk-3' unless='SNOW_NO_GTK'/>\n        <lib name='-latk-1.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lgio-2.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lpangocairo-1.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lgdk_pixbuf-2.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lcairo-gobject' unless='SNOW_NO_GTK'/>\n        <lib name='-lpango-1.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lcairo' unless='SNOW_NO_GTK'/>\n        <lib name='-lgobject-2.0' unless='SNOW_NO_GTK'/>\n        <lib name='-lglib-2.0'  unless='SNOW_NO_GTK'/>\n\n     </section>\n\n</target>\n"]]></e></m>
	<m n=":keep"/>
</meta></class>
	<class path="snow.platform.native.assets.AssetSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/assets/AssetSystem.hx">
		<extends path="snow.assets.AssetSystemBinding"/>
		<snow_assets_image_load_info line="219" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Int"/></t>
	<a>
		<width set="null"><x path="Int"/></width>
		<id set="null"><c path="String"/></id>
		<height set="null"><x path="Int"/></height>
		<data set="null"><unknown/></data>
		<bpp_source set="null"><x path="Int"/></bpp_source>
		<bpp set="null"><x path="Int"/></bpp>
	</a>
</f></snow_assets_image_load_info>
		<snow_assets_image_info_from_bytes line="220" static="1"><f a="::">
	<c path="String"/>
	<t path="snow.utils.ByteArray"/>
	<t path="Null"><x path="Int"/></t>
	<a>
		<width set="null"><x path="Int"/></width>
		<id set="null"><c path="String"/></id>
		<height set="null"><x path="Int"/></height>
		<data set="null"><unknown/></data>
		<bpp_source set="null"><x path="Int"/></bpp_source>
		<bpp set="null"><x path="Int"/></bpp>
	</a>
</f></snow_assets_image_info_from_bytes>
		<snow_assets_audio_load_info_ogg line="222" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<t path="snow.types.AudioInfo"/>
</f></snow_assets_audio_load_info_ogg>
		<snow_assets_audio_read_bytes_ogg line="223" static="1"><f a="::">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></snow_assets_audio_read_bytes_ogg>
		<snow_assets_audio_seek_bytes_ogg line="224" static="1"><f a=":">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_assets_audio_seek_bytes_ogg>
		<snow_assets_audio_load_info_wav line="226" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<t path="snow.types.AudioInfo"/>
</f></snow_assets_audio_load_info_wav>
		<snow_assets_audio_read_bytes_wav line="227" static="1"><f a="::">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></snow_assets_audio_read_bytes_wav>
		<snow_assets_audio_seek_bytes_wav line="228" static="1"><f a=":">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_assets_audio_seek_bytes_wav>
		<snow_assets_audio_load_info_pcm line="230" static="1"><f a=":">
	<c path="String"/>
	<t path="Null"><x path="Bool"/></t>
	<t path="snow.types.AudioInfo"/>
</f></snow_assets_audio_load_info_pcm>
		<snow_assets_audio_read_bytes_pcm line="231" static="1"><f a="::">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></snow_assets_audio_read_bytes_pcm>
		<snow_assets_audio_seek_bytes_pcm line="232" static="1"><f a=":">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_assets_audio_seek_bytes_pcm>
		<exists public="1" set="method" line="24" override="1"><f a="_id:?_strict" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></exists>
		<image_load_info public="1" set="method" line="41" override="1"><f a="_path:?_components:?_onload" v=":4:null">
	<c path="String"/>
	<x path="Int"/>
	<f a="?">
		<t path="snow.types.ImageInfo"/>
		<x path="Void"/>
	</f>
	<t path="snow.types.ImageInfo"/>
</f></image_load_info>
		<image_info_from_bytes public="1" set="method" line="74" override="1"><f a="_path:_bytes:?_components" v="::4">
	<c path="String"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<t path="snow.types.ImageInfo"/>
</f></image_info_from_bytes>
		<audio_load_info public="1" set="method" line="97" override="1"><f a="_path:?_format:?_load:?_onload" v=":null:true:null">
	<c path="String"/>
	<x path="snow.types.AudioFormatType"/>
	<x path="Bool"/>
	<f a="?">
		<t path="snow.types.AudioInfo"/>
		<x path="Void"/>
	</f>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_info>
		<audio_seek_source public="1" set="method" line="138" override="1"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source>
		<audio_load_portion public="1" set="method" line="155" override="1"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion>
		<audio_load_ogg set="method" line="174"><f a="_path:?load" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_ogg>
		<audio_load_portion_ogg set="method" line="178"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion_ogg>
		<audio_seek_source_ogg set="method" line="182"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source_ogg>
		<audio_load_wav set="method" line="188"><f a="_path:?load" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_wav>
		<audio_load_portion_wav set="method" line="192"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion_wav>
		<audio_seek_source_wav set="method" line="196"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source_wav>
		<audio_load_pcm set="method" line="202"><f a="_path:?load" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<t path="snow.types.AudioInfo"/>
</f></audio_load_pcm>
		<audio_load_portion_pcm set="method" line="206"><f a="_info:_start:_len">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></audio_load_portion_pcm>
		<audio_seek_source_pcm set="method" line="210"><f a="_info:_to">
	<t path="snow.types.AudioInfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></audio_seek_source_pcm>
		<new public="1" set="method" line="16"><f a="_manager">
	<c path="snow.assets.Assets"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.audio.AudioSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/AudioSystem.hx">
		<extends path="snow.audio.AudioSystemBinding"/>
		<init public="1" set="method" line="18" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="19" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></destroy>
		<suspend public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></suspend>
		<resume public="1" set="method" line="22" override="1"><f a=""><x path="Void"/></f></resume>
		<new public="1" set="method" line="11"><f a="_manager:_lib">
	<c path="snow.audio.Audio"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.audio.Sound" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/Sound.hx">
		<extends path="snow.audio.SoundBinding"/>
		<length_bytes public="1" get="accessor" set="null">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The length of this sound in `bytes`</haxe_doc>
		</length_bytes>
		<position_bytes public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The current playback position of this sound in `bytes`</haxe_doc>
		</position_bytes>
		<bytes_to_seconds public="1" set="method" line="18">
			<f a="_bytes">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>A helper for converting bytes to seconds for this sound source, using the format settings specific to this sound</haxe_doc>
		</bytes_to_seconds>
		<seconds_to_bytes public="1" set="method" line="28">
			<f a="_seconds">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>A helper for converting seconds to bytes for this sound source, using the format settings specific to this sound</haxe_doc>
		</seconds_to_bytes>
		<get_position_bytes set="method" line="37"><f a=""><x path="Int"/></f></get_position_bytes>
		<set_position_bytes set="method" line="41"><f a="_position_bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position_bytes>
		<get_length_bytes set="method" line="45"><f a=""><x path="Int"/></f></get_length_bytes>
		<get_duration set="method" line="49" override="1"><f a=""><x path="Float"/></f></get_duration>
		<new public="1" set="method" line="8"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.audio.openal.Sound" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/Sound.hx">
		<extends path="snow.platform.native.audio.Sound"/>
		<half_pi line="188" static="1"><x path="Float"/></half_pi>
		<source public="1">
			<x path="Int"/>
			<haxe_doc>the sound source name</haxe_doc>
		</source>
		<buffer public="1">
			<x path="Int"/>
			<haxe_doc>the sound buffer name</haxe_doc>
		</buffer>
		<format public="1">
			<x path="Int"/>
			<haxe_doc>mono8? stereo16?</haxe_doc>
		</format>
		<play public="1" set="method" line="36" override="1"><f a=""><x path="Void"/></f></play>
		<loop public="1" set="method" line="51" override="1"><f a=""><x path="Void"/></f></loop>
		<pause public="1" set="method" line="65" override="1"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="75" override="1"><f a=""><x path="Void"/></f></stop>
		<destroy public="1" set="method" line="88" override="1"><f a=""><x path="Void"/></f></destroy>
		<internal_update public="1" set="method" line="101" override="1"><f a=""><x path="Void"/></f></internal_update>
		<set_info set="method" line="117" override="1"><f a="_info">
	<t path="snow.types.AudioInfo"/>
	<t path="snow.types.AudioInfo"/>
</f></set_info>
		<get_position_bytes set="method" line="190" override="1"><f a=""><x path="Int"/></f></get_position_bytes>
		<get_position set="method" line="196" override="1"><f a=""><x path="Float"/></f></get_position>
		<set_pan set="method" line="202" override="1"><f a="_pan">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_pitch set="method" line="210" override="1"><f a="_pitch">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pitch>
		<set_volume set="method" line="218" override="1"><f a="_volume">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<set_looping set="method" line="226" override="1"><f a="_looping">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_looping>
		<set_position_bytes set="method" line="238" override="1"><f a="_position_bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position_bytes>
		<set_position set="method" line="246" override="1"><f a="_position">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<new public="1" set="method" line="28"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The openal specific implementation of Sound</haxe_doc>
		<meta>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.audio.SoundStream" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/SoundStream.hx">
		<extends path="snow.platform.native.audio.openal.Sound"/>
		<buffer_length public="1">
			<x path="Int"/>
			<haxe_doc>The length of bytes for a single buffer to queue up to stream. default: 176400, about 1 second in 16 bit mono.</haxe_doc>
		</buffer_length>
		<buffer_count public="1">
			<x path="Int"/>
			<haxe_doc>The number of buffers to use in the queue for streaming. default: 4`</haxe_doc>
		</buffer_count>
		<data_get public="1">
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.AudioDataBlob"/>
			</f>
			<haxe_doc>The get function, assign a function here if you want to stream data to the source manually, like generative sound.</haxe_doc>
		</data_get>
		<data_seek public="1">
			<f a="">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>The seek function, assign a function here if you want to stream data to the source manually, like generative sound.</haxe_doc>
		</data_seek>
		<default_data_seek set="method" line="33">
			<f a="_to">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Default data seek implementation for `SoundStream` uses `assets.system.audio_seek_source`</haxe_doc>
		</default_data_seek>
		<default_data_get set="method" line="40">
			<f a="_start:_length">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.AudioDataBlob"/>
			</f>
			<haxe_doc>Default data get implementation for `SoundStream` uses `assets.system.audio_load_portion`</haxe_doc>
		</default_data_get>
		<new public="1" set="method" line="20"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="snow.platform.native.audio.openal.Context" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" module="snow.platform.native.audio.openal.AL">
		<from><icast><t path="Null"><x path="Float"/></t></icast></from>
		<this><t path="Null"><x path="Float"/></t></this>
		<to><icast><t path="Null"><x path="Float"/></t></icast></to>
		<impl><class path="snow.platform.native.audio.openal._AL.Context_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"/></impl>
	</abstract>
	<class path="snow.platform.native.audio.openal._AL.Context_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"/>
	<abstract path="snow.platform.native.audio.openal.Device" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" module="snow.platform.native.audio.openal.AL">
		<from><icast><t path="Null"><x path="Float"/></t></icast></from>
		<this><t path="Null"><x path="Float"/></t></this>
		<to><icast><t path="Null"><x path="Float"/></t></icast></to>
		<impl><class path="snow.platform.native.audio.openal._AL.Device_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"/></impl>
	</abstract>
	<class path="snow.platform.native.audio.openal._AL.Device_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" private="1" module="snow.platform.native.audio.openal.AL" extern="1"/>
	<class path="snow.platform.native.audio.openal.AL" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx">
		<NONE public="1" line="15" static="1"><x path="Int"/></NONE>
		<FALSE public="1" line="16" static="1"><x path="Int"/></FALSE>
		<TRUE public="1" line="17" static="1"><x path="Int"/></TRUE>
		<SOURCE_RELATIVE public="1" line="19" static="1"><x path="Int"/></SOURCE_RELATIVE>
		<CONE_INNER_ANGLE public="1" line="20" static="1"><x path="Int"/></CONE_INNER_ANGLE>
		<CONE_OUTER_ANGLE public="1" line="21" static="1"><x path="Int"/></CONE_OUTER_ANGLE>
		<PITCH public="1" line="22" static="1"><x path="Int"/></PITCH>
		<POSITION public="1" line="23" static="1"><x path="Int"/></POSITION>
		<DIRECTION public="1" line="24" static="1"><x path="Int"/></DIRECTION>
		<VELOCITY public="1" line="25" static="1"><x path="Int"/></VELOCITY>
		<LOOPING public="1" line="26" static="1"><x path="Int"/></LOOPING>
		<BUFFER public="1" line="27" static="1"><x path="Int"/></BUFFER>
		<GAIN public="1" line="28" static="1"><x path="Int"/></GAIN>
		<MIN_GAIN public="1" line="29" static="1"><x path="Int"/></MIN_GAIN>
		<MAX_GAIN public="1" line="30" static="1"><x path="Int"/></MAX_GAIN>
		<ORIENTATION public="1" line="31" static="1"><x path="Int"/></ORIENTATION>
		<SOURCE_STATE public="1" line="32" static="1"><x path="Int"/></SOURCE_STATE>
		<INITIAL public="1" line="33" static="1"><x path="Int"/></INITIAL>
		<PLAYING public="1" line="34" static="1"><x path="Int"/></PLAYING>
		<PAUSED public="1" line="35" static="1"><x path="Int"/></PAUSED>
		<STOPPED public="1" line="36" static="1"><x path="Int"/></STOPPED>
		<BUFFERS_QUEUED public="1" line="37" static="1"><x path="Int"/></BUFFERS_QUEUED>
		<BUFFERS_PROCESSED public="1" line="38" static="1"><x path="Int"/></BUFFERS_PROCESSED>
		<REFERENCE_DISTANCE public="1" line="39" static="1"><x path="Int"/></REFERENCE_DISTANCE>
		<ROLLOFF_FACTOR public="1" line="40" static="1"><x path="Int"/></ROLLOFF_FACTOR>
		<CONE_OUTER_GAIN public="1" line="41" static="1"><x path="Int"/></CONE_OUTER_GAIN>
		<MAX_DISTANCE public="1" line="42" static="1"><x path="Int"/></MAX_DISTANCE>
		<SEC_OFFSET public="1" line="43" static="1"><x path="Int"/></SEC_OFFSET>
		<SAMPLE_OFFSET public="1" line="44" static="1"><x path="Int"/></SAMPLE_OFFSET>
		<BYTE_OFFSET public="1" line="45" static="1"><x path="Int"/></BYTE_OFFSET>
		<SOURCE_TYPE public="1" line="46" static="1"><x path="Int"/></SOURCE_TYPE>
		<STATIC public="1" line="47" static="1"><x path="Int"/></STATIC>
		<STREAMING public="1" line="48" static="1"><x path="Int"/></STREAMING>
		<UNDETERMINED public="1" line="49" static="1"><x path="Int"/></UNDETERMINED>
		<FORMAT_MONO8 public="1" line="50" static="1"><x path="Int"/></FORMAT_MONO8>
		<FORMAT_MONO16 public="1" line="51" static="1"><x path="Int"/></FORMAT_MONO16>
		<FORMAT_STEREO8 public="1" line="52" static="1"><x path="Int"/></FORMAT_STEREO8>
		<FORMAT_STEREO16 public="1" line="53" static="1"><x path="Int"/></FORMAT_STEREO16>
		<FREQUENCY public="1" line="54" static="1"><x path="Int"/></FREQUENCY>
		<BITS public="1" line="55" static="1"><x path="Int"/></BITS>
		<CHANNELS public="1" line="56" static="1"><x path="Int"/></CHANNELS>
		<SIZE public="1" line="57" static="1"><x path="Int"/></SIZE>
		<NO_ERROR public="1" line="58" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_NAME public="1" line="59" static="1"><x path="Int"/></INVALID_NAME>
		<INVALID_ENUM public="1" line="60" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" line="61" static="1"><x path="Int"/></INVALID_VALUE>
		<INVALID_OPERATION public="1" line="62" static="1"><x path="Int"/></INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" line="63" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<VENDOR public="1" line="64" static="1"><x path="Int"/></VENDOR>
		<VERSION public="1" line="65" static="1"><x path="Int"/></VERSION>
		<RENDERER public="1" line="66" static="1"><x path="Int"/></RENDERER>
		<EXTENSIONS public="1" line="67" static="1"><x path="Int"/></EXTENSIONS>
		<DOPPLER_FACTOR public="1" line="70" static="1"><x path="Int"/></DOPPLER_FACTOR>
		<SPEED_OF_SOUND public="1" line="71" static="1"><x path="Int"/></SPEED_OF_SOUND>
		<DOPPLER_VELOCITY public="1" line="72" static="1"><x path="Int"/></DOPPLER_VELOCITY>
		<DISTANCE_MODEL public="1" line="74" static="1"><x path="Int"/></DISTANCE_MODEL>
		<INVERSE_DISTANCE public="1" line="75" static="1"><x path="Int"/></INVERSE_DISTANCE>
		<INVERSE_DISTANCE_CLAMPED public="1" line="76" static="1"><x path="Int"/></INVERSE_DISTANCE_CLAMPED>
		<LINEAR_DISTANCE public="1" line="77" static="1"><x path="Int"/></LINEAR_DISTANCE>
		<LINEAR_DISTANCE_CLAMPED public="1" line="78" static="1"><x path="Int"/></LINEAR_DISTANCE_CLAMPED>
		<EXPONENT_DISTANCE public="1" line="79" static="1"><x path="Int"/></EXPONENT_DISTANCE>
		<EXPONENT_DISTANCE_CLAMPED public="1" line="80" static="1"><x path="Int"/></EXPONENT_DISTANCE_CLAMPED>
		<dopplerFactor public="1" set="method" line="84" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerFactor>
		<dopplerVelocity public="1" set="method" line="88" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></dopplerVelocity>
		<speedOfSound public="1" set="method" line="92" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></speedOfSound>
		<distanceModel public="1" set="method" line="96" static="1"><f a="distanceModel">
	<x path="Int"/>
	<x path="Void"/>
</f></distanceModel>
		<enable public="1" set="method" line="102" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<disable public="1" set="method" line="106" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<isEnabled public="1" set="method" line="110" static="1"><f a="capability">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<getString public="1" set="method" line="116" static="1"><f a="param">
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<getBooleanv public="1" set="method" line="120" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Bool"/></c>
</f></getBooleanv>
		<getIntegerv public="1" set="method" line="124" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getIntegerv>
		<getFloatv public="1" set="method" line="128" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getFloatv>
		<getDoublev public="1" set="method" line="132" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getDoublev>
		<getBoolean public="1" set="method" line="136" static="1"><f a="param">
	<x path="Int"/>
	<x path="Bool"/>
</f></getBoolean>
		<getInteger public="1" set="method" line="140" static="1"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getInteger>
		<getFloat public="1" set="method" line="144" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat>
		<getDouble public="1" set="method" line="148" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getDouble>
		<getError public="1" set="method" line="152" static="1"><f a=""><x path="Int"/></f></getError>
		<isExtensionPresent public="1" set="method" line="158" static="1"><f a="extname">
	<c path="String"/>
	<x path="Bool"/>
</f></isExtensionPresent>
		<getProcAddress public="1" set="method" line="163" static="1"><f a="fname">
	<c path="String"/>
	<d/>
</f></getProcAddress>
		<getEnumValue public="1" set="method" line="167" static="1"><f a="ename">
	<c path="String"/>
	<x path="Int"/>
</f></getEnumValue>
		<listenerf public="1" set="method" line="173" static="1"><f a="param:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listenerf>
		<listener3f public="1" set="method" line="177" static="1"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></listener3f>
		<listenerfv public="1" set="method" line="181" static="1"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></listenerfv>
		<listeneri public="1" set="method" line="185" static="1"><f a="param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listeneri>
		<listener3i public="1" set="method" line="189" static="1"><f a="param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></listener3i>
		<listeneriv public="1" set="method" line="193" static="1"><f a="param:values">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></listeneriv>
		<getListenerf public="1" set="method" line="197" static="1"><f a="param">
	<x path="Int"/>
	<x path="Float"/>
</f></getListenerf>
		<getListener3f public="1" set="method" line="201" static="1"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getListener3f>
		<getListenerfv public="1" set="method" line="205" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getListenerfv>
		<getListeneri public="1" set="method" line="209" static="1"><f a="param">
	<x path="Int"/>
	<x path="Int"/>
</f></getListeneri>
		<getListener3i public="1" set="method" line="213" static="1"><f a="param">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getListener3i>
		<getListeneriv public="1" set="method" line="217" static="1"><f a="param:?count" v=":1">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getListeneriv>
		<genSources public="1" set="method" line="223" static="1"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></genSources>
		<deleteSources public="1" set="method" line="227" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></deleteSources>
		<isSource public="1" set="method" line="231" static="1"><f a="source">
	<x path="Int"/>
	<x path="Bool"/>
</f></isSource>
		<sourcef public="1" set="method" line="237" static="1"><f a="source:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sourcef>
		<source3f public="1" set="method" line="241" static="1"><f a="source:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></source3f>
		<sourcefv public="1" set="method" line="245" static="1"><f a="source:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></sourcefv>
		<sourcei public="1" set="method" line="249" static="1"><f a="source:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sourcei>
		<source3i public="1" set="method" line="253" static="1"><f a="source:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></source3i>
		<sourceiv public="1" set="method" line="257" static="1"><f a="source:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceiv>
		<getSourcef public="1" set="method" line="261" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getSourcef>
		<getSource3f public="1" set="method" line="265" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getSource3f>
		<getSourcefv public="1" set="method" line="269" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getSourcefv>
		<getSourcei public="1" set="method" line="273" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getSourcei>
		<getSource3i public="1" set="method" line="277" static="1"><f a="source:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getSource3i>
		<getSourceiv public="1" set="method" line="281" static="1"><f a="source:param:?count" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getSourceiv>
		<sourcePlayv public="1" set="method" line="287" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourcePlayv>
		<sourceStopv public="1" set="method" line="291" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceStopv>
		<sourceRewindv public="1" set="method" line="295" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceRewindv>
		<sourcePausev public="1" set="method" line="299" static="1"><f a="sources">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourcePausev>
		<sourcePlay public="1" set="method" line="303" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourcePlay>
		<sourceStop public="1" set="method" line="307" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourceStop>
		<sourceRewind public="1" set="method" line="311" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourceRewind>
		<sourcePause public="1" set="method" line="315" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></sourcePause>
		<sourceQueueBuffers public="1" set="method" line="319" static="1"><f a="source:nb:buffers">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></sourceQueueBuffers>
		<sourceUnqueueBuffers public="1" set="method" line="323" static="1"><f a="source:nb">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></sourceUnqueueBuffers>
		<genBuffers public="1" set="method" line="329" static="1"><f a="n">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></genBuffers>
		<deleteBuffers public="1" set="method" line="333" static="1"><f a="buffers">
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></deleteBuffers>
		<isBuffer public="1" set="method" line="337" static="1"><f a="buffer">
	<x path="Int"/>
	<x path="Bool"/>
</f></isBuffer>
		<bufferData public="1" set="method" line="343" static="1"><f a="buffer:format:data:size:freq">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferf public="1" set="method" line="347" static="1"><f a="buffer:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></bufferf>
		<buffer3f public="1" set="method" line="351" static="1"><f a="buffer:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></buffer3f>
		<bufferfv public="1" set="method" line="355" static="1"><f a="buffer:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<x path="Void"/>
</f></bufferfv>
		<bufferi public="1" set="method" line="359" static="1"><f a="buffer:param:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferi>
		<buffer3i public="1" set="method" line="363" static="1"><f a="buffer:param:value1:value2:value3">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></buffer3i>
		<bufferiv public="1" set="method" line="367" static="1"><f a="buffer:param:values">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></bufferiv>
		<getBufferf public="1" set="method" line="371" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></getBufferf>
		<getBuffer3f public="1" set="method" line="375" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getBuffer3f>
		<getBufferfv public="1" set="method" line="379" static="1"><f a="buffer:param:?count" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></getBufferfv>
		<getBufferi public="1" set="method" line="383" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getBufferi>
		<getBuffer3i public="1" set="method" line="387" static="1"><f a="buffer:param">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getBuffer3i>
		<getBufferiv public="1" set="method" line="391" static="1"><f a="buffer:param:?count" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getBufferiv>
		<genSource public="1" set="method" line="398" static="1"><f a=""><x path="Int"/></f></genSource>
		<deleteSource public="1" set="method" line="402" static="1"><f a="source">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteSource>
		<genBuffer public="1" set="method" line="406" static="1"><f a=""><x path="Int"/></f></genBuffer>
		<deleteBuffer public="1" set="method" line="410" static="1"><f a="buffer">
	<x path="Int"/>
	<x path="Void"/>
</f></deleteBuffer>
		<sourceQueueBuffer public="1" set="method" line="414" static="1"><f a="source:buffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sourceQueueBuffer>
		<sourceUnqueueBuffer public="1" set="method" line="418" static="1"><f a="source">
	<x path="Int"/>
	<x path="Int"/>
</f></sourceUnqueueBuffer>
		<INVALID_NAME_MEANING public="1" line="423" static="1"><c path="String"/></INVALID_NAME_MEANING>
		<INVALID_ENUM_MEANING public="1" line="424" static="1"><c path="String"/></INVALID_ENUM_MEANING>
		<INVALID_VALUE_MEANING public="1" line="425" static="1"><c path="String"/></INVALID_VALUE_MEANING>
		<INVALID_OPERATION_MEANING public="1" line="426" static="1"><c path="String"/></INVALID_OPERATION_MEANING>
		<OUT_OF_MEMORY_MEANING public="1" line="427" static="1"><c path="String"/></OUT_OF_MEMORY_MEANING>
		<getErrorMeaning public="1" set="method" line="429" static="1"><f a="error">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMeaning>
		<alhx_DopplerFactor line="443" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></alhx_DopplerFactor>
		<alhx_DopplerVelocity line="444" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></alhx_DopplerVelocity>
		<alhx_SpeedOfSound line="445" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></alhx_SpeedOfSound>
		<alhx_DistanceModel line="447" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_DistanceModel>
		<alhx_Enable line="448" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_Enable>
		<alhx_Disable line="449" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_Disable>
		<alhx_IsEnabled line="450" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_IsEnabled>
		<alhx_GetString line="451" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></alhx_GetString>
		<alhx_GetBooleanv line="452" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Bool"/></c>
</f></alhx_GetBooleanv>
		<alhx_GetIntegerv line="453" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetIntegerv>
		<alhx_GetFloatv line="454" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetFloatv>
		<alhx_GetDoublev line="455" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetDoublev>
		<alhx_GetBoolean line="456" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_GetBoolean>
		<alhx_GetInteger line="457" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetInteger>
		<alhx_GetFloat line="458" static="1"><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetFloat>
		<alhx_GetDouble line="459" static="1"><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetDouble>
		<alhx_GetError line="461" static="1"><f a=""><x path="Int"/></f></alhx_GetError>
		<alhx_IsExtensionPresent line="462" static="1"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></alhx_IsExtensionPresent>
		<alhx_GetProcAddress line="463" static="1"><unknown/></alhx_GetProcAddress>
		<alhx_GetEnumValue line="464" static="1"><f a="">
	<c path="String"/>
	<x path="Int"/>
</f></alhx_GetEnumValue>
		<alhx_Listenerf line="466" static="1"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Listenerf>
		<alhx_Listener3f line="467" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Listener3f>
		<alhx_Listenerfv line="468" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></alhx_Listenerfv>
		<alhx_Listeneri line="469" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Listeneri>
		<alhx_Listener3i line="470" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Listener3i>
		<alhx_Listeneriv line="471" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_Listeneriv>
		<alhx_GetListenerf line="473" static="1"><f a="">
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetListenerf>
		<alhx_GetListener3f line="474" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetListener3f>
		<alhx_GetListenerfv line="475" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetListenerfv>
		<alhx_GetListeneri line="476" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetListeneri>
		<alhx_GetListener3i line="477" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetListener3i>
		<alhx_GetListeneriv line="478" static="1"><f a=":">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetListeneriv>
		<alhx_GenSources line="480" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GenSources>
		<alhx_DeleteSources line="481" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_DeleteSources>
		<alhx_IsSource line="482" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_IsSource>
		<alhx_Sourcef line="484" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Sourcef>
		<alhx_Source3f line="485" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Source3f>
		<alhx_Sourcefv line="486" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></alhx_Sourcefv>
		<alhx_Sourcei line="487" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Sourcei>
		<alhx_Source3i line="488" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Source3i>
		<alhx_Sourceiv line="489" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_Sourceiv>
		<alhx_GetSourcef line="491" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetSourcef>
		<alhx_GetSource3f line="492" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetSource3f>
		<alhx_GetSourcefv line="493" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetSourcefv>
		<alhx_GetSourcei line="494" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetSourcei>
		<alhx_GetSource3i line="495" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetSource3i>
		<alhx_GetSourceiv line="496" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetSourceiv>
		<alhx_SourcePlayv line="498" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourcePlayv>
		<alhx_SourceStopv line="499" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourceStopv>
		<alhx_SourceRewindv line="500" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourceRewindv>
		<alhx_SourcePausev line="501" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourcePausev>
		<alhx_SourceQueueBuffers line="503" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_SourceQueueBuffers>
		<alhx_SourceUnqueueBuffers line="504" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_SourceUnqueueBuffers>
		<alhx_SourcePlay line="506" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourcePlay>
		<alhx_SourceStop line="507" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourceStop>
		<alhx_SourceRewind line="508" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourceRewind>
		<alhx_SourcePause line="509" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_SourcePause>
		<alhx_GenBuffers line="511" static="1"><f a="">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GenBuffers>
		<alhx_DeleteBuffers line="512" static="1"><f a=":">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_DeleteBuffers>
		<alhx_IsBuffer line="513" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></alhx_IsBuffer>
		<alhx_BufferData line="515" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_BufferData>
		<alhx_Bufferf line="517" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Bufferf>
		<alhx_Buffer3f line="518" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></alhx_Buffer3f>
		<alhx_Bufferfv line="519" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<unknown/>
</f></alhx_Bufferfv>
		<alhx_Bufferi line="520" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Bufferi>
		<alhx_Buffer3i line="521" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></alhx_Buffer3i>
		<alhx_Bufferiv line="522" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<unknown/>
</f></alhx_Bufferiv>
		<alhx_GetBufferf line="524" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></alhx_GetBufferf>
		<alhx_GetBuffer3f line="525" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetBuffer3f>
		<alhx_GetBufferfv line="526" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Float"/></c>
</f></alhx_GetBufferfv>
		<alhx_GetBufferi line="527" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></alhx_GetBufferi>
		<alhx_GetBuffer3i line="528" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetBuffer3i>
		<alhx_GetBufferiv line="529" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
	<c path="Array"><x path="Int"/></c>
</f></alhx_GetBufferiv>
		<alhx_GenSource line="533" static="1"><f a=""><x path="Int"/></f></alhx_GenSource>
		<alhx_DeleteSource line="534" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_DeleteSource>
		<alhx_GenBuffer line="535" static="1"><f a=""><x path="Int"/></f></alhx_GenBuffer>
		<alhx_DeleteBuffer line="536" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></alhx_DeleteBuffer>
	</class>
	<class path="snow.platform.native.audio.openal.ALC" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AL.hx" module="snow.platform.native.audio.openal.AL">
		<FALSE public="1" line="546" static="1"><x path="Int"/></FALSE>
		<TRUE public="1" line="547" static="1"><x path="Int"/></TRUE>
		<FREQUENCY public="1" line="548" static="1"><x path="Int"/></FREQUENCY>
		<REFRESH public="1" line="549" static="1"><x path="Int"/></REFRESH>
		<SYNC public="1" line="550" static="1"><x path="Int"/></SYNC>
		<MONO_SOURCES public="1" line="551" static="1"><x path="Int"/></MONO_SOURCES>
		<STEREO_SOURCES public="1" line="552" static="1"><x path="Int"/></STEREO_SOURCES>
		<NO_ERROR public="1" line="553" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_DEVICE public="1" line="554" static="1"><x path="Int"/></INVALID_DEVICE>
		<INVALID_CONTEXT public="1" line="555" static="1"><x path="Int"/></INVALID_CONTEXT>
		<INVALID_ENUM public="1" line="556" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" line="557" static="1"><x path="Int"/></INVALID_VALUE>
		<OUT_OF_MEMORY public="1" line="558" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<ATTRIBUTES_SIZE public="1" line="559" static="1"><x path="Int"/></ATTRIBUTES_SIZE>
		<ALL_ATTRIBUTES public="1" line="560" static="1"><x path="Int"/></ALL_ATTRIBUTES>
		<DEFAULT_DEVICE_SPECIFIER public="1" line="561" static="1"><x path="Int"/></DEFAULT_DEVICE_SPECIFIER>
		<DEVICE_SPECIFIER public="1" line="562" static="1"><x path="Int"/></DEVICE_SPECIFIER>
		<EXTENSIONS public="1" line="563" static="1"><x path="Int"/></EXTENSIONS>
		<ENUMERATE_ALL_EXT public="1" line="565" static="1"><x path="Int"/></ENUMERATE_ALL_EXT>
		<DEFAULT_ALL_DEVICES_SPECIFIER public="1" line="566" static="1"><x path="Int"/></DEFAULT_ALL_DEVICES_SPECIFIER>
		<ALL_DEVICES_SPECIFIER public="1" line="567" static="1"><x path="Int"/></ALL_DEVICES_SPECIFIER>
		<createContext public="1" set="method" line="571" static="1"><f a="device:?attrlist" v=":null">
	<x path="snow.platform.native.audio.openal.Device"/>
	<c path="Array"><x path="Int"/></c>
	<x path="snow.platform.native.audio.openal.Context"/>
</f></createContext>
		<makeContextCurrent public="1" set="method" line="575" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Bool"/>
</f></makeContextCurrent>
		<processContext public="1" set="method" line="579" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Void"/>
</f></processContext>
		<suspendContext public="1" set="method" line="583" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Void"/>
</f></suspendContext>
		<destroyContext public="1" set="method" line="587" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Void"/>
</f></destroyContext>
		<getCurrentContext public="1" set="method" line="591" static="1"><f a=""><x path="snow.platform.native.audio.openal.Context"/></f></getCurrentContext>
		<getContextsDevice public="1" set="method" line="595" static="1"><f a="context">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></getContextsDevice>
		<openDevice public="1" set="method" line="602" static="1"><f a="?devicename" v="null">
	<c path="String"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></openDevice>
		<closeDevice public="1" set="method" line="606" static="1"><f a="device">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Bool"/>
</f></closeDevice>
		<getError public="1" set="method" line="610" static="1"><f a="device">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
</f></getError>
		<getString public="1" set="method" line="614" static="1"><f a="device:param">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<getIntegerv public="1" set="method" line="618" static="1"><f a="device:param:size">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></getIntegerv>
		<INVALID_DEVICE_MEANING public="1" line="624" static="1"><c path="String"/></INVALID_DEVICE_MEANING>
		<INVALID_CONTEXT_MEANING public="1" line="625" static="1"><c path="String"/></INVALID_CONTEXT_MEANING>
		<INVALID_ENUM_MEANING public="1" line="626" static="1"><c path="String"/></INVALID_ENUM_MEANING>
		<INVALID_VALUE_MEANING public="1" line="627" static="1"><c path="String"/></INVALID_VALUE_MEANING>
		<OUT_OF_MEMORY_MEANING public="1" line="628" static="1"><c path="String"/></OUT_OF_MEMORY_MEANING>
		<getErrorMeaning public="1" set="method" line="630" static="1"><f a="error">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMeaning>
		<alhx_alcCreateContext line="644" static="1"><f a=":">
	<x path="snow.platform.native.audio.openal.Device"/>
	<c path="Array"><x path="Int"/></c>
	<x path="snow.platform.native.audio.openal.Context"/>
</f></alhx_alcCreateContext>
		<alhx_alcMakeContextCurrent line="645" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="Bool"/>
</f></alhx_alcMakeContextCurrent>
		<alhx_alcProcessContext line="646" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<unknown/>
</f></alhx_alcProcessContext>
		<alhx_alcSuspendContext line="647" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<unknown/>
</f></alhx_alcSuspendContext>
		<alhx_alcDestroyContext line="648" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<unknown/>
</f></alhx_alcDestroyContext>
		<alhx_alcGetCurrentContext line="649" static="1"><f a=""><x path="snow.platform.native.audio.openal.Context"/></f></alhx_alcGetCurrentContext>
		<alhx_alcGetContextsDevice line="650" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Context"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></alhx_alcGetContextsDevice>
		<alhx_alcOpenDevice line="652" static="1"><f a="">
	<c path="String"/>
	<x path="snow.platform.native.audio.openal.Device"/>
</f></alhx_alcOpenDevice>
		<alhx_alcCloseDevice line="653" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Bool"/>
</f></alhx_alcCloseDevice>
		<alhx_alcGetError line="655" static="1"><f a="">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
</f></alhx_alcGetError>
		<alhx_alcGetString line="656" static="1"><f a=":">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<c path="String"/>
</f></alhx_alcGetString>
		<alhx_alcGetIntegerv line="657" static="1"><f a="::">
	<x path="snow.platform.native.audio.openal.Device"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></alhx_alcGetIntegerv>
	</class>
	<class path="snow.platform.native.audio.openal.AudioSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/AudioSystem.hx">
		<extends path="snow.platform.native.audio.AudioSystem"/>
		<device><t path="snow.audio.openal.Device"/></device>
		<context><t path="snow.audio.openal.Context"/></context>
		<init public="1" set="method" line="24" override="1"><f a=""><x path="Void"/></f></init>
		<destroy public="1" set="method" line="47" override="1"><f a=""><x path="Void"/></f></destroy>
		<suspend public="1" set="method" line="57" override="1"><f a=""><x path="Void"/></f></suspend>
		<resume public="1" set="method" line="66" override="1"><f a=""><x path="Void"/></f></resume>
		<new public="1" set="method" line="19"><f a="_manager:_lib">
	<c path="snow.audio.Audio"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Internal audio system implementation for OpenAL, interact with this system through `snow.Audio`, not directly</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.audio.openal.OpenALHelper" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/OpenALHelper.hx">
		<default_source_setup public="1" set="method" line="17" static="1">
			<f a="source">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set up a source using default values for PITCH, GAIN, POSITION, VELOCITY, and LOOPING</haxe_doc>
		</default_source_setup>
		<determine_format public="1" set="method" line="32" static="1">
			<f a="_info">
				<t path="snow.types.AudioInfo"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the OpenAL format of an `AudioInfo` instance, such as AL.FORMAT_MONO16 or AL.FORMAT_STEREO16</haxe_doc>
		</determine_format>
		<haxe_doc>Internal helper class for interaction with OpenAL.</haxe_doc>
		<meta>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.audio.openal.SoundStream" params="" file="/Users/sven/dev/snow/snow/platform/native/audio/openal/SoundStream.hx">
		<extends path="snow.platform.native.audio.SoundStream"/>
		<half_pi line="338" static="1"><x path="Float"/></half_pi>
		<buffers public="1">
			<c path="Array"><x path="Int"/></c>
			<haxe_doc>the sound buffer names</haxe_doc>
		</buffers>
		<buffers_left public="1">
			<x path="Int"/>
			<haxe_doc>remaining buffers to play</haxe_doc>
		</buffers_left>
		<set_info set="method" line="37" override="1"><f a="_info">
	<t path="snow.types.AudioInfo"/>
	<t path="snow.types.AudioInfo"/>
</f></set_info>
		<fill_buffer set="method" line="105"><f a="_buffer">
	<x path="Int"/>
	<t path="snow.types.AudioDataBlob"/>
</f></fill_buffer>
		<init_queue set="method" line="121"><f a="?_buffer_start" v="-1">
	<x path="Int"/>
	<x path="Void"/>
</f></init_queue>
		<flush_queue set="method" line="140"><f a=""><x path="Void"/></f></flush_queue>
		<update_stream set="method" line="153"><f a=""><x path="Bool"/></f></update_stream>
		<internal_update public="1" set="method" line="227" override="1"><f a=""><x path="Void"/></f></internal_update>
		<internal_pause public="1" set="method" line="241" override="1"><f a=""><x path="Void"/></f></internal_pause>
		<internal_play public="1" set="method" line="249" override="1"><f a=""><x path="Void"/></f></internal_play>
		<play public="1" set="method" line="262" override="1"><f a=""><x path="Void"/></f></play>
		<loop public="1" set="method" line="278" override="1"><f a=""><x path="Void"/></f></loop>
		<pause public="1" set="method" line="293" override="1"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="306" override="1"><f a=""><x path="Void"/></f></stop>
		<destroy public="1" set="method" line="319" override="1"><f a=""><x path="Void"/></f></destroy>
		<current_time><x path="Float"/></current_time>
		<get_position_bytes set="method" line="342" override="1"><f a=""><x path="Int"/></f></get_position_bytes>
		<get_position set="method" line="348" override="1"><f a=""><x path="Float"/></f></get_position>
		<set_pan set="method" line="357" override="1"><f a="_pan">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pan>
		<set_pitch set="method" line="365" override="1"><f a="_pitch">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pitch>
		<set_volume set="method" line="373" override="1"><f a="_volume">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<set_position_bytes set="method" line="381" override="1"><f a="_position_bytes">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position_bytes>
		<set_looping set="method" line="389" override="1"><f a="_looping">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_looping>
		<set_position set="method" line="395" override="1"><f a="_position">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<new public="1" set="method" line="27"><f a="_manager:_name">
	<c path="snow.audio.Audio"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The openal specific implementation of SoundStream</haxe_doc>
		<meta>
			<m n=":noCompletion"/>
			<m n=":log_as"><e>"audio"</e></m>
		</meta>
	</class>
	<class path="snow.platform.native.input.InputSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/input/InputSystem.hx">
		<extends path="snow.input.InputSystemBinding"/>
		<snow_input_text_start line="63" static="1"><f a=""><unknown/></f></snow_input_text_start>
		<snow_input_text_stop line="64" static="1"><f a=""><unknown/></f></snow_input_text_stop>
		<snow_input_text_rect line="65" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_input_text_rect>
		<snow_gamepad_open line="67" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gamepad_open>
		<snow_gamepad_close line="68" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gamepad_close>
		<init public="1" set="method" line="19" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="22" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="25" override="1"><f a=""><x path="Void"/></f></destroy>
		<listen public="1" set="method" line="28" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</listen>
		<unlisten public="1" set="method" line="32" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</unlisten>
		<on_event public="1" set="method" line="36" override="1"><f a="_event">
	<t path="snow.types.InputEvent"/>
	<x path="Void"/>
</f></on_event>
		<text_input_start public="1" set="method" line="41" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Start a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_start>
		<text_input_stop public="1" set="method" line="46" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>End a system text input state, this includes soft keyboard on mobile. on some platforms like web this does nothing (yet?)</haxe_doc>
		</text_input_stop>
		<text_input_rect public="1" set="method" line="51" override="1">
			<f a="x:y:w:h">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>In a system text input state, this determines the area that is accepting input.</haxe_doc>
		</text_input_rect>
		<gamepad_add public="1" set="method" line="55" override="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></gamepad_add>
		<gamepad_remove public="1" set="method" line="59" override="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></gamepad_remove>
		<new public="1" set="method" line="12">
			<f a="_manager:_lib">
				<c path="snow.input.Input"/>
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.input.sdl.InputSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx">
		<extends path="snow.platform.native.input.InputSystem"/>
		<init public="1" set="method" line="11" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="17" override="1"><f a=""><x path="Void"/></f></destroy>
		<mod_state_from_event set="method" line="21">
			<f a="event">
				<t path="snow.types.InputEvent"/>
				<t path="snow.types.ModState"/>
			</f>
			<haxe_doc>Helper to return a `ModState` (shift, ctrl etc) from a given `InputEvent`</haxe_doc>
		</mod_state_from_event>
		<on_event public="1" set="method" line="70" override="1"><f a="_event">
	<t path="snow.types.InputEvent"/>
	<x path="Void"/>
</f></on_event>
		<new public="1" set="method" line="8"><f a="_manager:_lib">
	<c path="snow.input.Input"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Internal input system, concrete SDL implementation. Accessed through `app.input`, not directly</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<abstract path="snow.platform.native.input.sdl.KeyEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.platform.native.input.sdl._InputSystem.KeyEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
	<down public="1" get="inline" set="null" line="279" static="1">
		<x path="snow.platform.native.input.sdl.KeyEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A key down event</haxe_doc>
	</down>
	<up public="1" get="inline" set="null" line="281" static="1">
		<x path="snow.platform.native.input.sdl.KeyEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A key up event</haxe_doc>
	</up>
	<textedit public="1" get="inline" set="null" line="283" static="1">
		<x path="snow.platform.native.input.sdl.KeyEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A text input text edit event</haxe_doc>
	</textedit>
	<textinput public="1" get="inline" set="null" line="285" static="1">
		<x path="snow.platform.native.input.sdl.KeyEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A text input typing event</haxe_doc>
	</textinput>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.input.sdl._InputSystem.KeyEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
		<down public="1" get="inline" set="null" line="279" static="1">
			<x path="snow.platform.native.input.sdl.KeyEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A key down event</haxe_doc>
		</down>
		<up public="1" get="inline" set="null" line="281" static="1">
			<x path="snow.platform.native.input.sdl.KeyEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A key up event</haxe_doc>
		</up>
		<textedit public="1" get="inline" set="null" line="283" static="1">
			<x path="snow.platform.native.input.sdl.KeyEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A text input text edit event</haxe_doc>
		</textedit>
		<textinput public="1" get="inline" set="null" line="285" static="1">
			<x path="snow.platform.native.input.sdl.KeyEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A text input typing event</haxe_doc>
		</textinput>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.platform.native.input.sdl.ControllerEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.platform.native.input.sdl._InputSystem.ControllerEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
	<axis public="1" get="inline" set="null" line="292" static="1">
		<x path="snow.platform.native.input.sdl.ControllerEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>a gamepad axis movement event</haxe_doc>
	</axis>
	<button_down public="1" get="inline" set="null" line="294" static="1">
		<x path="snow.platform.native.input.sdl.ControllerEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>a gamepad button pressed event</haxe_doc>
	</button_down>
	<button_up public="1" get="inline" set="null" line="296" static="1">
		<x path="snow.platform.native.input.sdl.ControllerEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>a gamepad button released event</haxe_doc>
	</button_up>
	<added public="1" get="inline" set="null" line="298" static="1">
		<x path="snow.platform.native.input.sdl.ControllerEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>a gamepad connected event</haxe_doc>
	</added>
	<removed public="1" get="inline" set="null" line="300" static="1">
		<x path="snow.platform.native.input.sdl.ControllerEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>a gamepad disconnected event</haxe_doc>
	</removed>
	<remapped public="1" get="inline" set="null" line="302" static="1">
		<x path="snow.platform.native.input.sdl.ControllerEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>a gamepad remapped event</haxe_doc>
	</remapped>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.input.sdl._InputSystem.ControllerEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
		<axis public="1" get="inline" set="null" line="292" static="1">
			<x path="snow.platform.native.input.sdl.ControllerEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>a gamepad axis movement event</haxe_doc>
		</axis>
		<button_down public="1" get="inline" set="null" line="294" static="1">
			<x path="snow.platform.native.input.sdl.ControllerEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>a gamepad button pressed event</haxe_doc>
		</button_down>
		<button_up public="1" get="inline" set="null" line="296" static="1">
			<x path="snow.platform.native.input.sdl.ControllerEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>a gamepad button released event</haxe_doc>
		</button_up>
		<added public="1" get="inline" set="null" line="298" static="1">
			<x path="snow.platform.native.input.sdl.ControllerEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>a gamepad connected event</haxe_doc>
		</added>
		<removed public="1" get="inline" set="null" line="300" static="1">
			<x path="snow.platform.native.input.sdl.ControllerEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>a gamepad disconnected event</haxe_doc>
		</removed>
		<remapped public="1" get="inline" set="null" line="302" static="1">
			<x path="snow.platform.native.input.sdl.ControllerEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>a gamepad remapped event</haxe_doc>
		</remapped>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.platform.native.input.sdl.TouchEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.platform.native.input.sdl._InputSystem.TouchEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
	<down public="1" get="inline" set="null" line="309" static="1">
		<x path="snow.platform.native.input.sdl.TouchEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A touch has begun</haxe_doc>
	</down>
	<up public="1" get="inline" set="null" line="311" static="1">
		<x path="snow.platform.native.input.sdl.TouchEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A touch has ended</haxe_doc>
	</up>
	<move public="1" get="inline" set="null" line="313" static="1">
		<x path="snow.platform.native.input.sdl.TouchEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A touch is moving</haxe_doc>
	</move>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.input.sdl._InputSystem.TouchEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
		<down public="1" get="inline" set="null" line="309" static="1">
			<x path="snow.platform.native.input.sdl.TouchEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A touch has begun</haxe_doc>
		</down>
		<up public="1" get="inline" set="null" line="311" static="1">
			<x path="snow.platform.native.input.sdl.TouchEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A touch has ended</haxe_doc>
		</up>
		<move public="1" get="inline" set="null" line="313" static="1">
			<x path="snow.platform.native.input.sdl.TouchEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A touch is moving</haxe_doc>
		</move>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.platform.native.input.sdl.MouseEventType" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.platform.native.input.sdl._InputSystem.MouseEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
	<move public="1" get="inline" set="null" line="320" static="1">
		<x path="snow.platform.native.input.sdl.MouseEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A mouse moved event</haxe_doc>
	</move>
	<down public="1" get="inline" set="null" line="322" static="1">
		<x path="snow.platform.native.input.sdl.MouseEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A mouse button pressed event</haxe_doc>
	</down>
	<up public="1" get="inline" set="null" line="324" static="1">
		<x path="snow.platform.native.input.sdl.MouseEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A mouse button released event</haxe_doc>
	</up>
	<wheel public="1" get="inline" set="null" line="326" static="1">
		<x path="snow.platform.native.input.sdl.MouseEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A mouse wheel or scroll event</haxe_doc>
	</wheel>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.input.sdl._InputSystem.MouseEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
		<move public="1" get="inline" set="null" line="320" static="1">
			<x path="snow.platform.native.input.sdl.MouseEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A mouse moved event</haxe_doc>
		</move>
		<down public="1" get="inline" set="null" line="322" static="1">
			<x path="snow.platform.native.input.sdl.MouseEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A mouse button pressed event</haxe_doc>
		</down>
		<up public="1" get="inline" set="null" line="324" static="1">
			<x path="snow.platform.native.input.sdl.MouseEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A mouse button released event</haxe_doc>
		</up>
		<wheel public="1" get="inline" set="null" line="326" static="1">
			<x path="snow.platform.native.input.sdl.MouseEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A mouse wheel or scroll event</haxe_doc>
		</wheel>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.platform.native.input.sdl.ModValue" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" module="snow.platform.native.input.sdl.InputSystem">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.platform.native.input.sdl._InputSystem.ModValue_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
	<NONE public="1" get="inline" set="null" line="332" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NONE>
	<LSHIFT public="1" get="inline" set="null" line="333" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LSHIFT>
	<RSHIFT public="1" get="inline" set="null" line="334" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RSHIFT>
	<LCTRL public="1" get="inline" set="null" line="335" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LCTRL>
	<RCTRL public="1" get="inline" set="null" line="336" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RCTRL>
	<LALT public="1" get="inline" set="null" line="337" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LALT>
	<RALT public="1" get="inline" set="null" line="338" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RALT>
	<LMETA public="1" get="inline" set="null" line="339" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LMETA>
	<RMETA public="1" get="inline" set="null" line="340" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RMETA>
	<NUM public="1" get="inline" set="null" line="341" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NUM>
	<CAPS public="1" get="inline" set="null" line="342" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CAPS>
	<MODE public="1" get="inline" set="null" line="343" static="1">
		<x path="snow.platform.native.input.sdl.ModValue"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MODE>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.platform.native.input.sdl._InputSystem.ModValue_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/input/sdl/InputSystem.hx" private="1" module="snow.platform.native.input.sdl.InputSystem">
		<NONE public="1" get="inline" set="null" line="332" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NONE>
		<LSHIFT public="1" get="inline" set="null" line="333" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LSHIFT>
		<RSHIFT public="1" get="inline" set="null" line="334" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RSHIFT>
		<LCTRL public="1" get="inline" set="null" line="335" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LCTRL>
		<RCTRL public="1" get="inline" set="null" line="336" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RCTRL>
		<LALT public="1" get="inline" set="null" line="337" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LALT>
		<RALT public="1" get="inline" set="null" line="338" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RALT>
		<LMETA public="1" get="inline" set="null" line="339" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LMETA>
		<RMETA public="1" get="inline" set="null" line="340" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RMETA>
		<NUM public="1" get="inline" set="null" line="341" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NUM>
		<CAPS public="1" get="inline" set="null" line="342" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CAPS>
		<MODE public="1" get="inline" set="null" line="343" static="1">
			<x path="snow.platform.native.input.sdl.ModValue"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MODE>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="snow.platform.native.io.IOSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/io/IOSystem.hx">
		<extends path="snow.io.IOSystemBinding"/>
		<isAbsolute set="method" line="123" static="1"><f a="path">
	<c path="String"/>
	<x path="Bool"/>
</f></isAbsolute>
		<resolve set="method" line="130" static="1"><f a="_path">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<snow_io_url_open line="146" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></snow_io_url_open>
		<snow_io_add_watch line="150" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></snow_io_add_watch>
		<snow_io_remove_watch line="151" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></snow_io_remove_watch>
		<snow_io_dialog_open line="153" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><t path="snow.types.FileFilter"/></c>
	<c path="String"/>
</f></snow_io_dialog_open>
		<snow_io_dialog_save line="154" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><t path="snow.types.FileFilter"/></c>
	<c path="String"/>
</f></snow_io_dialog_save>
		<snow_io_dialog_folder line="155" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></snow_io_dialog_folder>
		<url_open public="1" set="method" line="30" override="1">
			<f a="_url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Opens the specified url in the default browser</haxe_doc>
		</url_open>
		<watch_add public="1" set="method" line="46" override="1">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to add a directory to watch for file change notifications.
                This is for directories only. Children files + sub folders children files will notify of change.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_add>
		<watch_remove public="1" set="method" line="56" override="1">
			<f a="_path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Call this to remove a watched directory.
                supports:`windows` `mac` `linux` only</haxe_doc>
		</watch_remove>
		<dialog_open public="1" set="method" line="69" override="1">
			<f a="?_title:?_filters" v="'Select file':null">
				<c path="String"/>
				<c path="Array"><t path="snow.types.FileFilter"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file open dialog.
                Returns a blank string if they cancel or any error occurs.
                supports: `windows` `mac` `linux`</haxe_doc>
		</dialog_open>
		<dialog_save public="1" set="method" line="83" override="1">
			<f a="?_title:?_filter" v="'Save file':null">
				<c path="String"/>
				<t path="snow.types.FileFilter"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform file save dialog.
                    Returns a blank string if they cancel or any error occurs.
                    supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_save>
		<dialog_folder public="1" set="method" line="101" override="1">
			<f a="?_title" v="'Select folder'">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Call this to open a native platform folder select dialog.
                    Returns a blank string if they cancel or any error occurs.
                    supports:`windows` `mac` `linux`</haxe_doc>
		</dialog_folder>
		<init public="1" set="method" line="111" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</init>
		<process public="1" set="method" line="113" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</process>
		<destroy public="1" set="method" line="115" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</destroy>
		<on_event public="1" set="method" line="117" override="1">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</on_event>
		<new public="1" set="method" line="20">
			<f a="_manager:_lib">
				<c path="snow.io.IO"/>
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</new>
		<haxe_doc>This class is a low level cross platform IO helper.
        If you want file access, use `Assets` instead, unless really required.</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<typedef path="snow.platform.native.render.opengl.GLActiveInfo" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><a>
	<type><x path="Int"/></type>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="snow.platform.native.render.opengl.GLShaderPrecisionFormat" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><a>
	<rangeMin><x path="Int"/></rangeMin>
	<rangeMax><x path="Int"/></rangeMax>
	<precision><x path="Int"/></precision>
</a></typedef>
	<typedef path="snow.platform.native.render.opengl.GLContextAttributes" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><a>
	<stencil><x path="Bool"/></stencil>
	<preserveDrawingBuffer><x path="Bool"/></preserveDrawingBuffer>
	<premultipliedAlpha><x path="Bool"/></premultipliedAlpha>
	<depth><x path="Bool"/></depth>
	<antialias><x path="Bool"/></antialias>
	<alpha><x path="Bool"/></alpha>
</a></typedef>
	<typedef path="snow.platform.native.render.opengl.GLUniformLocation" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL"><x path="Int"/></typedef>
	<class path="snow.platform.native.render.opengl.GLObject" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<id public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The native GL handle/id. read only</haxe_doc>
		</id>
		<invalidated public="1" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The invalidated state. read only</haxe_doc>
		</invalidated>
		<toString set="method" line="56"><f a=""><c path="String"/></f></toString>
		<set_invalidated set="method" line="62"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_invalidated>
		<new public="1" set="method" line="50"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.render.opengl.GLBuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="73" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="71"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.render.opengl.GLFBO" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="82" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="80"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.render.opengl.GLRBO" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="90" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="88"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="snow.platform.native.render.opengl.GLFramebuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<from>
			<icast field="fromInt"><x path="Int"/></icast>
			<icast field="fromDynamic"><d/></icast>
		</from>
		<this><c path="snow.platform.native.render.opengl.GLFBO"/></this>
		<impl><class path="snow.platform.native.render.opengl._GL.GLFramebuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
	<id public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</id>
	<invalidated public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</invalidated>
	<_new public="1" get="inline" set="null" line="102" static="1">
		<f a="_id">
			<x path="Int"/>
			<c path="snow.platform.native.render.opengl.GLFBO"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_id get="inline" set="null" line="106" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLFBO"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_id>
	<get_invalidated get="inline" set="null" line="110" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLFBO"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_invalidated>
	<set_invalidated get="inline" set="null" line="114" static="1">
		<f a="this:_invalidated">
			<c path="snow.platform.native.render.opengl.GLFBO"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_invalidated>
	<fromInt public="1" get="inline" set="null" line="119" static="1">
		<f a="_id">
			<x path="Int"/>
			<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromInt>
	<fromDynamic public="1" get="inline" set="null" line="124" static="1">
		<f a="_id">
			<d/>
			<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromDynamic>
</class></impl>
	</abstract>
	<class path="snow.platform.native.render.opengl._GL.GLFramebuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
		<id public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</id>
		<invalidated public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</invalidated>
		<_new public="1" get="inline" set="null" line="102" static="1">
			<f a="_id">
				<x path="Int"/>
				<c path="snow.platform.native.render.opengl.GLFBO"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_id get="inline" set="null" line="106" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLFBO"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_id>
		<get_invalidated get="inline" set="null" line="110" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLFBO"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_invalidated>
		<set_invalidated get="inline" set="null" line="114" static="1">
			<f a="this:_invalidated">
				<c path="snow.platform.native.render.opengl.GLFBO"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_invalidated>
		<fromInt public="1" get="inline" set="null" line="119" static="1">
			<f a="_id">
				<x path="Int"/>
				<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromInt>
		<fromDynamic public="1" get="inline" set="null" line="124" static="1">
			<f a="_id">
				<d/>
				<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromDynamic>
	</class>
	<abstract path="snow.platform.native.render.opengl.GLRenderbuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<from>
			<icast field="fromInt"><x path="Int"/></icast>
			<icast field="fromDynamic"><d/></icast>
		</from>
		<this><c path="snow.platform.native.render.opengl.GLRBO"/></this>
		<impl><class path="snow.platform.native.render.opengl._GL.GLRenderbuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
	<id public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</id>
	<invalidated public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</invalidated>
	<_new public="1" get="inline" set="null" line="135" static="1">
		<f a="_id">
			<x path="Int"/>
			<c path="snow.platform.native.render.opengl.GLRBO"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_id get="inline" set="null" line="139" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLRBO"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_id>
	<get_invalidated get="inline" set="null" line="143" static="1">
		<f a="this">
			<c path="snow.platform.native.render.opengl.GLRBO"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_invalidated>
	<set_invalidated get="inline" set="null" line="147" static="1">
		<f a="this:_invalidated">
			<c path="snow.platform.native.render.opengl.GLRBO"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_invalidated>
	<fromInt public="1" get="inline" set="null" line="152" static="1">
		<f a="_id">
			<x path="Int"/>
			<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromInt>
	<fromDynamic public="1" get="inline" set="null" line="157" static="1">
		<f a="_id">
			<d/>
			<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromDynamic>
</class></impl>
	</abstract>
	<class path="snow.platform.native.render.opengl._GL.GLRenderbuffer_Impl_" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" private="1" module="snow.platform.native.render.opengl.GL">
		<id public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</id>
		<invalidated public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</invalidated>
		<_new public="1" get="inline" set="null" line="135" static="1">
			<f a="_id">
				<x path="Int"/>
				<c path="snow.platform.native.render.opengl.GLRBO"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_id get="inline" set="null" line="139" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLRBO"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_id>
		<get_invalidated get="inline" set="null" line="143" static="1">
			<f a="this">
				<c path="snow.platform.native.render.opengl.GLRBO"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_invalidated>
		<set_invalidated get="inline" set="null" line="147" static="1">
			<f a="this:_invalidated">
				<c path="snow.platform.native.render.opengl.GLRBO"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_invalidated>
		<fromInt public="1" get="inline" set="null" line="152" static="1">
			<f a="_id">
				<x path="Int"/>
				<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromInt>
		<fromDynamic public="1" get="inline" set="null" line="157" static="1">
			<f a="_id">
				<d/>
				<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromDynamic>
	</class>
	<class path="snow.platform.native.render.opengl.GLShader" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="166" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="164"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.render.opengl.GLTexture" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<toString set="method" line="175" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="173"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.render.opengl.GLProgram" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL">
		<extends path="snow.platform.native.render.opengl.GLObject"/>
		<shaders public="1"><c path="Array"><c path="snow.platform.native.render.opengl.GLShader"/></c></shaders>
		<toString set="method" line="193" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="186"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.render.opengl.GLN" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx" module="snow.platform.native.render.opengl.GL" extern="1">
		<clear public="1" set="method" static="1">
			<f a="mask">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"glClear"</e></m></meta>
		</clear>
		<meta><m n=":include"><e>"render/opengl/snow_opengl"</e></m></meta>
	</class>
	<class path="snow.platform.native.render.opengl.GL" params="" file="/Users/sven/dev/snow/snow/platform/native/render/opengl/GL.hx">
		<DEPTH_BUFFER_BIT public="1" get="inline" set="null" line="213" static="1"><x path="Int"/></DEPTH_BUFFER_BIT>
		<STENCIL_BUFFER_BIT public="1" get="inline" set="null" line="214" static="1"><x path="Int"/></STENCIL_BUFFER_BIT>
		<COLOR_BUFFER_BIT public="1" get="inline" set="null" line="215" static="1"><x path="Int"/></COLOR_BUFFER_BIT>
		<POINTS public="1" get="inline" set="null" line="218" static="1"><x path="Int"/></POINTS>
		<LINES public="1" get="inline" set="null" line="219" static="1"><x path="Int"/></LINES>
		<LINE_LOOP public="1" get="inline" set="null" line="220" static="1"><x path="Int"/></LINE_LOOP>
		<LINE_STRIP public="1" get="inline" set="null" line="221" static="1"><x path="Int"/></LINE_STRIP>
		<TRIANGLES public="1" get="inline" set="null" line="222" static="1"><x path="Int"/></TRIANGLES>
		<TRIANGLE_STRIP public="1" get="inline" set="null" line="223" static="1"><x path="Int"/></TRIANGLE_STRIP>
		<TRIANGLE_FAN public="1" get="inline" set="null" line="224" static="1"><x path="Int"/></TRIANGLE_FAN>
		<ZERO public="1" get="inline" set="null" line="236" static="1"><x path="Int"/></ZERO>
		<ONE public="1" get="inline" set="null" line="237" static="1"><x path="Int"/></ONE>
		<SRC_COLOR public="1" get="inline" set="null" line="238" static="1"><x path="Int"/></SRC_COLOR>
		<ONE_MINUS_SRC_COLOR public="1" get="inline" set="null" line="239" static="1"><x path="Int"/></ONE_MINUS_SRC_COLOR>
		<SRC_ALPHA public="1" get="inline" set="null" line="240" static="1"><x path="Int"/></SRC_ALPHA>
		<ONE_MINUS_SRC_ALPHA public="1" get="inline" set="null" line="241" static="1"><x path="Int"/></ONE_MINUS_SRC_ALPHA>
		<DST_ALPHA public="1" get="inline" set="null" line="242" static="1"><x path="Int"/></DST_ALPHA>
		<ONE_MINUS_DST_ALPHA public="1" get="inline" set="null" line="243" static="1"><x path="Int"/></ONE_MINUS_DST_ALPHA>
		<DST_COLOR public="1" get="inline" set="null" line="248" static="1"><x path="Int"/></DST_COLOR>
		<ONE_MINUS_DST_COLOR public="1" get="inline" set="null" line="249" static="1"><x path="Int"/></ONE_MINUS_DST_COLOR>
		<SRC_ALPHA_SATURATE public="1" get="inline" set="null" line="250" static="1"><x path="Int"/></SRC_ALPHA_SATURATE>
		<FUNC_ADD public="1" get="inline" set="null" line="256" static="1"><x path="Int"/></FUNC_ADD>
		<BLEND_EQUATION public="1" get="inline" set="null" line="257" static="1"><x path="Int"/></BLEND_EQUATION>
		<BLEND_EQUATION_RGB public="1" get="inline" set="null" line="258" static="1"><x path="Int"/></BLEND_EQUATION_RGB>
		<BLEND_EQUATION_ALPHA public="1" get="inline" set="null" line="259" static="1"><x path="Int"/></BLEND_EQUATION_ALPHA>
		<FUNC_SUBTRACT public="1" get="inline" set="null" line="262" static="1"><x path="Int"/></FUNC_SUBTRACT>
		<FUNC_REVERSE_SUBTRACT public="1" get="inline" set="null" line="263" static="1"><x path="Int"/></FUNC_REVERSE_SUBTRACT>
		<BLEND_DST_RGB public="1" get="inline" set="null" line="266" static="1"><x path="Int"/></BLEND_DST_RGB>
		<BLEND_SRC_RGB public="1" get="inline" set="null" line="267" static="1"><x path="Int"/></BLEND_SRC_RGB>
		<BLEND_DST_ALPHA public="1" get="inline" set="null" line="268" static="1"><x path="Int"/></BLEND_DST_ALPHA>
		<BLEND_SRC_ALPHA public="1" get="inline" set="null" line="269" static="1"><x path="Int"/></BLEND_SRC_ALPHA>
		<CONSTANT_COLOR public="1" get="inline" set="null" line="270" static="1"><x path="Int"/></CONSTANT_COLOR>
		<ONE_MINUS_CONSTANT_COLOR public="1" get="inline" set="null" line="271" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_COLOR>
		<CONSTANT_ALPHA public="1" get="inline" set="null" line="272" static="1"><x path="Int"/></CONSTANT_ALPHA>
		<ONE_MINUS_CONSTANT_ALPHA public="1" get="inline" set="null" line="273" static="1"><x path="Int"/></ONE_MINUS_CONSTANT_ALPHA>
		<BLEND_COLOR public="1" get="inline" set="null" line="274" static="1"><x path="Int"/></BLEND_COLOR>
		<ARRAY_BUFFER public="1" get="inline" set="null" line="277" static="1"><x path="Int"/></ARRAY_BUFFER>
		<ELEMENT_ARRAY_BUFFER public="1" get="inline" set="null" line="278" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER>
		<ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="279" static="1"><x path="Int"/></ARRAY_BUFFER_BINDING>
		<ELEMENT_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="280" static="1"><x path="Int"/></ELEMENT_ARRAY_BUFFER_BINDING>
		<STREAM_DRAW public="1" get="inline" set="null" line="282" static="1"><x path="Int"/></STREAM_DRAW>
		<STATIC_DRAW public="1" get="inline" set="null" line="283" static="1"><x path="Int"/></STATIC_DRAW>
		<DYNAMIC_DRAW public="1" get="inline" set="null" line="284" static="1"><x path="Int"/></DYNAMIC_DRAW>
		<BUFFER_SIZE public="1" get="inline" set="null" line="286" static="1"><x path="Int"/></BUFFER_SIZE>
		<BUFFER_USAGE public="1" get="inline" set="null" line="287" static="1"><x path="Int"/></BUFFER_USAGE>
		<CURRENT_VERTEX_ATTRIB public="1" get="inline" set="null" line="289" static="1"><x path="Int"/></CURRENT_VERTEX_ATTRIB>
		<FRONT public="1" get="inline" set="null" line="292" static="1"><x path="Int"/></FRONT>
		<BACK public="1" get="inline" set="null" line="293" static="1"><x path="Int"/></BACK>
		<FRONT_AND_BACK public="1" get="inline" set="null" line="294" static="1"><x path="Int"/></FRONT_AND_BACK>
		<CULL_FACE public="1" get="inline" set="null" line="307" static="1"><x path="Int"/></CULL_FACE>
		<BLEND public="1" get="inline" set="null" line="308" static="1"><x path="Int"/></BLEND>
		<DITHER public="1" get="inline" set="null" line="309" static="1"><x path="Int"/></DITHER>
		<STENCIL_TEST public="1" get="inline" set="null" line="310" static="1"><x path="Int"/></STENCIL_TEST>
		<DEPTH_TEST public="1" get="inline" set="null" line="311" static="1"><x path="Int"/></DEPTH_TEST>
		<SCISSOR_TEST public="1" get="inline" set="null" line="312" static="1"><x path="Int"/></SCISSOR_TEST>
		<POLYGON_OFFSET_FILL public="1" get="inline" set="null" line="313" static="1"><x path="Int"/></POLYGON_OFFSET_FILL>
		<SAMPLE_ALPHA_TO_COVERAGE public="1" get="inline" set="null" line="314" static="1"><x path="Int"/></SAMPLE_ALPHA_TO_COVERAGE>
		<SAMPLE_COVERAGE public="1" get="inline" set="null" line="315" static="1"><x path="Int"/></SAMPLE_COVERAGE>
		<NO_ERROR public="1" get="inline" set="null" line="318" static="1"><x path="Int"/></NO_ERROR>
		<INVALID_ENUM public="1" get="inline" set="null" line="319" static="1"><x path="Int"/></INVALID_ENUM>
		<INVALID_VALUE public="1" get="inline" set="null" line="320" static="1"><x path="Int"/></INVALID_VALUE>
		<INVALID_OPERATION public="1" get="inline" set="null" line="321" static="1"><x path="Int"/></INVALID_OPERATION>
		<OUT_OF_MEMORY public="1" get="inline" set="null" line="322" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<CW public="1" get="inline" set="null" line="325" static="1"><x path="Int"/></CW>
		<CCW public="1" get="inline" set="null" line="326" static="1"><x path="Int"/></CCW>
		<LINE_WIDTH public="1" get="inline" set="null" line="329" static="1"><x path="Int"/></LINE_WIDTH>
		<ALIASED_POINT_SIZE_RANGE public="1" get="inline" set="null" line="330" static="1"><x path="Int"/></ALIASED_POINT_SIZE_RANGE>
		<ALIASED_LINE_WIDTH_RANGE public="1" get="inline" set="null" line="331" static="1"><x path="Int"/></ALIASED_LINE_WIDTH_RANGE>
		<CULL_FACE_MODE public="1" get="inline" set="null" line="332" static="1"><x path="Int"/></CULL_FACE_MODE>
		<FRONT_FACE public="1" get="inline" set="null" line="333" static="1"><x path="Int"/></FRONT_FACE>
		<DEPTH_RANGE public="1" get="inline" set="null" line="334" static="1"><x path="Int"/></DEPTH_RANGE>
		<DEPTH_WRITEMASK public="1" get="inline" set="null" line="335" static="1"><x path="Int"/></DEPTH_WRITEMASK>
		<DEPTH_CLEAR_VALUE public="1" get="inline" set="null" line="336" static="1"><x path="Int"/></DEPTH_CLEAR_VALUE>
		<DEPTH_FUNC public="1" get="inline" set="null" line="337" static="1"><x path="Int"/></DEPTH_FUNC>
		<STENCIL_CLEAR_VALUE public="1" get="inline" set="null" line="338" static="1"><x path="Int"/></STENCIL_CLEAR_VALUE>
		<STENCIL_FUNC public="1" get="inline" set="null" line="339" static="1"><x path="Int"/></STENCIL_FUNC>
		<STENCIL_FAIL public="1" get="inline" set="null" line="340" static="1"><x path="Int"/></STENCIL_FAIL>
		<STENCIL_PASS_DEPTH_FAIL public="1" get="inline" set="null" line="341" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_FAIL>
		<STENCIL_PASS_DEPTH_PASS public="1" get="inline" set="null" line="342" static="1"><x path="Int"/></STENCIL_PASS_DEPTH_PASS>
		<STENCIL_REF public="1" get="inline" set="null" line="343" static="1"><x path="Int"/></STENCIL_REF>
		<STENCIL_VALUE_MASK public="1" get="inline" set="null" line="344" static="1"><x path="Int"/></STENCIL_VALUE_MASK>
		<STENCIL_WRITEMASK public="1" get="inline" set="null" line="345" static="1"><x path="Int"/></STENCIL_WRITEMASK>
		<STENCIL_BACK_FUNC public="1" get="inline" set="null" line="346" static="1"><x path="Int"/></STENCIL_BACK_FUNC>
		<STENCIL_BACK_FAIL public="1" get="inline" set="null" line="347" static="1"><x path="Int"/></STENCIL_BACK_FAIL>
		<STENCIL_BACK_PASS_DEPTH_FAIL public="1" get="inline" set="null" line="348" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_FAIL>
		<STENCIL_BACK_PASS_DEPTH_PASS public="1" get="inline" set="null" line="349" static="1"><x path="Int"/></STENCIL_BACK_PASS_DEPTH_PASS>
		<STENCIL_BACK_REF public="1" get="inline" set="null" line="350" static="1"><x path="Int"/></STENCIL_BACK_REF>
		<STENCIL_BACK_VALUE_MASK public="1" get="inline" set="null" line="351" static="1"><x path="Int"/></STENCIL_BACK_VALUE_MASK>
		<STENCIL_BACK_WRITEMASK public="1" get="inline" set="null" line="352" static="1"><x path="Int"/></STENCIL_BACK_WRITEMASK>
		<VIEWPORT public="1" get="inline" set="null" line="353" static="1"><x path="Int"/></VIEWPORT>
		<SCISSOR_BOX public="1" get="inline" set="null" line="354" static="1"><x path="Int"/></SCISSOR_BOX>
		<COLOR_CLEAR_VALUE public="1" get="inline" set="null" line="356" static="1"><x path="Int"/></COLOR_CLEAR_VALUE>
		<COLOR_WRITEMASK public="1" get="inline" set="null" line="357" static="1"><x path="Int"/></COLOR_WRITEMASK>
		<UNPACK_ALIGNMENT public="1" get="inline" set="null" line="358" static="1"><x path="Int"/></UNPACK_ALIGNMENT>
		<PACK_ALIGNMENT public="1" get="inline" set="null" line="359" static="1"><x path="Int"/></PACK_ALIGNMENT>
		<MAX_TEXTURE_SIZE public="1" get="inline" set="null" line="360" static="1"><x path="Int"/></MAX_TEXTURE_SIZE>
		<MAX_VIEWPORT_DIMS public="1" get="inline" set="null" line="361" static="1"><x path="Int"/></MAX_VIEWPORT_DIMS>
		<SUBPIXEL_BITS public="1" get="inline" set="null" line="362" static="1"><x path="Int"/></SUBPIXEL_BITS>
		<RED_BITS public="1" get="inline" set="null" line="363" static="1"><x path="Int"/></RED_BITS>
		<GREEN_BITS public="1" get="inline" set="null" line="364" static="1"><x path="Int"/></GREEN_BITS>
		<BLUE_BITS public="1" get="inline" set="null" line="365" static="1"><x path="Int"/></BLUE_BITS>
		<ALPHA_BITS public="1" get="inline" set="null" line="366" static="1"><x path="Int"/></ALPHA_BITS>
		<DEPTH_BITS public="1" get="inline" set="null" line="367" static="1"><x path="Int"/></DEPTH_BITS>
		<STENCIL_BITS public="1" get="inline" set="null" line="368" static="1"><x path="Int"/></STENCIL_BITS>
		<POLYGON_OFFSET_UNITS public="1" get="inline" set="null" line="369" static="1"><x path="Int"/></POLYGON_OFFSET_UNITS>
		<POLYGON_OFFSET_FACTOR public="1" get="inline" set="null" line="371" static="1"><x path="Int"/></POLYGON_OFFSET_FACTOR>
		<TEXTURE_BINDING_2D public="1" get="inline" set="null" line="372" static="1"><x path="Int"/></TEXTURE_BINDING_2D>
		<SAMPLE_BUFFERS public="1" get="inline" set="null" line="373" static="1"><x path="Int"/></SAMPLE_BUFFERS>
		<SAMPLES public="1" get="inline" set="null" line="374" static="1"><x path="Int"/></SAMPLES>
		<SAMPLE_COVERAGE_VALUE public="1" get="inline" set="null" line="375" static="1"><x path="Int"/></SAMPLE_COVERAGE_VALUE>
		<SAMPLE_COVERAGE_INVERT public="1" get="inline" set="null" line="376" static="1"><x path="Int"/></SAMPLE_COVERAGE_INVERT>
		<COMPRESSED_TEXTURE_FORMATS public="1" get="inline" set="null" line="383" static="1"><x path="Int"/></COMPRESSED_TEXTURE_FORMATS>
		<DONT_CARE public="1" get="inline" set="null" line="386" static="1"><x path="Int"/></DONT_CARE>
		<FASTEST public="1" get="inline" set="null" line="387" static="1"><x path="Int"/></FASTEST>
		<NICEST public="1" get="inline" set="null" line="388" static="1"><x path="Int"/></NICEST>
		<GENERATE_MIPMAP_HINT public="1" get="inline" set="null" line="391" static="1"><x path="Int"/></GENERATE_MIPMAP_HINT>
		<BYTE public="1" get="inline" set="null" line="394" static="1"><x path="Int"/></BYTE>
		<UNSIGNED_BYTE public="1" get="inline" set="null" line="395" static="1"><x path="Int"/></UNSIGNED_BYTE>
		<SHORT public="1" get="inline" set="null" line="396" static="1"><x path="Int"/></SHORT>
		<UNSIGNED_SHORT public="1" get="inline" set="null" line="397" static="1"><x path="Int"/></UNSIGNED_SHORT>
		<INT public="1" get="inline" set="null" line="398" static="1"><x path="Int"/></INT>
		<UNSIGNED_INT public="1" get="inline" set="null" line="399" static="1"><x path="Int"/></UNSIGNED_INT>
		<FLOAT public="1" get="inline" set="null" line="400" static="1"><x path="Int"/></FLOAT>
		<DEPTH_COMPONENT public="1" get="inline" set="null" line="403" static="1"><x path="Int"/></DEPTH_COMPONENT>
		<ALPHA public="1" get="inline" set="null" line="404" static="1"><x path="Int"/></ALPHA>
		<RGB public="1" get="inline" set="null" line="405" static="1"><x path="Int"/></RGB>
		<RGBA public="1" get="inline" set="null" line="406" static="1"><x path="Int"/></RGBA>
		<LUMINANCE public="1" get="inline" set="null" line="407" static="1"><x path="Int"/></LUMINANCE>
		<LUMINANCE_ALPHA public="1" get="inline" set="null" line="408" static="1"><x path="Int"/></LUMINANCE_ALPHA>
		<UNSIGNED_SHORT_4_4_4_4 public="1" get="inline" set="null" line="412" static="1"><x path="Int"/></UNSIGNED_SHORT_4_4_4_4>
		<UNSIGNED_SHORT_5_5_5_1 public="1" get="inline" set="null" line="413" static="1"><x path="Int"/></UNSIGNED_SHORT_5_5_5_1>
		<UNSIGNED_SHORT_5_6_5 public="1" get="inline" set="null" line="414" static="1"><x path="Int"/></UNSIGNED_SHORT_5_6_5>
		<FRAGMENT_SHADER public="1" get="inline" set="null" line="417" static="1"><x path="Int"/></FRAGMENT_SHADER>
		<VERTEX_SHADER public="1" get="inline" set="null" line="418" static="1"><x path="Int"/></VERTEX_SHADER>
		<MAX_VERTEX_ATTRIBS public="1" get="inline" set="null" line="419" static="1"><x path="Int"/></MAX_VERTEX_ATTRIBS>
		<MAX_VERTEX_UNIFORM_VECTORS public="1" get="inline" set="null" line="420" static="1"><x path="Int"/></MAX_VERTEX_UNIFORM_VECTORS>
		<MAX_VARYING_VECTORS public="1" get="inline" set="null" line="421" static="1"><x path="Int"/></MAX_VARYING_VECTORS>
		<MAX_COMBINED_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="422" static="1"><x path="Int"/></MAX_COMBINED_TEXTURE_IMAGE_UNITS>
		<MAX_VERTEX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="423" static="1"><x path="Int"/></MAX_VERTEX_TEXTURE_IMAGE_UNITS>
		<MAX_TEXTURE_IMAGE_UNITS public="1" get="inline" set="null" line="424" static="1"><x path="Int"/></MAX_TEXTURE_IMAGE_UNITS>
		<MAX_FRAGMENT_UNIFORM_VECTORS public="1" get="inline" set="null" line="425" static="1"><x path="Int"/></MAX_FRAGMENT_UNIFORM_VECTORS>
		<SHADER_TYPE public="1" get="inline" set="null" line="426" static="1"><x path="Int"/></SHADER_TYPE>
		<DELETE_STATUS public="1" get="inline" set="null" line="427" static="1"><x path="Int"/></DELETE_STATUS>
		<LINK_STATUS public="1" get="inline" set="null" line="428" static="1"><x path="Int"/></LINK_STATUS>
		<VALIDATE_STATUS public="1" get="inline" set="null" line="429" static="1"><x path="Int"/></VALIDATE_STATUS>
		<ATTACHED_SHADERS public="1" get="inline" set="null" line="430" static="1"><x path="Int"/></ATTACHED_SHADERS>
		<ACTIVE_UNIFORMS public="1" get="inline" set="null" line="431" static="1"><x path="Int"/></ACTIVE_UNIFORMS>
		<ACTIVE_ATTRIBUTES public="1" get="inline" set="null" line="432" static="1"><x path="Int"/></ACTIVE_ATTRIBUTES>
		<SHADING_LANGUAGE_VERSION public="1" get="inline" set="null" line="433" static="1"><x path="Int"/></SHADING_LANGUAGE_VERSION>
		<CURRENT_PROGRAM public="1" get="inline" set="null" line="434" static="1"><x path="Int"/></CURRENT_PROGRAM>
		<NEVER public="1" get="inline" set="null" line="437" static="1"><x path="Int"/></NEVER>
		<LESS public="1" get="inline" set="null" line="438" static="1"><x path="Int"/></LESS>
		<EQUAL public="1" get="inline" set="null" line="439" static="1"><x path="Int"/></EQUAL>
		<LEQUAL public="1" get="inline" set="null" line="440" static="1"><x path="Int"/></LEQUAL>
		<GREATER public="1" get="inline" set="null" line="441" static="1"><x path="Int"/></GREATER>
		<NOTEQUAL public="1" get="inline" set="null" line="442" static="1"><x path="Int"/></NOTEQUAL>
		<GEQUAL public="1" get="inline" set="null" line="443" static="1"><x path="Int"/></GEQUAL>
		<ALWAYS public="1" get="inline" set="null" line="444" static="1"><x path="Int"/></ALWAYS>
		<KEEP public="1" get="inline" set="null" line="448" static="1"><x path="Int"/></KEEP>
		<REPLACE public="1" get="inline" set="null" line="449" static="1"><x path="Int"/></REPLACE>
		<INCR public="1" get="inline" set="null" line="450" static="1"><x path="Int"/></INCR>
		<DECR public="1" get="inline" set="null" line="451" static="1"><x path="Int"/></DECR>
		<INVERT public="1" get="inline" set="null" line="452" static="1"><x path="Int"/></INVERT>
		<INCR_WRAP public="1" get="inline" set="null" line="453" static="1"><x path="Int"/></INCR_WRAP>
		<DECR_WRAP public="1" get="inline" set="null" line="454" static="1"><x path="Int"/></DECR_WRAP>
		<VENDOR public="1" get="inline" set="null" line="457" static="1"><x path="Int"/></VENDOR>
		<RENDERER public="1" get="inline" set="null" line="458" static="1"><x path="Int"/></RENDERER>
		<VERSION public="1" get="inline" set="null" line="459" static="1"><x path="Int"/></VERSION>
		<NEAREST public="1" get="inline" set="null" line="462" static="1"><x path="Int"/></NEAREST>
		<LINEAR public="1" get="inline" set="null" line="463" static="1"><x path="Int"/></LINEAR>
		<NEAREST_MIPMAP_NEAREST public="1" get="inline" set="null" line="468" static="1"><x path="Int"/></NEAREST_MIPMAP_NEAREST>
		<LINEAR_MIPMAP_NEAREST public="1" get="inline" set="null" line="469" static="1"><x path="Int"/></LINEAR_MIPMAP_NEAREST>
		<NEAREST_MIPMAP_LINEAR public="1" get="inline" set="null" line="470" static="1"><x path="Int"/></NEAREST_MIPMAP_LINEAR>
		<LINEAR_MIPMAP_LINEAR public="1" get="inline" set="null" line="471" static="1"><x path="Int"/></LINEAR_MIPMAP_LINEAR>
		<TEXTURE_MAG_FILTER public="1" get="inline" set="null" line="474" static="1"><x path="Int"/></TEXTURE_MAG_FILTER>
		<TEXTURE_MIN_FILTER public="1" get="inline" set="null" line="475" static="1"><x path="Int"/></TEXTURE_MIN_FILTER>
		<TEXTURE_WRAP_S public="1" get="inline" set="null" line="476" static="1"><x path="Int"/></TEXTURE_WRAP_S>
		<TEXTURE_WRAP_T public="1" get="inline" set="null" line="477" static="1"><x path="Int"/></TEXTURE_WRAP_T>
		<TEXTURE_2D public="1" get="inline" set="null" line="480" static="1"><x path="Int"/></TEXTURE_2D>
		<TEXTURE public="1" get="inline" set="null" line="481" static="1"><x path="Int"/></TEXTURE>
		<TEXTURE_CUBE_MAP public="1" get="inline" set="null" line="483" static="1"><x path="Int"/></TEXTURE_CUBE_MAP>
		<TEXTURE_BINDING_CUBE_MAP public="1" get="inline" set="null" line="484" static="1"><x path="Int"/></TEXTURE_BINDING_CUBE_MAP>
		<TEXTURE_CUBE_MAP_POSITIVE_X public="1" get="inline" set="null" line="485" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_X>
		<TEXTURE_CUBE_MAP_NEGATIVE_X public="1" get="inline" set="null" line="486" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_X>
		<TEXTURE_CUBE_MAP_POSITIVE_Y public="1" get="inline" set="null" line="487" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Y>
		<TEXTURE_CUBE_MAP_NEGATIVE_Y public="1" get="inline" set="null" line="488" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Y>
		<TEXTURE_CUBE_MAP_POSITIVE_Z public="1" get="inline" set="null" line="489" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_POSITIVE_Z>
		<TEXTURE_CUBE_MAP_NEGATIVE_Z public="1" get="inline" set="null" line="490" static="1"><x path="Int"/></TEXTURE_CUBE_MAP_NEGATIVE_Z>
		<MAX_CUBE_MAP_TEXTURE_SIZE public="1" get="inline" set="null" line="491" static="1"><x path="Int"/></MAX_CUBE_MAP_TEXTURE_SIZE>
		<TEXTURE0 public="1" get="inline" set="null" line="494" static="1"><x path="Int"/></TEXTURE0>
		<TEXTURE1 public="1" get="inline" set="null" line="495" static="1"><x path="Int"/></TEXTURE1>
		<TEXTURE2 public="1" get="inline" set="null" line="496" static="1"><x path="Int"/></TEXTURE2>
		<TEXTURE3 public="1" get="inline" set="null" line="497" static="1"><x path="Int"/></TEXTURE3>
		<TEXTURE4 public="1" get="inline" set="null" line="498" static="1"><x path="Int"/></TEXTURE4>
		<TEXTURE5 public="1" get="inline" set="null" line="499" static="1"><x path="Int"/></TEXTURE5>
		<TEXTURE6 public="1" get="inline" set="null" line="500" static="1"><x path="Int"/></TEXTURE6>
		<TEXTURE7 public="1" get="inline" set="null" line="501" static="1"><x path="Int"/></TEXTURE7>
		<TEXTURE8 public="1" get="inline" set="null" line="502" static="1"><x path="Int"/></TEXTURE8>
		<TEXTURE9 public="1" get="inline" set="null" line="503" static="1"><x path="Int"/></TEXTURE9>
		<TEXTURE10 public="1" get="inline" set="null" line="504" static="1"><x path="Int"/></TEXTURE10>
		<TEXTURE11 public="1" get="inline" set="null" line="505" static="1"><x path="Int"/></TEXTURE11>
		<TEXTURE12 public="1" get="inline" set="null" line="506" static="1"><x path="Int"/></TEXTURE12>
		<TEXTURE13 public="1" get="inline" set="null" line="507" static="1"><x path="Int"/></TEXTURE13>
		<TEXTURE14 public="1" get="inline" set="null" line="508" static="1"><x path="Int"/></TEXTURE14>
		<TEXTURE15 public="1" get="inline" set="null" line="509" static="1"><x path="Int"/></TEXTURE15>
		<TEXTURE16 public="1" get="inline" set="null" line="510" static="1"><x path="Int"/></TEXTURE16>
		<TEXTURE17 public="1" get="inline" set="null" line="511" static="1"><x path="Int"/></TEXTURE17>
		<TEXTURE18 public="1" get="inline" set="null" line="512" static="1"><x path="Int"/></TEXTURE18>
		<TEXTURE19 public="1" get="inline" set="null" line="513" static="1"><x path="Int"/></TEXTURE19>
		<TEXTURE20 public="1" get="inline" set="null" line="514" static="1"><x path="Int"/></TEXTURE20>
		<TEXTURE21 public="1" get="inline" set="null" line="515" static="1"><x path="Int"/></TEXTURE21>
		<TEXTURE22 public="1" get="inline" set="null" line="516" static="1"><x path="Int"/></TEXTURE22>
		<TEXTURE23 public="1" get="inline" set="null" line="517" static="1"><x path="Int"/></TEXTURE23>
		<TEXTURE24 public="1" get="inline" set="null" line="518" static="1"><x path="Int"/></TEXTURE24>
		<TEXTURE25 public="1" get="inline" set="null" line="519" static="1"><x path="Int"/></TEXTURE25>
		<TEXTURE26 public="1" get="inline" set="null" line="520" static="1"><x path="Int"/></TEXTURE26>
		<TEXTURE27 public="1" get="inline" set="null" line="521" static="1"><x path="Int"/></TEXTURE27>
		<TEXTURE28 public="1" get="inline" set="null" line="522" static="1"><x path="Int"/></TEXTURE28>
		<TEXTURE29 public="1" get="inline" set="null" line="523" static="1"><x path="Int"/></TEXTURE29>
		<TEXTURE30 public="1" get="inline" set="null" line="524" static="1"><x path="Int"/></TEXTURE30>
		<TEXTURE31 public="1" get="inline" set="null" line="525" static="1"><x path="Int"/></TEXTURE31>
		<ACTIVE_TEXTURE public="1" get="inline" set="null" line="526" static="1"><x path="Int"/></ACTIVE_TEXTURE>
		<REPEAT public="1" get="inline" set="null" line="529" static="1"><x path="Int"/></REPEAT>
		<CLAMP_TO_EDGE public="1" get="inline" set="null" line="530" static="1"><x path="Int"/></CLAMP_TO_EDGE>
		<MIRRORED_REPEAT public="1" get="inline" set="null" line="531" static="1"><x path="Int"/></MIRRORED_REPEAT>
		<FLOAT_VEC2 public="1" get="inline" set="null" line="534" static="1"><x path="Int"/></FLOAT_VEC2>
		<FLOAT_VEC3 public="1" get="inline" set="null" line="535" static="1"><x path="Int"/></FLOAT_VEC3>
		<FLOAT_VEC4 public="1" get="inline" set="null" line="536" static="1"><x path="Int"/></FLOAT_VEC4>
		<INT_VEC2 public="1" get="inline" set="null" line="537" static="1"><x path="Int"/></INT_VEC2>
		<INT_VEC3 public="1" get="inline" set="null" line="538" static="1"><x path="Int"/></INT_VEC3>
		<INT_VEC4 public="1" get="inline" set="null" line="539" static="1"><x path="Int"/></INT_VEC4>
		<BOOL public="1" get="inline" set="null" line="540" static="1"><x path="Int"/></BOOL>
		<BOOL_VEC2 public="1" get="inline" set="null" line="541" static="1"><x path="Int"/></BOOL_VEC2>
		<BOOL_VEC3 public="1" get="inline" set="null" line="542" static="1"><x path="Int"/></BOOL_VEC3>
		<BOOL_VEC4 public="1" get="inline" set="null" line="543" static="1"><x path="Int"/></BOOL_VEC4>
		<FLOAT_MAT2 public="1" get="inline" set="null" line="544" static="1"><x path="Int"/></FLOAT_MAT2>
		<FLOAT_MAT3 public="1" get="inline" set="null" line="545" static="1"><x path="Int"/></FLOAT_MAT3>
		<FLOAT_MAT4 public="1" get="inline" set="null" line="546" static="1"><x path="Int"/></FLOAT_MAT4>
		<SAMPLER_2D public="1" get="inline" set="null" line="547" static="1"><x path="Int"/></SAMPLER_2D>
		<SAMPLER_CUBE public="1" get="inline" set="null" line="548" static="1"><x path="Int"/></SAMPLER_CUBE>
		<VERTEX_ATTRIB_ARRAY_ENABLED public="1" get="inline" set="null" line="551" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_ENABLED>
		<VERTEX_ATTRIB_ARRAY_SIZE public="1" get="inline" set="null" line="552" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_SIZE>
		<VERTEX_ATTRIB_ARRAY_STRIDE public="1" get="inline" set="null" line="553" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_STRIDE>
		<VERTEX_ATTRIB_ARRAY_TYPE public="1" get="inline" set="null" line="554" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_TYPE>
		<VERTEX_ATTRIB_ARRAY_NORMALIZED public="1" get="inline" set="null" line="555" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_NORMALIZED>
		<VERTEX_ATTRIB_ARRAY_POINTER public="1" get="inline" set="null" line="556" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_POINTER>
		<VERTEX_ATTRIB_ARRAY_BUFFER_BINDING public="1" get="inline" set="null" line="557" static="1"><x path="Int"/></VERTEX_ATTRIB_ARRAY_BUFFER_BINDING>
		<VERTEX_PROGRAM_POINT_SIZE public="1" get="inline" set="null" line="560" static="1"><x path="Int"/></VERTEX_PROGRAM_POINT_SIZE>
		<POINT_SPRITE public="1" get="inline" set="null" line="561" static="1"><x path="Int"/></POINT_SPRITE>
		<COMPILE_STATUS public="1" get="inline" set="null" line="564" static="1"><x path="Int"/></COMPILE_STATUS>
		<LOW_FLOAT public="1" get="inline" set="null" line="567" static="1"><x path="Int"/></LOW_FLOAT>
		<MEDIUM_FLOAT public="1" get="inline" set="null" line="568" static="1"><x path="Int"/></MEDIUM_FLOAT>
		<HIGH_FLOAT public="1" get="inline" set="null" line="569" static="1"><x path="Int"/></HIGH_FLOAT>
		<LOW_INT public="1" get="inline" set="null" line="570" static="1"><x path="Int"/></LOW_INT>
		<MEDIUM_INT public="1" get="inline" set="null" line="571" static="1"><x path="Int"/></MEDIUM_INT>
		<HIGH_INT public="1" get="inline" set="null" line="572" static="1"><x path="Int"/></HIGH_INT>
		<FRAMEBUFFER public="1" get="inline" set="null" line="575" static="1"><x path="Int"/></FRAMEBUFFER>
		<RENDERBUFFER public="1" get="inline" set="null" line="576" static="1"><x path="Int"/></RENDERBUFFER>
		<RGBA4 public="1" get="inline" set="null" line="578" static="1"><x path="Int"/></RGBA4>
		<RGB5_A1 public="1" get="inline" set="null" line="579" static="1"><x path="Int"/></RGB5_A1>
		<RGB565 public="1" get="inline" set="null" line="580" static="1"><x path="Int"/></RGB565>
		<DEPTH_COMPONENT16 public="1" get="inline" set="null" line="581" static="1"><x path="Int"/></DEPTH_COMPONENT16>
		<STENCIL_INDEX public="1" get="inline" set="null" line="582" static="1"><x path="Int"/></STENCIL_INDEX>
		<STENCIL_INDEX8 public="1" get="inline" set="null" line="583" static="1"><x path="Int"/></STENCIL_INDEX8>
		<DEPTH_STENCIL public="1" get="inline" set="null" line="584" static="1"><x path="Int"/></DEPTH_STENCIL>
		<RENDERBUFFER_WIDTH public="1" get="inline" set="null" line="586" static="1"><x path="Int"/></RENDERBUFFER_WIDTH>
		<RENDERBUFFER_HEIGHT public="1" get="inline" set="null" line="587" static="1"><x path="Int"/></RENDERBUFFER_HEIGHT>
		<RENDERBUFFER_INTERNAL_FORMAT public="1" get="inline" set="null" line="588" static="1"><x path="Int"/></RENDERBUFFER_INTERNAL_FORMAT>
		<RENDERBUFFER_RED_SIZE public="1" get="inline" set="null" line="589" static="1"><x path="Int"/></RENDERBUFFER_RED_SIZE>
		<RENDERBUFFER_GREEN_SIZE public="1" get="inline" set="null" line="590" static="1"><x path="Int"/></RENDERBUFFER_GREEN_SIZE>
		<RENDERBUFFER_BLUE_SIZE public="1" get="inline" set="null" line="591" static="1"><x path="Int"/></RENDERBUFFER_BLUE_SIZE>
		<RENDERBUFFER_ALPHA_SIZE public="1" get="inline" set="null" line="592" static="1"><x path="Int"/></RENDERBUFFER_ALPHA_SIZE>
		<RENDERBUFFER_DEPTH_SIZE public="1" get="inline" set="null" line="593" static="1"><x path="Int"/></RENDERBUFFER_DEPTH_SIZE>
		<RENDERBUFFER_STENCIL_SIZE public="1" get="inline" set="null" line="594" static="1"><x path="Int"/></RENDERBUFFER_STENCIL_SIZE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE public="1" get="inline" set="null" line="596" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE>
		<FRAMEBUFFER_ATTACHMENT_OBJECT_NAME public="1" get="inline" set="null" line="597" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_OBJECT_NAME>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL public="1" get="inline" set="null" line="598" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL>
		<FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE public="1" get="inline" set="null" line="599" static="1"><x path="Int"/></FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE>
		<COLOR_ATTACHMENT0 public="1" get="inline" set="null" line="601" static="1"><x path="Int"/></COLOR_ATTACHMENT0>
		<DEPTH_ATTACHMENT public="1" get="inline" set="null" line="602" static="1"><x path="Int"/></DEPTH_ATTACHMENT>
		<STENCIL_ATTACHMENT public="1" get="inline" set="null" line="603" static="1"><x path="Int"/></STENCIL_ATTACHMENT>
		<DEPTH_STENCIL_ATTACHMENT public="1" get="inline" set="null" line="604" static="1"><x path="Int"/></DEPTH_STENCIL_ATTACHMENT>
		<NONE public="1" get="inline" set="null" line="606" static="1"><x path="Int"/></NONE>
		<FRAMEBUFFER_COMPLETE public="1" get="inline" set="null" line="608" static="1"><x path="Int"/></FRAMEBUFFER_COMPLETE>
		<FRAMEBUFFER_INCOMPLETE_ATTACHMENT public="1" get="inline" set="null" line="609" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT public="1" get="inline" set="null" line="610" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT>
		<FRAMEBUFFER_INCOMPLETE_DIMENSIONS public="1" get="inline" set="null" line="611" static="1"><x path="Int"/></FRAMEBUFFER_INCOMPLETE_DIMENSIONS>
		<FRAMEBUFFER_UNSUPPORTED public="1" get="inline" set="null" line="612" static="1"><x path="Int"/></FRAMEBUFFER_UNSUPPORTED>
		<FRAMEBUFFER_BINDING public="1" get="inline" set="null" line="614" static="1"><x path="Int"/></FRAMEBUFFER_BINDING>
		<RENDERBUFFER_BINDING public="1" get="inline" set="null" line="615" static="1"><x path="Int"/></RENDERBUFFER_BINDING>
		<MAX_RENDERBUFFER_SIZE public="1" get="inline" set="null" line="616" static="1"><x path="Int"/></MAX_RENDERBUFFER_SIZE>
		<INVALID_FRAMEBUFFER_OPERATION public="1" get="inline" set="null" line="618" static="1"><x path="Int"/></INVALID_FRAMEBUFFER_OPERATION>
		<UNPACK_FLIP_Y_WEBGL public="1" get="inline" set="null" line="621" static="1"><x path="Int"/></UNPACK_FLIP_Y_WEBGL>
		<UNPACK_PREMULTIPLY_ALPHA_WEBGL public="1" get="inline" set="null" line="622" static="1"><x path="Int"/></UNPACK_PREMULTIPLY_ALPHA_WEBGL>
		<CONTEXT_LOST_WEBGL public="1" get="inline" set="null" line="623" static="1"><x path="Int"/></CONTEXT_LOST_WEBGL>
		<UNPACK_COLORSPACE_CONVERSION_WEBGL public="1" get="inline" set="null" line="624" static="1"><x path="Int"/></UNPACK_COLORSPACE_CONVERSION_WEBGL>
		<BROWSER_DEFAULT_WEBGL public="1" get="inline" set="null" line="625" static="1"><x path="Int"/></BROWSER_DEFAULT_WEBGL>
		<versionString public="1" set="method" line="627" static="1"><f a=""><c path="String"/></f></versionString>
		<activeTexture public="1" set="method" line="631" static="1"><f a="texture">
	<x path="Int"/>
	<x path="Void"/>
</f></activeTexture>
		<attachShader public="1" set="method" line="636" static="1"><f a="program:shader">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></attachShader>
		<bindAttribLocation public="1" set="method" line="642" static="1"><f a="program:index:name">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></bindAttribLocation>
		<bindBuffer public="1" set="method" line="647" static="1"><f a="target:buffer">
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLBuffer"/>
	<x path="Void"/>
</f></bindBuffer>
		<bindFramebuffer public="1" set="method" line="652" static="1"><f a="target:framebuffer">
	<x path="Int"/>
	<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></bindFramebuffer>
		<bindRenderbuffer public="1" set="method" line="657" static="1"><f a="target:renderbuffer">
	<x path="Int"/>
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></bindRenderbuffer>
		<bindTexture public="1" set="method" line="662" static="1"><f a="target:texture">
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Void"/>
</f></bindTexture>
		<blendColor public="1" set="method" line="667" static="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></blendColor>
		<blendEquation public="1" set="method" line="672" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquation>
		<blendEquationSeparate public="1" set="method" line="677" static="1"><f a="modeRGB:modeAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendEquationSeparate>
		<blendFunc public="1" set="method" line="682" static="1"><f a="sfactor:dfactor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFunc>
		<blendFuncSeparate public="1" set="method" line="687" static="1"><f a="srcRGB:dstRGB:srcAlpha:dstAlpha">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blendFuncSeparate>
		<bufferData public="1" set="method" line="692" static="1"><f a="target:data:usage">
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Int"/>
	<x path="Void"/>
</f></bufferData>
		<bufferSubData public="1" set="method" line="697" static="1"><f a="target:offset:data">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Void"/>
</f></bufferSubData>
		<checkFramebufferStatus public="1" set="method" line="702" static="1"><f a="target">
	<x path="Int"/>
	<x path="Int"/>
</f></checkFramebufferStatus>
		<clear public="1" set="method" line="707" static="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<clearColor public="1" set="method" line="712" static="1"><f a="red:green:blue:alpha">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></clearColor>
		<clearDepth public="1" set="method" line="717" static="1"><f a="depth">
	<x path="Float"/>
	<x path="Void"/>
</f></clearDepth>
		<clearStencil public="1" set="method" line="722" static="1"><f a="s">
	<x path="Int"/>
	<x path="Void"/>
</f></clearStencil>
		<colorMask public="1" set="method" line="727" static="1"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></colorMask>
		<compileShader public="1" set="method" line="732" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></compileShader>
		<compressedTexImage2D public="1" set="method" line="737" static="1"><f a="target:level:internalformat:width:height:border:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Void"/>
</f></compressedTexImage2D>
		<compressedTexSubImage2D public="1" set="method" line="742" static="1"><f a="target:level:xoffset:yoffset:width:height:format:data">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.utils.IMemoryRange"/>
	<x path="Void"/>
</f></compressedTexSubImage2D>
		<copyTexImage2D public="1" set="method" line="747" static="1"><f a="target:level:internalformat:x:y:width:height:border">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexImage2D>
		<copyTexSubImage2D public="1" set="method" line="752" static="1"><f a="target:level:xoffset:yoffset:x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyTexSubImage2D>
		<createBuffer public="1" set="method" line="757" static="1"><f a=""><c path="snow.platform.native.render.opengl.GLBuffer"/></f></createBuffer>
		<createFramebuffer public="1" set="method" line="762" static="1"><f a=""><x path="snow.platform.native.render.opengl.GLFramebuffer"/></f></createFramebuffer>
		<createProgram public="1" set="method" line="767" static="1"><f a=""><c path="snow.platform.native.render.opengl.GLProgram"/></f></createProgram>
		<createRenderbuffer public="1" set="method" line="772" static="1"><f a=""><x path="snow.platform.native.render.opengl.GLRenderbuffer"/></f></createRenderbuffer>
		<createShader public="1" set="method" line="777" static="1"><f a="type">
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLShader"/>
</f></createShader>
		<createTexture public="1" set="method" line="782" static="1"><f a=""><c path="snow.platform.native.render.opengl.GLTexture"/></f></createTexture>
		<cullFace public="1" set="method" line="787" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></cullFace>
		<deleteBuffer public="1" set="method" line="792" static="1"><f a="buffer">
	<c path="snow.platform.native.render.opengl.GLBuffer"/>
	<x path="Void"/>
</f></deleteBuffer>
		<deleteFramebuffer public="1" set="method" line="798" static="1"><f a="framebuffer">
	<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
	<x path="Void"/>
</f></deleteFramebuffer>
		<deleteProgram public="1" set="method" line="804" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></deleteProgram>
		<deleteRenderbuffer public="1" set="method" line="810" static="1"><f a="renderbuffer">
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></deleteRenderbuffer>
		<deleteShader public="1" set="method" line="816" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></deleteShader>
		<deleteTexture public="1" set="method" line="822" static="1"><f a="texture">
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Void"/>
</f></deleteTexture>
		<depthFunc public="1" set="method" line="828" static="1"><f a="func">
	<x path="Int"/>
	<x path="Void"/>
</f></depthFunc>
		<depthMask public="1" set="method" line="833" static="1"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></depthMask>
		<depthRange public="1" set="method" line="838" static="1"><f a="zNear:zFar">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></depthRange>
		<detachShader public="1" set="method" line="843" static="1"><f a="program:shader">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Void"/>
</f></detachShader>
		<disable public="1" set="method" line="848" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></disable>
		<disableVertexAttribArray public="1" set="method" line="853" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></disableVertexAttribArray>
		<drawArrays public="1" set="method" line="858" static="1"><f a="mode:first:count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawArrays>
		<drawElements public="1" set="method" line="863" static="1"><f a="mode:count:type:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawElements>
		<enable public="1" set="method" line="868" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Void"/>
</f></enable>
		<enableVertexAttribArray public="1" set="method" line="873" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></enableVertexAttribArray>
		<finish public="1" set="method" line="878" static="1"><f a=""><x path="Void"/></f></finish>
		<flush public="1" set="method" line="883" static="1"><f a=""><x path="Void"/></f></flush>
		<framebufferRenderbuffer public="1" set="method" line="888" static="1"><f a="target:attachment:renderbuffertarget:renderbuffer">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Void"/>
</f></framebufferRenderbuffer>
		<framebufferTexture2D public="1" set="method" line="893" static="1"><f a="target:attachment:textarget:texture:level">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Int"/>
	<x path="Void"/>
</f></framebufferTexture2D>
		<frontFace public="1" set="method" line="898" static="1"><f a="mode">
	<x path="Int"/>
	<x path="Void"/>
</f></frontFace>
		<generateMipmap public="1" set="method" line="903" static="1"><f a="target">
	<x path="Int"/>
	<x path="Void"/>
</f></generateMipmap>
		<getActiveAttrib public="1" set="method" line="908" static="1"><f a="program:index">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></getActiveAttrib>
		<getActiveUniform public="1" set="method" line="913" static="1"><f a="program:index">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></getActiveUniform>
		<getAttachedShaders public="1" set="method" line="918" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="Array"><c path="snow.platform.native.render.opengl.GLShader"/></c>
</f></getAttachedShaders>
		<getAttribLocation public="1" set="method" line="923" static="1"><f a="program:name">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="String"/>
	<x path="Int"/>
</f></getAttribLocation>
		<getBufferParameter public="1" set="method" line="928" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getBufferParameter>
		<getContextAttributes public="1" set="method" line="933" static="1"><f a=""><t path="snow.platform.native.render.opengl.GLContextAttributes"/></f></getContextAttributes>
		<getError public="1" set="method" line="940" static="1"><f a=""><x path="Int"/></f></getError>
		<getExtension public="1" set="method" line="945" static="1"><f a="name">
	<c path="String"/>
	<d/>
</f></getExtension>
		<getFramebufferAttachmentParameter public="1" set="method" line="952" static="1"><f a="target:attachment:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getFramebufferAttachmentParameter>
		<getParameter public="1" set="method" line="957" static="1"><f a="pname">
	<x path="Int"/>
	<d/>
</f></getParameter>
		<getProgramInfoLog public="1" set="method" line="962" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="String"/>
</f></getProgramInfoLog>
		<getProgramParameter public="1" set="method" line="967" static="1"><f a="program:pname">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getProgramParameter>
		<getRenderbufferParameter public="1" set="method" line="972" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getRenderbufferParameter>
		<getShaderInfoLog public="1" set="method" line="977" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderInfoLog>
		<getShaderParameter public="1" set="method" line="982" static="1"><f a="shader:pname">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getShaderParameter>
		<getShaderPrecisionFormat public="1" set="method" line="987" static="1"><f a="shadertype:precisiontype">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLShaderPrecisionFormat"/>
</f></getShaderPrecisionFormat>
		<getShaderSource public="1" set="method" line="992" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<c path="String"/>
</f></getShaderSource>
		<getSupportedExtensions public="1" set="method" line="997" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getSupportedExtensions>
		<getTexParameter public="1" set="method" line="1004" static="1"><f a="target:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getTexParameter>
		<getUniform public="1" set="method" line="1009" static="1"><f a="program:location">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<d/>
</f></getUniform>
		<getUniformLocation public="1" set="method" line="1014" static="1"><f a="program:name">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<c path="String"/>
	<d/>
</f></getUniformLocation>
		<getVertexAttrib public="1" set="method" line="1019" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<d/>
</f></getVertexAttrib>
		<getVertexAttribOffset public="1" set="method" line="1024" static="1"><f a="index:pname">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getVertexAttribOffset>
		<hint public="1" set="method" line="1029" static="1"><f a="target:mode">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></hint>
		<isBuffer public="1" set="method" line="1034" static="1"><f a="buffer">
	<c path="snow.platform.native.render.opengl.GLBuffer"/>
	<x path="Bool"/>
</f></isBuffer>
		<isEnabled public="1" set="method" line="1041" static="1"><f a="cap">
	<x path="Int"/>
	<x path="Bool"/>
</f></isEnabled>
		<isFramebuffer public="1" set="method" line="1046" static="1"><f a="framebuffer">
	<x path="snow.platform.native.render.opengl.GLFramebuffer"/>
	<x path="Bool"/>
</f></isFramebuffer>
		<isProgram public="1" set="method" line="1051" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Bool"/>
</f></isProgram>
		<isRenderbuffer public="1" set="method" line="1056" static="1"><f a="renderbuffer">
	<x path="snow.platform.native.render.opengl.GLRenderbuffer"/>
	<x path="Bool"/>
</f></isRenderbuffer>
		<isShader public="1" set="method" line="1061" static="1"><f a="shader">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<x path="Bool"/>
</f></isShader>
		<isTexture public="1" set="method" line="1066" static="1"><f a="texture">
	<c path="snow.platform.native.render.opengl.GLTexture"/>
	<x path="Bool"/>
</f></isTexture>
		<lineWidth public="1" set="method" line="1071" static="1"><f a="width">
	<x path="Float"/>
	<x path="Void"/>
</f></lineWidth>
		<linkProgram public="1" set="method" line="1076" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></linkProgram>
		<load set="method" line="1081" static="1"><f a="inName:inArgCount">
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></load>
		<pixelStorei public="1" set="method" line="1091" static="1"><f a="pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></pixelStorei>
		<polygonOffset public="1" set="method" line="1096" static="1"><f a="factor:units">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></polygonOffset>
		<readPixels public="1" set="method" line="1101" static="1"><f a="x:y:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></readPixels>
		<renderbufferStorage public="1" set="method" line="1106" static="1"><f a="target:internalformat:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></renderbufferStorage>
		<sampleCoverage public="1" set="method" line="1111" static="1"><f a="value:invert">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sampleCoverage>
		<scissor public="1" set="method" line="1116" static="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<shaderSource public="1" set="method" line="1121" static="1"><f a="shader:source">
	<c path="snow.platform.native.render.opengl.GLShader"/>
	<c path="String"/>
	<x path="Void"/>
</f></shaderSource>
		<stencilFunc public="1" set="method" line="1126" static="1"><f a="func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFunc>
		<stencilFuncSeparate public="1" set="method" line="1131" static="1"><f a="face:func:ref:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilFuncSeparate>
		<stencilMask public="1" set="method" line="1136" static="1"><f a="mask">
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMask>
		<stencilMaskSeparate public="1" set="method" line="1141" static="1"><f a="face:mask">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilMaskSeparate>
		<stencilOp public="1" set="method" line="1146" static="1"><f a="fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOp>
		<stencilOpSeparate public="1" set="method" line="1151" static="1"><f a="face:fail:zfail:zpass">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stencilOpSeparate>
		<texImage2D public="1" set="method" line="1156" static="1"><f a="target:level:internalformat:width:height:border:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texImage2D>
		<texParameterf public="1" set="method" line="1161" static="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></texParameterf>
		<texParameteri public="1" set="method" line="1166" static="1"><f a="target:pname:param">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></texParameteri>
		<texSubImage2D public="1" set="method" line="1171" static="1"><f a="target:level:xoffset:yoffset:width:height:format:type:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ArrayBufferView"/>
	<x path="Void"/>
</f></texSubImage2D>
		<uniform1f public="1" set="method" line="1176" static="1"><f a="location:x">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform1f>
		<uniform1fv public="1" set="method" line="1181" static="1"><f a="location:x">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform1fv>
		<uniform1i public="1" set="method" line="1186" static="1"><f a="location:x">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform1i>
		<uniform1iv public="1" set="method" line="1191" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform1iv>
		<uniform2f public="1" set="method" line="1196" static="1"><f a="location:x:y">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform2f>
		<uniform2fv public="1" set="method" line="1201" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform2fv>
		<uniform2i public="1" set="method" line="1206" static="1"><f a="location:x:y">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform2i>
		<uniform2iv public="1" set="method" line="1211" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform2iv>
		<uniform3f public="1" set="method" line="1216" static="1"><f a="location:x:y:z">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform3f>
		<uniform3fv public="1" set="method" line="1221" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform3fv>
		<uniform3i public="1" set="method" line="1226" static="1"><f a="location:x:y:z">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform3i>
		<uniform3iv public="1" set="method" line="1231" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform3iv>
		<uniform4f public="1" set="method" line="1236" static="1"><f a="location:x:y:z:w">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></uniform4f>
		<uniform4fv public="1" set="method" line="1241" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniform4fv>
		<uniform4i public="1" set="method" line="1246" static="1"><f a="location:x:y:z:w">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uniform4i>
		<uniform4iv public="1" set="method" line="1251" static="1"><f a="location:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<t path="snow.utils.Int32Array"/>
	<x path="Void"/>
</f></uniform4iv>
		<uniformMatrix2fv public="1" set="method" line="1256" static="1"><f a="location:transpose:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix2fv>
		<uniformMatrix3fv public="1" set="method" line="1261" static="1"><f a="location:transpose:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix3fv>
		<uniformMatrix4fv public="1" set="method" line="1266" static="1"><f a="location:transpose:v">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></uniformMatrix4fv>
		<useProgram public="1" set="method" line="1271" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></useProgram>
		<validateProgram public="1" set="method" line="1276" static="1"><f a="program">
	<c path="snow.platform.native.render.opengl.GLProgram"/>
	<x path="Void"/>
</f></validateProgram>
		<vertexAttrib1f public="1" set="method" line="1281" static="1"><f a="indx:x">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib1f>
		<vertexAttrib1fv public="1" set="method" line="1286" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib1fv>
		<vertexAttrib2f public="1" set="method" line="1291" static="1"><f a="indx:x:y">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib2f>
		<vertexAttrib2fv public="1" set="method" line="1296" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib2fv>
		<vertexAttrib3f public="1" set="method" line="1301" static="1"><f a="indx:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib3f>
		<vertexAttrib3fv public="1" set="method" line="1306" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib3fv>
		<vertexAttrib4f public="1" set="method" line="1311" static="1"><f a="indx:x:y:z:w">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></vertexAttrib4f>
		<vertexAttrib4fv public="1" set="method" line="1316" static="1"><f a="indx:values">
	<x path="Int"/>
	<t path="snow.utils.Float32Array"/>
	<x path="Void"/>
</f></vertexAttrib4fv>
		<vertexAttribPointer public="1" set="method" line="1321" static="1"><f a="indx:size:type:normalized:stride:offset">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></vertexAttribPointer>
		<viewport public="1" set="method" line="1326" static="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<get_version set="method" line="1339" static="1"><f a=""><x path="Int"/></f></get_version>
		<snow_gl_active_texture line="1349" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_active_texture>
		<snow_gl_attach_shader line="1350" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_attach_shader>
		<snow_gl_bind_attrib_location line="1351" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<unknown/>
</f></snow_gl_bind_attrib_location>
		<snow_gl_bind_buffer line="1352" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_buffer>
		<snow_gl_bind_framebuffer line="1353" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_framebuffer>
		<snow_gl_bind_renderbuffer line="1354" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_renderbuffer>
		<snow_gl_bind_texture line="1355" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_bind_texture>
		<snow_gl_blend_color line="1356" static="1"><f a=":::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_blend_color>
		<snow_gl_blend_equation line="1357" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_equation>
		<snow_gl_blend_equation_separate line="1358" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_equation_separate>
		<snow_gl_blend_func line="1359" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_func>
		<snow_gl_blend_func_separate line="1360" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_blend_func_separate>
		<snow_gl_buffer_data line="1361" static="1"><f a="::::">
	<x path="Int"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_buffer_data>
		<snow_gl_buffer_sub_data line="1362" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_buffer_sub_data>
		<snow_gl_check_framebuffer_status line="1363" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_check_framebuffer_status>
		<snow_gl_clear line="1364" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_clear>
		<snow_gl_clear_color line="1365" static="1"><f a=":::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_clear_color>
		<snow_gl_clear_depth line="1366" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></snow_gl_clear_depth>
		<snow_gl_clear_stencil line="1367" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_clear_stencil>
		<snow_gl_color_mask line="1368" static="1"><f a=":::">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_gl_color_mask>
		<snow_gl_compile_shader line="1369" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_compile_shader>
		<snow_gl_compressed_tex_image_2d line="1370" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_compressed_tex_image_2d>
		<snow_gl_compressed_tex_sub_image_2d line="1371" static="1"><f a="::::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_compressed_tex_sub_image_2d>
		<snow_gl_copy_tex_image_2d line="1372" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_copy_tex_image_2d>
		<snow_gl_copy_tex_sub_image_2d line="1373" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_copy_tex_sub_image_2d>
		<snow_gl_create_buffer line="1374" static="1"><f a=""><x path="Int"/></f></snow_gl_create_buffer>
		<snow_gl_create_framebuffer line="1375" static="1"><f a=""><x path="Int"/></f></snow_gl_create_framebuffer>
		<snow_gl_create_program line="1376" static="1"><f a=""><x path="Int"/></f></snow_gl_create_program>
		<snow_gl_create_render_buffer line="1377" static="1"><f a=""><x path="Int"/></f></snow_gl_create_render_buffer>
		<snow_gl_create_shader line="1378" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_create_shader>
		<snow_gl_create_texture line="1379" static="1"><f a=""><x path="Int"/></f></snow_gl_create_texture>
		<snow_gl_cull_face line="1380" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_cull_face>
		<snow_gl_delete_buffer line="1381" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_buffer>
		<snow_gl_delete_framebuffer line="1382" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_framebuffer>
		<snow_gl_delete_program line="1383" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_program>
		<snow_gl_delete_render_buffer line="1384" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_render_buffer>
		<snow_gl_delete_shader line="1385" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_shader>
		<snow_gl_delete_texture line="1386" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_delete_texture>
		<snow_gl_depth_func line="1387" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_depth_func>
		<snow_gl_depth_mask line="1388" static="1"><f a="">
	<x path="Bool"/>
	<unknown/>
</f></snow_gl_depth_mask>
		<snow_gl_depth_range line="1389" static="1"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_depth_range>
		<snow_gl_detach_shader line="1390" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_detach_shader>
		<snow_gl_disable line="1391" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_disable>
		<snow_gl_disable_vertex_attrib_array line="1392" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_disable_vertex_attrib_array>
		<snow_gl_draw_arrays line="1393" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_draw_arrays>
		<snow_gl_draw_elements line="1394" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_draw_elements>
		<snow_gl_enable line="1395" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_enable>
		<snow_gl_enable_vertex_attrib_array line="1396" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_enable_vertex_attrib_array>
		<snow_gl_finish line="1397" static="1"><f a=""><unknown/></f></snow_gl_finish>
		<snow_gl_flush line="1398" static="1"><f a=""><unknown/></f></snow_gl_flush>
		<snow_gl_framebuffer_renderbuffer line="1399" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_framebuffer_renderbuffer>
		<snow_gl_framebuffer_texture2D line="1400" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_framebuffer_texture2D>
		<snow_gl_front_face line="1401" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_front_face>
		<snow_gl_generate_mipmap line="1402" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_generate_mipmap>
		<snow_gl_get_active_attrib line="1403" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></snow_gl_get_active_attrib>
		<snow_gl_get_active_uniform line="1404" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLActiveInfo"/>
</f></snow_gl_get_active_uniform>
		<snow_gl_get_attrib_location line="1405" static="1"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
</f></snow_gl_get_attrib_location>
		<snow_gl_get_buffer_paramerter line="1406" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_buffer_paramerter>
		<snow_gl_get_context_attributes line="1407" static="1"><f a=""><t path="snow.platform.native.render.opengl.GLContextAttributes"/></f></snow_gl_get_context_attributes>
		<snow_gl_get_error line="1408" static="1"><f a=""><x path="Int"/></f></snow_gl_get_error>
		<snow_gl_get_framebuffer_attachment_parameter line="1409" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_framebuffer_attachment_parameter>
		<snow_gl_get_parameter line="1410" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_parameter>
		<snow_gl_get_program_info_log line="1412" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_gl_get_program_info_log>
		<snow_gl_get_program_parameter line="1413" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_get_program_parameter>
		<snow_gl_get_render_buffer_parameter line="1414" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_render_buffer_parameter>
		<snow_gl_get_shader_info_log line="1415" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_gl_get_shader_info_log>
		<snow_gl_get_shader_parameter line="1416" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_get_shader_parameter>
		<snow_gl_get_shader_precision_format line="1417" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLShaderPrecisionFormat"/>
</f></snow_gl_get_shader_precision_format>
		<snow_gl_get_shader_source line="1418" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_gl_get_shader_source>
		<snow_gl_get_supported_extensions line="1419" static="1"><f a="">
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></snow_gl_get_supported_extensions>
		<snow_gl_get_tex_parameter line="1420" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_tex_parameter>
		<snow_gl_get_uniform line="1421" static="1"><f a=":">
	<x path="Int"/>
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<unknown/>
</f></snow_gl_get_uniform>
		<snow_gl_get_uniform_location line="1422" static="1"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<unknown/>
</f></snow_gl_get_uniform_location>
		<snow_gl_get_vertex_attrib line="1423" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_get_vertex_attrib>
		<snow_gl_get_vertex_attrib_offset line="1424" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></snow_gl_get_vertex_attrib_offset>
		<snow_gl_hint line="1425" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_hint>
		<snow_gl_is_buffer line="1426" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_buffer>
		<snow_gl_is_enabled line="1427" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_enabled>
		<snow_gl_is_framebuffer line="1428" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_framebuffer>
		<snow_gl_is_program line="1429" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_program>
		<snow_gl_is_renderbuffer line="1430" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_renderbuffer>
		<snow_gl_is_shader line="1431" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_shader>
		<snow_gl_is_texture line="1432" static="1"><f a="">
	<x path="Int"/>
	<x path="Bool"/>
</f></snow_gl_is_texture>
		<snow_gl_line_width line="1433" static="1"><f a="">
	<x path="Float"/>
	<unknown/>
</f></snow_gl_line_width>
		<snow_gl_link_program line="1434" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_link_program>
		<snow_gl_pixel_storei line="1435" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_pixel_storei>
		<snow_gl_polygon_offset line="1436" static="1"><f a=":">
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_polygon_offset>
		<snow_gl_read_pixels line="1437" static="1"><f a=":::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_read_pixels>
		<snow_gl_renderbuffer_storage line="1438" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_renderbuffer_storage>
		<snow_gl_sample_coverage line="1439" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_gl_sample_coverage>
		<snow_gl_scissor line="1440" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_scissor>
		<snow_gl_shader_source line="1441" static="1"><f a=":">
	<x path="Int"/>
	<c path="String"/>
	<unknown/>
</f></snow_gl_shader_source>
		<snow_gl_stencil_func line="1442" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_func>
		<snow_gl_stencil_func_separate line="1443" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_func_separate>
		<snow_gl_stencil_mask line="1444" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_mask>
		<snow_gl_stencil_mask_separate line="1445" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_mask_separate>
		<snow_gl_stencil_op line="1446" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_op>
		<snow_gl_stencil_op_separate line="1447" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_stencil_op_separate>
		<snow_gl_tex_image_2d line="1448" static="1"><f a=":::::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_tex_image_2d>
		<snow_gl_tex_parameterf line="1449" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_tex_parameterf>
		<snow_gl_tex_parameteri line="1450" static="1"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_tex_parameteri>
		<snow_gl_tex_sub_image_2d line="1451" static="1"><f a=":::::::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><c path="snow.platform.native.utils.ByteArray"/></t>
	<t path="Null"><x path="Int"/></t>
	<unknown/>
</f></snow_gl_tex_sub_image_2d>
		<snow_gl_uniform1f line="1452" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform1f>
		<snow_gl_uniform1fv line="1453" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform1fv>
		<snow_gl_uniform1i line="1454" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform1i>
		<snow_gl_uniform1iv line="1455" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform1iv>
		<snow_gl_uniform2f line="1456" static="1"><f a="::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform2f>
		<snow_gl_uniform2fv line="1457" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform2fv>
		<snow_gl_uniform2i line="1458" static="1"><f a="::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform2i>
		<snow_gl_uniform2iv line="1459" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform2iv>
		<snow_gl_uniform3f line="1460" static="1"><f a=":::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform3f>
		<snow_gl_uniform3fv line="1461" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform3fv>
		<snow_gl_uniform3i line="1462" static="1"><f a=":::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform3i>
		<snow_gl_uniform3iv line="1463" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform3iv>
		<snow_gl_uniform4f line="1464" static="1"><f a="::::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_uniform4f>
		<snow_gl_uniform4fv line="1465" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform4fv>
		<snow_gl_uniform4i line="1466" static="1"><f a="::::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform4i>
		<snow_gl_uniform4iv line="1467" static="1"><f a=":">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_uniform4iv>
		<snow_gl_uniform_matrix line="1468" static="1"><f a=":::">
	<t path="snow.platform.native.render.opengl.GLUniformLocation"/>
	<x path="Bool"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_uniform_matrix>
		<snow_gl_use_program line="1469" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_use_program>
		<snow_gl_validate_program line="1470" static="1"><f a="">
	<x path="Int"/>
	<unknown/>
</f></snow_gl_validate_program>
		<snow_gl_version line="1471" static="1"><f a=""><c path="String"/></f></snow_gl_version>
		<snow_gl_vertex_attrib1f line="1472" static="1"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib1f>
		<snow_gl_vertex_attrib1fv line="1473" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib1fv>
		<snow_gl_vertex_attrib2f line="1474" static="1"><f a="::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib2f>
		<snow_gl_vertex_attrib2fv line="1475" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib2fv>
		<snow_gl_vertex_attrib3f line="1476" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib3f>
		<snow_gl_vertex_attrib3fv line="1477" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib3fv>
		<snow_gl_vertex_attrib4f line="1478" static="1"><f a="::::">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<unknown/>
</f></snow_gl_vertex_attrib4f>
		<snow_gl_vertex_attrib4fv line="1479" static="1"><f a=":">
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_gl_vertex_attrib4fv>
		<snow_gl_vertex_attrib_pointer line="1480" static="1"><f a=":::::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_vertex_attrib_pointer>
		<snow_gl_viewport line="1481" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_gl_viewport>
		<meta><m n=":buildXml"><e><![CDATA["<include name='${haxelib:snow}/GLN.xml'/>"]]></e></m></meta>
	</class>
	<typedef path="snow.platform.native.utils.ArrayBuffer" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ArrayBuffer.hx"><c path="snow.platform.native.utils.ByteArray"/></typedef>
	<class path="snow.utils.IMemoryRange" params="" file="/Users/sven/dev/snow/snow/utils/IMemoryRange.hx" interface="1">
		<getByteBuffer public="1" set="method"><f a=""><t path="snow.utils.ByteArray"/></f></getByteBuffer>
		<getStart public="1" set="method"><f a=""><x path="Int"/></f></getStart>
		<getLength public="1" set="method"><f a=""><x path="Int"/></f></getLength>
	</class>
	<class path="snow.platform.native.utils.ArrayBufferView" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ArrayBufferView.hx">
		<implements path="snow.utils.IMemoryRange"/>
		<buffer public="1" set="null"><c path="snow.platform.native.utils.ByteArray"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<bytes><t path="haxe.io.BytesData"/></bytes>
		<getByteBuffer public="1" get="inline" set="null" line="67"><f a=""><c path="snow.platform.native.utils.ByteArray"/></f></getByteBuffer>
		<getLength public="1" get="inline" set="null" line="73"><f a=""><x path="Int"/></f></getLength>
		<getStart public="1" get="inline" set="null" line="79"><f a=""><x path="Int"/></f></getStart>
		<getInt8 public="1" get="inline" set="null" line="85"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt8>
		<setInt8 public="1" get="inline" set="null" line="96"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt8>
		<getUInt8 public="1" get="inline" set="null" line="107"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt8>
		<setUInt8 public="1" get="inline" set="null" line="118"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt8>
		<getInt16 public="1" get="inline" set="null" line="129"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt16>
		<setInt16 public="1" get="inline" set="null" line="140"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt16>
		<getUInt16 public="1" get="inline" set="null" line="151"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt16>
		<setUInt16 public="1" get="inline" set="null" line="162"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt16>
		<getInt32 public="1" get="inline" set="null" line="173"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getInt32>
		<setInt32 public="1" get="inline" set="null" line="184"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt32>
		<getUInt32 public="1" get="inline" set="null" line="195"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></getUInt32>
		<setUInt32 public="1" get="inline" set="null" line="206"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setUInt32>
		<getFloat32 public="1" get="inline" set="null" line="217"><f a="position">
	<x path="Int"/>
	<x path="Float"/>
</f></getFloat32>
		<setFloat32 public="1" get="inline" set="null" line="228"><f a="position:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setFloat32>
		<new get="inline" set="null" line="21"><f a="lengthOrBuffer:?byteOffset:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.utils.IDataInput" params="" file="/Users/sven/dev/snow/snow/utils/IDataInput.hx" interface="1">
		<bytesAvailable public="1" get="accessor" set="null"><x path="Int"/></bytesAvailable>
		<endian public="1" get="accessor" set="accessor"><c path="String"/></endian>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="outData:?inOffset:?inLen">
	<t path="snow.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUnsignedByte public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="inLen">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<get_bytesAvailable set="method"><f a=""><x path="Int"/></f></get_bytesAvailable>
		<get_endian set="method"><f a=""><c path="String"/></f></get_endian>
		<set_endian set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></set_endian>
	</class>
	<class path="snow.platform.native.utils.ByteArray" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ByteArray.hx">
		<extends path="haxe.io.Bytes"/>
		<implements path="snow.utils.IMemoryRange"/>
		<implements path="snow.utils.IDataInput"/>
		<fromBytes public="1" get="inline" set="null" line="206" static="1"><f a="inBytes">
	<c path="haxe.io.Bytes"/>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></fromBytes>
		<readFile public="1" get="inline" set="null" line="620" static="1"><f a="inString:?async:?onload" v=":false:null">
	<c path="String"/>
	<x path="Bool"/>
	<f a="">
		<c path="snow.platform.native.utils.ByteArray"/>
		<x path="Void"/>
	</f>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></readFile>
		<BIG_ENDIAN public="1" get="inline" set="null" line="725" static="1"><c path="String"/></BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" get="inline" set="null" line="726" static="1"><c path="String"/></LITTLE_ENDIAN>
		<std_double_bytes line="750" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></std_double_bytes>
		<std_double_of_bytes line="751" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></std_double_of_bytes>
		<std_float_bytes line="752" static="1"><f a=":">
	<x path="Float"/>
	<x path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></std_float_bytes>
		<std_float_of_bytes line="753" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></std_float_of_bytes>
		<snow_lzma_encode line="755" static="1"><f a="">
	<unknown/>
	<t path="haxe.io.BytesData"/>
</f></snow_lzma_encode>
		<snow_lzma_decode line="756" static="1"><f a="">
	<t path="haxe.io.BytesData"/>
	<t path="haxe.io.BytesData"/>
</f></snow_lzma_decode>
		<snow_byte_array_overwrite_file line="760" static="1"><f a=":">
	<c path="String"/>
	<c path="snow.platform.native.utils.ByteArray"/>
	<unknown/>
</f></snow_byte_array_overwrite_file>
		<snow_byte_array_read_file line="761" static="1"><f a="">
	<c path="String"/>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></snow_byte_array_read_file>
		<bigEndian public="1"><x path="Bool"/></bigEndian>
		<bytesAvailable public="1" get="accessor" set="null"><x path="Int"/></bytesAvailable>
		<endian public="1" get="accessor" set="accessor"><c path="String"/></endian>
		<position public="1"><x path="Int"/></position>
		<byteLength public="1" get="accessor" set="null"><x path="Int"/></byteLength>
		<__get public="1" get="inline" set="null" line="67">
			<f a="pos">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__get>
		<__set public="1" get="inline" set="null" line="78">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__set>
		<asString public="1" get="inline" set="null" line="88"><f a=""><c path="String"/></f></asString>
		<checkData public="1" get="inline" set="null" line="94"><f a="inLength">
	<x path="Int"/>
	<x path="Void"/>
</f></checkData>
		<clear public="1" get="inline" set="null" line="102"><f a=""><x path="Void"/></f></clear>
		<compress public="1" set="method" line="110"><f a="?algorithm" v="null">
	<e path="snow.platform.native.utils.Compression"/>
	<x path="Void"/>
</f></compress>
		<uncompress public="1" set="method" line="150"><f a="?algorithm" v="null">
	<e path="snow.platform.native.utils.Compression"/>
	<x path="Void"/>
</f></uncompress>
		<deflate public="1" set="method" line="194"><f a=""><x path="Void"/></f></deflate>
		<inflate public="1" set="method" line="200"><f a=""><x path="Void"/></f></inflate>
		<getLength public="1" get="inline" set="null" line="216"><f a=""><x path="Int"/></f></getLength>
		<getByteBuffer public="1" get="inline" set="null" line="223"><f a=""><c path="snow.platform.native.utils.ByteArray"/></f></getByteBuffer>
		<getStart public="1" get="inline" set="null" line="229"><f a=""><x path="Int"/></f></getStart>
		<setLength public="1" get="inline" set="null" line="236"><f a="inLength">
	<x path="Int"/>
	<x path="Void"/>
</f></setLength>
		<slice public="1" get="inline" set="null" line="247"><f a="inBegin:?inEnd" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.ByteArray"/>
</f></slice>
		<readBoolean public="1" get="inline" set="null" line="291"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" get="inline" set="null" line="297"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" get="inline" set="null" line="305"><f a="outData:?inOffset:?inLen" v=":0:0">
	<c path="snow.platform.native.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" get="inline" set="null" line="338"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" get="inline" set="null" line="356"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" get="inline" set="null" line="374"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" get="inline" set="null" line="388"><f a="inLen:charSet">
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readShort public="1" get="inline" set="null" line="395"><f a=""><x path="Int"/></f></readShort>
		<readUnsignedByte public="1" get="inline" set="null" line="411"><f a=""><x path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" get="inline" set="null" line="417"><f a=""><x path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" get="inline" set="null" line="431"><f a=""><x path="Int"/></f></readUnsignedShort>
		<readUTF public="1" get="inline" set="null" line="443"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" get="inline" set="null" line="451"><f a="inLen">
	<x path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<write_uncheck get="inline" set="null" line="479"><f a="inByte">
	<x path="Int"/>
	<x path="Void"/>
</f></write_uncheck>
		<writeBoolean public="1" get="inline" set="null" line="489"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" get="inline" set="null" line="495"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" get="inline" set="null" line="507"><f a="bytes:?inOffset:?inLength" v=":0:0">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBytes>
		<writeDouble public="1" get="inline" set="null" line="522"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" get="inline" set="null" line="534"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" get="inline" set="null" line="546"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeShort public="1" get="inline" set="null" line="570"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUnsignedInt public="1" get="inline" set="null" line="584"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<writeUTF public="1" get="inline" set="null" line="590"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" get="inline" set="null" line="603"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeFile public="1" get="inline" set="null" line="632"><f a="inString">
	<c path="String"/>
	<x path="Void"/>
</f></writeFile>
		<ensureElem get="inline" set="null" line="678"><f a="inSize:inUpdateLength">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></ensureElem>
		<internal_from_bytes get="inline" set="null" line="705"><f a="inBytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></internal_from_bytes>
		<ThrowEOFi get="inline" set="null" line="717"><f a=""><x path="Int"/></f></ThrowEOFi>
		<get_bytesAvailable get="inline" set="null" line="729"><f a=""><x path="Int"/></f></get_bytesAvailable>
		<get_byteLength get="inline" set="null" line="733"><f a=""><x path="Int"/></f></get_byteLength>
		<get_endian get="inline" set="null" line="737"><f a=""><c path="String"/></f></get_endian>
		<set_endian get="inline" set="null" line="741"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></set_endian>
		<new public="1" get="inline" set="null" line="37"><f a="?inSize" v="0">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="snow.platform.native.utils.Compression" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/ByteArray.hx" module="snow.platform.native.utils.ByteArray">
		<DEFLATE/>
		<ZLIB/>
		<LZMA/>
		<GZIP/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="snow.platform.native.utils.Float32Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/Float32Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" get="inline" set="null" line="76"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" get="inline" set="null" line="102"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.Float32Array"/>
</f></subarray>
		<__get_d public="1" get="inline" set="null" line="109">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__get_d>
		<__set_d public="1" get="inline" set="null" line="117">
			<f a="index:value">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</__set_d>
		<__get public="1" get="inline" set="null" line="128">
			<f a="index">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="132">
			<f a="index:value">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" get="inline" set="null" line="9"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.utils.Int32Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/Int32Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="78"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="104"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.Int32Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="111">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="112">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.platform.native.utils.UInt8Array" params="" file="/Users/sven/dev/snow/snow/platform/native/utils/UInt8Array.hx">
		<extends path="snow.platform.native.utils.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" set="null"><x path="Int"/></BYTES_PER_ELEMENT>
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="69"><f a="bufferOrArray:?offset" v=":0">
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<subarray public="1" set="method" line="95"><f a="start:?end" v=":null">
	<x path="Int"/>
	<x path="Int"/>
	<c path="snow.platform.native.utils.UInt8Array"/>
</f></subarray>
		<__get public="1" get="inline" set="null" line="102">
			<f a="index">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__get>
		<__set public="1" get="inline" set="null" line="103">
			<f a="index:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</__set>
		<new public="1" set="method" line="11"><f a="bufferOrArray:?start:?length" v=":0:null">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="snow.window.WindowSystemBinding" params="" file="/Users/sven/dev/snow/snow/window/WindowSystem.hx" module="snow.window.WindowSystem">
		<implements path="snow.utils.AbstractClass"/>
		<manager public="1"><c path="snow.window.Windowing"/></manager>
		<lib public="1"><c path="snow.Snow"/></lib>
		<init public="1" set="method" line="35">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the window manager initializes this system</haxe_doc>
		</init>
		<process public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the window manager updates this system</haxe_doc>
		</process>
		<destroy public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called when the window manager destroys this system</haxe_doc>
		</destroy>
		<listen public="1" set="method" line="41">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called to set up any listeners on the given window</haxe_doc>
		</listen>
		<unlisten public="1" set="method" line="43">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Called to remove any listeners on the given window</haxe_doc>
		</unlisten>
		<create public="1" set="method" line="47">
			<f a="render_config:config:on_created">
				<t path="snow.types.RenderConfig"/>
				<t path="snow.types.WindowConfig"/>
				<f a="::">
					<t path="snow.types.WindowHandle"/>
					<x path="Int"/>
					<t path="snow.types.WindowingConfig"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a window with config, calls on_created when complete passing the handle, the ID,
            and the actual config that was used since the requested config could fail</haxe_doc>
		</create>
		<close public="1" set="method" line="49">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Close a given window</haxe_doc>
		</close>
		<show public="1" set="method" line="51">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>reopen this window once closed. Destroyed windows cannot be reopened, it must use create again</haxe_doc>
		</show>
		<destroy_window public="1" set="method" line="53">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Close a given window</haxe_doc>
		</destroy_window>
		<update public="1" set="method" line="55">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Update a given window</haxe_doc>
		</update>
		<render public="1" set="method" line="57">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Render a given window</haxe_doc>
		</render>
		<swap public="1" set="method" line="59">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Swap a given window</haxe_doc>
		</swap>
		<simple_message public="1" set="method" line="61">
			<f a="window:message:?title" v="::''">
				<c path="snow.window.Window"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Display a message on a window</haxe_doc>
		</simple_message>
		<set_size public="1" set="method" line="63">
			<f a="window:w:h">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the size of a window</haxe_doc>
		</set_size>
		<set_position public="1" set="method" line="65">
			<f a="window:x:y">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the position of a window</haxe_doc>
		</set_position>
		<set_title public="1" set="method" line="67">
			<f a="window:title">
				<c path="snow.window.Window"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the title of a window</haxe_doc>
		</set_title>
		<set_max_size public="1" set="method" line="69">
			<f a="window:w:h">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the max size of a window</haxe_doc>
		</set_max_size>
		<set_min_size public="1" set="method" line="71">
			<f a="window:w:h">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the min size of a window</haxe_doc>
		</set_min_size>
		<fullscreen public="1" set="method" line="73">
			<f a="window:fullscreen">
				<c path="snow.window.Window"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the fullscreen state of a window</haxe_doc>
		</fullscreen>
		<bordered public="1" set="method" line="75">
			<f a="window:bordered">
				<c path="snow.window.Window"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the bordered state of a window</haxe_doc>
		</bordered>
		<grab public="1" set="method" line="79">
			<f a="window:grabbed">
				<c path="snow.window.Window"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the grab state of a window</haxe_doc>
		</grab>
		<set_cursor_position public="1" set="method" line="81">
			<f a="window:x:y">
				<c path="snow.window.Window"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the cursor position inside of a given window</haxe_doc>
		</set_cursor_position>
		<system_enable_cursor public="1" set="method" line="86">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle the OS cursor. This is not window specific but system wide</haxe_doc>
		</system_enable_cursor>
		<system_lock_cursor public="1" set="method" line="88">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates.</haxe_doc>
		</system_lock_cursor>
		<system_enable_vsync public="1" set="method" line="90">
			<f a="enable">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Toggle vertical refresh. This is not window specific but context wide, returns 0 on success or -1 if not supported</haxe_doc>
		</system_enable_vsync>
		<display_count public="1" set="method" line="95">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Get the number of displays present</haxe_doc>
		</display_count>
		<display_mode_count public="1" set="method" line="97">
			<f a="display">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Get the number of display modes present</haxe_doc>
		</display_mode_count>
		<display_native_mode public="1" set="method" line="99">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the native mode information of the display by index</haxe_doc>
		</display_native_mode>
		<display_current_mode public="1" set="method" line="101">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the current mode information of the display by index</haxe_doc>
		</display_current_mode>
		<display_mode public="1" set="method" line="103">
			<f a="display:mode_index">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the information from a specific mode index, the index obtrained from iterating with `display_mode_count` value</haxe_doc>
		</display_mode>
		<display_bounds public="1" set="method" line="105">
			<f a="display">
				<x path="Int"/>
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<width><x path="Int"/></width>
					<height><x path="Int"/></height>
				</a>
			</f>
			<haxe_doc>Get the bounds of the display by index</haxe_doc>
		</display_bounds>
		<display_name public="1" set="method" line="107">
			<f a="display">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the name of the display by index, where available</haxe_doc>
		</display_name>
		<haxe_doc>Internal class handled by `Windowing`, a less concrete implementation of the platform window bindings.
    WindowBinding is bound to snow.platform.native.WindowSystem, snow.platform.native.WindowSystem etc</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.window.WindowSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/window/WindowSystem.hx">
		<extends path="snow.window.WindowSystemBinding"/>
		<snow_window_create line="161" static="1"><f a="::">
	<t path="snow.types.RenderConfig"/>
	<t path="snow.types.WindowConfig"/>
	<f a="::">
		<t path="snow.types.WindowHandle"/>
		<x path="Int"/>
		<t path="snow.types.WindowingConfig"/>
		<x path="Void"/>
	</f>
	<unknown/>
</f></snow_window_create>
		<snow_window_close line="162" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_close>
		<snow_window_show line="163" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_show>
		<snow_window_destroy_window line="164" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_destroy_window>
		<snow_window_update line="165" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_update>
		<snow_window_render line="166" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_render>
		<snow_window_swap line="167" static="1"><f a="">
	<t path="snow.types.WindowHandle"/>
	<unknown/>
</f></snow_window_swap>
		<snow_window_simple_message line="168" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></snow_window_simple_message>
		<snow_window_set_size line="169" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_size>
		<snow_window_set_position line="170" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_position>
		<snow_window_set_title line="171" static="1"><f a=":">
	<t path="snow.types.WindowHandle"/>
	<c path="String"/>
	<unknown/>
</f></snow_window_set_title>
		<snow_window_set_max_size line="172" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_max_size>
		<snow_window_set_min_size line="173" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_min_size>
		<snow_window_fullscreen line="174" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Bool"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_fullscreen>
		<snow_window_bordered line="175" static="1"><f a=":">
	<t path="snow.types.WindowHandle"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_window_bordered>
		<snow_window_grab line="176" static="1"><f a=":">
	<t path="snow.types.WindowHandle"/>
	<x path="Bool"/>
	<unknown/>
</f></snow_window_grab>
		<snow_window_set_cursor_position line="177" static="1"><f a="::">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></snow_window_set_cursor_position>
		<snow_system_show_cursor line="181" static="1"><f a="">
	<x path="Bool"/>
	<unknown/>
</f></snow_system_show_cursor>
		<snow_system_lock_cursor line="182" static="1"><f a="">
	<x path="Bool"/>
	<unknown/>
</f></snow_system_lock_cursor>
		<snow_system_enable_vsync line="183" static="1"><f a="">
	<x path="Bool"/>
	<x path="Int"/>
</f></snow_system_enable_vsync>
		<snow_desktop_get_display_count line="187" static="1"><f a=""><x path="Int"/></f></snow_desktop_get_display_count>
		<snow_desktop_get_display_mode_count line="188" static="1"><f a="">
	<x path="Int"/>
	<x path="Int"/>
</f></snow_desktop_get_display_mode_count>
		<snow_desktop_get_display_native_mode line="189" static="1"><f a="">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></snow_desktop_get_display_native_mode>
		<snow_desktop_get_display_current_mode line="190" static="1"><f a="">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></snow_desktop_get_display_current_mode>
		<snow_desktop_get_display_mode line="191" static="1"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></snow_desktop_get_display_mode>
		<snow_desktop_get_display_bounds line="192" static="1"><f a="">
	<x path="Int"/>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
	</a>
</f></snow_desktop_get_display_bounds>
		<snow_desktop_get_display_name line="193" static="1"><f a="">
	<x path="Int"/>
	<c path="String"/>
</f></snow_desktop_get_display_name>
		<init public="1" set="method" line="24" override="1"><f a=""><x path="Void"/></f></init>
		<process public="1" set="method" line="27" override="1"><f a=""><x path="Void"/></f></process>
		<destroy public="1" set="method" line="30" override="1"><f a=""><x path="Void"/></f></destroy>
		<listen public="1" set="method" line="33" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</listen>
		<unlisten public="1" set="method" line="36" override="1">
			<f a="window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</unlisten>
		<create public="1" set="method" line="39" override="1"><f a="render_config:config:on_created">
	<t path="snow.types.RenderConfig"/>
	<t path="snow.types.WindowConfig"/>
	<f a="::">
		<t path="snow.types.WindowHandle"/>
		<x path="Int"/>
		<t path="snow.types.WindowingConfig"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></create>
		<close public="1" set="method" line="43" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></close>
		<show public="1" set="method" line="47" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></show>
		<destroy_window public="1" set="method" line="51" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></destroy_window>
		<update public="1" set="method" line="55" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></update>
		<render public="1" set="method" line="59" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></render>
		<swap public="1" set="method" line="63" override="1"><f a="window">
	<c path="snow.window.Window"/>
	<x path="Void"/>
</f></swap>
		<simple_message public="1" set="method" line="67" override="1"><f a="window:message:?title" v="::''">
	<c path="snow.window.Window"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></simple_message>
		<set_size public="1" set="method" line="71" override="1"><f a="window:w:h">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_size>
		<set_position public="1" set="method" line="75" override="1"><f a="window:x:y">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_position>
		<set_title public="1" set="method" line="79" override="1"><f a="window:title">
	<c path="snow.window.Window"/>
	<c path="String"/>
	<x path="Void"/>
</f></set_title>
		<set_max_size public="1" set="method" line="83" override="1"><f a="window:w:h">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_max_size>
		<set_min_size public="1" set="method" line="87" override="1"><f a="window:w:h">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_min_size>
		<fullscreen public="1" set="method" line="91" override="1"><f a="window:fullscreen">
	<c path="snow.window.Window"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></fullscreen>
		<bordered public="1" set="method" line="95" override="1"><f a="window:bordered">
	<c path="snow.window.Window"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></bordered>
		<grab public="1" set="method" line="99" override="1"><f a="window:grabbed">
	<c path="snow.window.Window"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></grab>
		<set_cursor_position public="1" set="method" line="103" override="1"><f a="window:x:y">
	<c path="snow.window.Window"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_cursor_position>
		<system_lock_cursor public="1" set="method" line="111" override="1">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates.</haxe_doc>
		</system_lock_cursor>
		<system_enable_cursor public="1" set="method" line="116" override="1">
			<f a="enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle the OS cursor. This is not window specific but system wide</haxe_doc>
		</system_enable_cursor>
		<system_enable_vsync public="1" set="method" line="121" override="1">
			<f a="enable">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Toggle vertical refresh. This is not window specific but context wide</haxe_doc>
		</system_enable_vsync>
		<display_count public="1" set="method" line="129" override="1"><f a=""><x path="Int"/></f></display_count>
		<display_mode_count public="1" set="method" line="133" override="1"><f a="display">
	<x path="Int"/>
	<x path="Int"/>
</f></display_mode_count>
		<display_native_mode public="1" set="method" line="137" override="1"><f a="display">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></display_native_mode>
		<display_current_mode public="1" set="method" line="141" override="1"><f a="display">
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></display_current_mode>
		<display_mode public="1" set="method" line="145" override="1"><f a="display:mode_index">
	<x path="Int"/>
	<x path="Int"/>
	<t path="snow.types.DisplayMode"/>
</f></display_mode>
		<display_bounds public="1" set="method" line="149" override="1"><f a="display">
	<x path="Int"/>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
	</a>
</f></display_bounds>
		<display_name public="1" set="method" line="153" override="1"><f a="display">
	<x path="Int"/>
	<c path="String"/>
</f></display_name>
		<new public="1" set="method" line="17"><f a="_manager:_lib">
	<c path="snow.window.Windowing"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<class path="snow.platform.native.window.sdl.WindowSystem" params="" file="/Users/sven/dev/snow/snow/platform/native/window/sdl/WindowSystem.hx">
		<extends path="snow.platform.native.window.WindowSystem"/>
		<new public="1" set="method" line="11"><f a="_manager:_lib">
	<c path="snow.window.Windowing"/>
	<c path="snow.Snow"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="snow.render.opengl.GL" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx"><c path="snow.platform.native.render.opengl.GL"/></typedef>
	<typedef path="snow.render.opengl.GLActiveInfo" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><t path="snow.platform.native.render.opengl.GLActiveInfo"/></typedef>
	<typedef path="snow.render.opengl.GLBuffer" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLBuffer"/></typedef>
	<typedef path="snow.render.opengl.GLContextAttributes" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><t path="snow.platform.native.render.opengl.GLContextAttributes"/></typedef>
	<typedef path="snow.render.opengl.GLFramebuffer" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><x path="snow.platform.native.render.opengl.GLFramebuffer"/></typedef>
	<typedef path="snow.render.opengl.GLProgram" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLProgram"/></typedef>
	<typedef path="snow.render.opengl.GLRenderbuffer" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><x path="snow.platform.native.render.opengl.GLRenderbuffer"/></typedef>
	<typedef path="snow.render.opengl.GLShader" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLShader"/></typedef>
	<typedef path="snow.render.opengl.GLTexture" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><c path="snow.platform.native.render.opengl.GLTexture"/></typedef>
	<typedef path="snow.render.opengl.GLUniformLocation" params="" file="/Users/sven/dev/snow/snow/render/opengl/GL.hx" module="snow.render.opengl.GL"><t path="snow.platform.native.render.opengl.GLUniformLocation"/></typedef>
	<typedef path="snow.types.Key" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><c path="snow.input.Keycodes"/></typedef>
	<typedef path="snow.types.Scan" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><c path="snow.input.Scancodes"/></typedef>
	<typedef path="snow.types.AssetInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<type>
				<c path="String"/>
				<haxe_doc>a convenience type indicator</haxe_doc>
			</type>
			<path>
				<c path="String"/>
				<haxe_doc>the location of the asset</haxe_doc>
			</path>
			<id>
				<c path="String"/>
				<haxe_doc>the asset id</haxe_doc>
			</id>
			<ext>
				<c path="String"/>
				<haxe_doc>the asset extension, if any</haxe_doc>
			</ext>
		</a>
		<haxe_doc>Information for a single asset</haxe_doc>
	</typedef>
	<abstract path="snow.types.AssetType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>A type to identify assets when stored as an Asset</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.AssetType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<bytes public="1" get="inline" set="null" line="33" static="1">
		<x path="snow.types.AssetType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</bytes>
	<text public="1" get="inline" set="null" line="34" static="1">
		<x path="snow.types.AssetType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</text>
	<image public="1" get="inline" set="null" line="35" static="1">
		<x path="snow.types.AssetType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</image>
	<audio public="1" get="inline" set="null" line="36" static="1">
		<x path="snow.types.AssetType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</audio>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.AssetType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<bytes public="1" get="inline" set="null" line="33" static="1">
			<x path="snow.types.AssetType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</bytes>
		<text public="1" get="inline" set="null" line="34" static="1">
			<x path="snow.types.AssetType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</text>
		<image public="1" get="inline" set="null" line="35" static="1">
			<x path="snow.types.AssetType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</image>
		<audio public="1" get="inline" set="null" line="36" static="1">
			<x path="snow.types.AssetType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</audio>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="snow.types.AssetBytesOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetBytes"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<async>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</async>
		</a>
		<haxe_doc>The options for an `AssetBytes` asset.
    Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</typedef>
	<typedef path="snow.types.AssetTextOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetText"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<async>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</async>
		</a>
		<haxe_doc>The options for an `AssetText` asset.
    Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</typedef>
	<typedef path="snow.types.AssetImageOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetImage"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<components>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
			</components>
			<bytes>
				<t path="snow.utils.ByteArray"/>
				<meta><m n=":optional"/></meta>
			</bytes>
		</a>
		<haxe_doc>The options for an `AssetImage` asset.
    Get assets from the `Assets` class, via `app.assets`</haxe_doc>
	</typedef>
	<typedef path="snow.types.AssetAudioOptions" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<type>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
			</type>
			<strict>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</strict>
			<onload>
				<t path="Null"><f a="">
	<c path="snow.assets.AssetAudio"/>
	<x path="Void"/>
</f></t>
				<meta><m n=":optional"/></meta>
			</onload>
			<load>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
			</load>
		</a>
		<haxe_doc>The options for an `AssetAudio` asset</haxe_doc>
	</typedef>
	<typedef path="snow.types.SnowConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<has_loop>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>whether or not the core should run a loop at all, default: true</haxe_doc>
			</has_loop>
			<config_runtime_path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default place to find the runtime config file, default: `config.json`</haxe_doc>
			</config_runtime_path>
			<config_custom_runtime>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set, no default runtime config will be loaded (use `App.config` to load a config manually). default: false</haxe_doc>
			</config_custom_runtime>
			<config_custom_assets>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If set, no default asset list will be loaded (use `App.config` to load a config manually). default: false</haxe_doc>
			</config_custom_assets>
			<config_assets_path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The default place to find the asset manifest file, default: `manifest`</haxe_doc>
			</config_assets_path>
		</a>
		<haxe_doc>Snow specific configurations, set from build config</haxe_doc>
	</typedef>
	<typedef path="snow.types.AppConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window>
				<t path="Null"><t path="snow.types.WindowConfig"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the window config for the default window, if `has_window` is true. default: see `WindowConfig` docs</haxe_doc>
			</window>
			<web>
				<t path="Null"><t path="snow.types.AppConfigWeb"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>config specific to the web target</haxe_doc>
			</web>
			<runtime>
				<d/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the user specific config, by default, read from a json file at runtime</haxe_doc>
			</runtime>
			<render>
				<t path="Null"><t path="snow.types.RenderConfig"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The render config that specifies rendering and context backend specifics.</haxe_doc>
			</render>
			<native>
				<t path="Null"><t path="snow.types.AppConfigNative"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>config specific to the web target</haxe_doc>
			</native>
			<has_window>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>whether or not to create and run a default window, default: true</haxe_doc>
			</has_window>
			<assets>
				<c path="Array"><t path="snow.types.AssetInfo"/></c>
				<meta><m n=":optional"/></meta>
				<haxe_doc>the raw list of assets. use the app.assets from Snow for access to these. read from a manifest file by default</haxe_doc>
			</assets>
		</a>
		<haxe_doc>The runtime application config info</haxe_doc>
	</typedef>
	<typedef path="snow.types.AppConfigWeb" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><a>
	<true_fullscreen>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true, native fullscreen will be requested from the user.
            If not, the canvas will fill the window size instead.
            Take note : true fullscreen requests only work when driven by a user event (click/keys).
            You cannot force fullscreen on web. default: false</haxe_doc>
	</true_fullscreen>
	<no_context_menu>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>If true, right clicking will consume the event on the canvas. `event.preventDefault` is used. default: true</haxe_doc>
	</no_context_menu>
</a></typedef>
	<typedef path="snow.types.AppConfigNative" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><a>
	<audio_buffer_length>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The default length of a single stream buffer in bytes. default:176400, This is ~1 sec in 16 bit mono.</haxe_doc>
	</audio_buffer_length>
	<audio_buffer_count>
		<t path="Null"><x path="Int"/></t>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The default number of audio buffers to use for a single stream. Set no less than 2, as it's a queue. See `Audio` docs. default:4</haxe_doc>
	</audio_buffer_count>
</a></typedef>
	<typedef path="snow.types.FileFilter" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types"><a>
	<extension>
		<c path="String"/>
		<haxe_doc>An extension for the filter. i.e `md`, `txt`, `png` or a special `*` for any file type.</haxe_doc>
	</extension>
	<desc>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
		<haxe_doc>An optional description for this filter i.e `markdown files`, `text files`, `all files`</haxe_doc>
	</desc>
</a></typedef>
	<typedef path="snow.types.ImageInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<width_actual>
				<x path="Int"/>
				<haxe_doc>The actual width, used when image is automatically padded to POT</haxe_doc>
			</width_actual>
			<width>
				<x path="Int"/>
				<haxe_doc>image width from source image</haxe_doc>
			</width>
			<id>
				<c path="String"/>
				<haxe_doc>source asset id</haxe_doc>
			</id>
			<height_actual>
				<x path="Int"/>
				<haxe_doc>The actual height, used when image is automatically padded to POT</haxe_doc>
			</height_actual>
			<height>
				<x path="Int"/>
				<haxe_doc>image height from source image</haxe_doc>
			</height>
			<data>
				<t path="snow.utils.UInt8Array"/>
				<haxe_doc>image data</haxe_doc>
			</data>
			<bpp_source>
				<x path="Int"/>
				<haxe_doc>source bits per pixel</haxe_doc>
			</bpp_source>
			<bpp>
				<x path="Int"/>
				<haxe_doc>used bits per pixel</haxe_doc>
			</bpp>
		</a>
		<haxe_doc>Information about an image file/data</haxe_doc>
	</typedef>
	<abstract path="snow.types.AudioFormatType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>The type of audio format</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.AudioFormatType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="171" static="1">
		<x path="snow.types.AudioFormatType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</unknown>
	<ogg public="1" get="inline" set="null" line="172" static="1">
		<x path="snow.types.AudioFormatType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ogg>
	<wav public="1" get="inline" set="null" line="173" static="1">
		<x path="snow.types.AudioFormatType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</wav>
	<pcm public="1" get="inline" set="null" line="174" static="1">
		<x path="snow.types.AudioFormatType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</pcm>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.AudioFormatType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="171" static="1">
			<x path="snow.types.AudioFormatType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</unknown>
		<ogg public="1" get="inline" set="null" line="172" static="1">
			<x path="snow.types.AudioFormatType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ogg>
		<wav public="1" get="inline" set="null" line="173" static="1">
			<x path="snow.types.AudioFormatType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</wav>
		<pcm public="1" get="inline" set="null" line="174" static="1">
			<x path="snow.types.AudioFormatType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</pcm>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="snow.types.AudioDataInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<rate>
				<x path="Int"/>
				<haxe_doc>hz rate</haxe_doc>
			</rate>
			<length_pcm>
				<x path="Int"/>
				<haxe_doc>the pcm uncompressed raw length in bytes</haxe_doc>
			</length_pcm>
			<length>
				<x path="Int"/>
				<haxe_doc>the file length in bytes</haxe_doc>
			</length>
			<channels>
				<x path="Int"/>
				<haxe_doc>number of channels</haxe_doc>
			</channels>
			<bytes>
				<t path="snow.utils.ByteArray"/>
				<haxe_doc>sound raw data</haxe_doc>
			</bytes>
			<bits_per_sample>
				<x path="Int"/>
				<haxe_doc>bits per sample, 8 / 16</haxe_doc>
			</bits_per_sample>
			<bitrate>
				<x path="Int"/>
				<haxe_doc>sound bitrate</haxe_doc>
			</bitrate>
		</a>
		<haxe_doc>The platform specific implementation detail about the audio data</haxe_doc>
	</typedef>
	<typedef path="snow.types.AudioInfo" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<id>
				<c path="String"/>
				<haxe_doc>file source id</haxe_doc>
			</id>
			<handle>
				<t path="snow.types.AudioHandle"/>
				<haxe_doc>the platform audio handle for later manipulation</haxe_doc>
			</handle>
			<format>
				<x path="Int"/>
				<haxe_doc>format. Use AudioFormatType</haxe_doc>
			</format>
			<data>
				<t path="snow.types.AudioDataInfo"/>
				<haxe_doc>the platform audio data info</haxe_doc>
			</data>
		</a>
		<haxe_doc>Information about an audio file/data</haxe_doc>
	</typedef>
	<typedef path="snow.types.AudioDataBlob" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<complete>
				<x path="Bool"/>
				<haxe_doc>The data stored in this blob</haxe_doc>
			</complete>
			<bytes>
				<t path="snow.utils.ByteArray"/>
				<haxe_doc>True if the file has reached the end of the data in this blob</haxe_doc>
			</bytes>
		</a>
		<haxe_doc>Information about an audio portion requested via assets</haxe_doc>
	</typedef>
	<typedef path="snow.types.RenderConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<stencil_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of red bits for the rendering to use. Unless you need to change this, don't. default: system</haxe_doc>
			</stencil_bits>
			<stencil>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether a stencil buffer should be created. default:false</haxe_doc>
			</stencil>
			<red_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of red bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</red_bits>
			<opengl>
				<t path="Null"><t path="snow.types.RenderConfigOpenGL"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>OpenGL render context specific settings</haxe_doc>
			</opengl>
			<green_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of green bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</green_bits>
			<depth_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of depth bits for the rendering to use. Unless you need to change this, don't. default: system</haxe_doc>
			</depth_bits>
			<depth>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether a stencil buffer should be created. default:false</haxe_doc>
			</depth>
			<blue_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of blue bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</blue_bits>
			<antialiasing>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>a value of `0`, `2`, `4`, `8` or other valid antialiasing flags. default: 0</haxe_doc>
			</antialiasing>
			<alpha_bits>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>set the number of alpha bits for the rendering to use. Unless you need to change this, don't. default: 8</haxe_doc>
			</alpha_bits>
		</a>
		<haxe_doc>Config specific to the rendering context that would be used when creating windows</haxe_doc>
	</typedef>
	<abstract path="snow.types.OpenGLProfile" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>A type of OpenGL context profile to request. see RenderConfigOpenGL for info</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.OpenGLProfile_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<compatibility public="1" get="inline" set="null" line="268" static="1">
		<x path="snow.types.OpenGLProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</compatibility>
	<core public="1" get="inline" set="null" line="269" static="1">
		<x path="snow.types.OpenGLProfile"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</core>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.OpenGLProfile_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<compatibility public="1" get="inline" set="null" line="268" static="1">
			<x path="snow.types.OpenGLProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</compatibility>
		<core public="1" get="inline" set="null" line="269" static="1">
			<x path="snow.types.OpenGLProfile"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</core>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="snow.types.WindowingConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<render_config><t path="snow.types.RenderConfig"/></render_config>
			<config><t path="snow.types.WindowConfig"/></config>
		</a>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<typedef path="snow.types.RenderConfigOpenGL" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<profile>
				<t path="Null"><x path="snow.types.OpenGLProfile"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The OpenGL context profile to request</haxe_doc>
			</profile>
			<minor>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The minor OpenGL version to request</haxe_doc>
			</minor>
			<major>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The major OpenGL version to request</haxe_doc>
			</major>
		</a>
		<haxe_doc>Config specific to an OpenGL rendering context.
    Note that these are hints to the system,
    you must always check the values after initializing
    for what you actually received. The OS/driver decides.</haxe_doc>
	</typedef>
	<typedef path="snow.types.WindowConfig" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<y>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window x at creation. Leave this alone to use the OS default.</haxe_doc>
			</y>
			<x>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window y at creation. Leave this alone to use the OS default.</haxe_doc>
			</x>
			<width>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window height at creation, default: 960</haxe_doc>
			</width>
			<title>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window title, default: 'snow app'</haxe_doc>
			</title>
			<resizable>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>allow the window to be resized, default: true</haxe_doc>
			</resizable>
			<no_input>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>disables input arriving at/from this window. default: false</haxe_doc>
			</no_input>
			<height>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>window width at creation, default: 640</haxe_doc>
			</height>
			<fullscreen_desktop>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If true, the users native desktop resolution will be used for fullscreen instead of the specified window size. default: true</haxe_doc>
			</fullscreen_desktop>
			<fullscreen>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>create in fullscreen, default: false, `mobile` true</haxe_doc>
			</fullscreen>
			<borderless>
				<t path="Null"><x path="Bool"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>create as a borderless window, default: false</haxe_doc>
			</borderless>
		</a>
		<haxe_doc>Window configuration information for creating windows</haxe_doc>
	</typedef>
	<typedef path="snow.types.SystemEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window>
				<t path="Null"><t path="snow.types.WindowEvent"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If type is `window` this will be populated, otherwise null</haxe_doc>
			</window>
			<type>
				<t path="Null"><x path="snow.types.SystemEventType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of system event this event is. SystemEventType</haxe_doc>
			</type>
			<input>
				<t path="Null"><t path="snow.types.InputEvent"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If type is `input` this will be populated, otherwise null</haxe_doc>
			</input>
			<file>
				<t path="Null"><t path="snow.types.FileEvent"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>If type is `file` this will be populated, otherwise null</haxe_doc>
			</file>
		</a>
		<haxe_doc>A system event</haxe_doc>
	</typedef>
	<typedef path="snow.types.WindowEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window_id>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The window id from which this event originated</haxe_doc>
			</window_id>
			<type>
				<t path="Null"><x path="snow.types.WindowEventType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of window event this was. Use WindowEventType</haxe_doc>
			</type>
			<timestamp>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The time in seconds that this event occured, useful for deltas</haxe_doc>
			</timestamp>
			<event>
				<d/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The raw platform event data, only useful if you are implementing
            a new platform or lack access to data from the system that snow does not expose</haxe_doc>
			</event>
		</a>
		<haxe_doc>A system window event</haxe_doc>
	</typedef>
	<typedef path="snow.types.FileEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<type>
				<t path="Null"><x path="snow.types.FileEventType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of file watch event, modify/create/delete. Use FileEventType</haxe_doc>
			</type>
			<timestamp>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The time in seconds when this event was fired</haxe_doc>
			</timestamp>
			<path>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The absolute path that was notifying</haxe_doc>
			</path>
		</a>
		<haxe_doc>A system file watch event</haxe_doc>
	</typedef>
	<typedef path="snow.types.InputEvent" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<window_id>
				<t path="Null"><x path="Int"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The window id from which this event originated</haxe_doc>
			</window_id>
			<type>
				<t path="Null"><x path="snow.types.InputEventType"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of input event this was. Use InputEventType</haxe_doc>
			</type>
			<timestamp>
				<t path="Null"><x path="Float"/></t>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The time in seconds that this event occured, useful for deltas</haxe_doc>
			</timestamp>
			<event>
				<d/>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The raw platform event data, only useful if you are implementing
            a new platform or lack access to data from the system that snow does not expose</haxe_doc>
			</event>
		</a>
		<haxe_doc>A system input event</haxe_doc>
	</typedef>
	<typedef path="snow.types.DisplayMode" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<width><x path="Int"/></width>
			<refresh_rate><x path="Int"/></refresh_rate>
			<height><x path="Int"/></height>
			<format><x path="Int"/></format>
		</a>
		<haxe_doc>Information about a display mode</haxe_doc>
	</typedef>
	<typedef path="snow.types.WindowHandle" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>A platform window handle</haxe_doc>
	</typedef>
	<typedef path="snow.types.AudioHandle" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<t path="Null"><x path="Float"/></t>
		<haxe_doc>A platform window handle</haxe_doc>
	</typedef>
	<abstract path="snow.types.TextEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>A text specific event event type</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.TextEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="404" static="1">
		<x path="snow.types.TextEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An unknown text event</haxe_doc>
	</unknown>
	<edit public="1" get="inline" set="null" line="406" static="1">
		<x path="snow.types.TextEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An edit text typing event</haxe_doc>
	</edit>
	<input public="1" get="inline" set="null" line="408" static="1">
		<x path="snow.types.TextEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An input text typing event</haxe_doc>
	</input>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.TextEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="404" static="1">
			<x path="snow.types.TextEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An unknown text event</haxe_doc>
		</unknown>
		<edit public="1" get="inline" set="null" line="406" static="1">
			<x path="snow.types.TextEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An edit text typing event</haxe_doc>
		</edit>
		<input public="1" get="inline" set="null" line="408" static="1">
			<x path="snow.types.TextEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An input text typing event</haxe_doc>
		</input>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.types.GamepadDeviceEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>A gamepad device event type</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.GamepadDeviceEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="416" static="1">
		<x path="snow.types.GamepadDeviceEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A unknown device event</haxe_doc>
	</unknown>
	<device_added public="1" get="inline" set="null" line="418" static="1">
		<x path="snow.types.GamepadDeviceEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A device added event</haxe_doc>
	</device_added>
	<device_removed public="1" get="inline" set="null" line="420" static="1">
		<x path="snow.types.GamepadDeviceEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A device removed event</haxe_doc>
	</device_removed>
	<device_remapped public="1" get="inline" set="null" line="422" static="1">
		<x path="snow.types.GamepadDeviceEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A device was remapped</haxe_doc>
	</device_remapped>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.GamepadDeviceEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="416" static="1">
			<x path="snow.types.GamepadDeviceEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A unknown device event</haxe_doc>
		</unknown>
		<device_added public="1" get="inline" set="null" line="418" static="1">
			<x path="snow.types.GamepadDeviceEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A device added event</haxe_doc>
		</device_added>
		<device_removed public="1" get="inline" set="null" line="420" static="1">
			<x path="snow.types.GamepadDeviceEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A device removed event</haxe_doc>
		</device_removed>
		<device_remapped public="1" get="inline" set="null" line="422" static="1">
			<x path="snow.types.GamepadDeviceEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A device was remapped</haxe_doc>
		</device_remapped>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="snow.types.ModState" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<a>
			<shift>
				<x path="Bool"/>
				<haxe_doc>left or right shift key is down</haxe_doc>
			</shift>
			<rshift>
				<x path="Bool"/>
				<haxe_doc>right shift key is down</haxe_doc>
			</rshift>
			<rmeta>
				<x path="Bool"/>
				<haxe_doc>right windows/command key is down</haxe_doc>
			</rmeta>
			<rctrl>
				<x path="Bool"/>
				<haxe_doc>right ctrl key is down</haxe_doc>
			</rctrl>
			<ralt>
				<x path="Bool"/>
				<haxe_doc>right alt/option key is down</haxe_doc>
			</ralt>
			<num>
				<x path="Bool"/>
				<haxe_doc>numlock is enabled</haxe_doc>
			</num>
			<none>
				<x path="Bool"/>
				<haxe_doc>no modifiers are down</haxe_doc>
			</none>
			<mode>
				<x path="Bool"/>
				<haxe_doc>mode key is down</haxe_doc>
			</mode>
			<meta>
				<x path="Bool"/>
				<haxe_doc>left or right windows/command key is down</haxe_doc>
			</meta>
			<lshift>
				<x path="Bool"/>
				<haxe_doc>left shift key is down</haxe_doc>
			</lshift>
			<lmeta>
				<x path="Bool"/>
				<haxe_doc>left windows/command key is down</haxe_doc>
			</lmeta>
			<lctrl>
				<x path="Bool"/>
				<haxe_doc>left ctrl key is down</haxe_doc>
			</lctrl>
			<lalt>
				<x path="Bool"/>
				<haxe_doc>left alt/option key is down</haxe_doc>
			</lalt>
			<ctrl>
				<x path="Bool"/>
				<haxe_doc>left or right ctrl key is down</haxe_doc>
			</ctrl>
			<caps>
				<x path="Bool"/>
				<haxe_doc>capslock is enabled</haxe_doc>
			</caps>
			<alt>
				<x path="Bool"/>
				<haxe_doc>left or right alt/option key is down</haxe_doc>
			</alt>
		</a>
		<haxe_doc>Input modifier state</haxe_doc>
	</typedef>
	<abstract path="snow.types.SystemEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.SystemEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="475" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An unknown system event</haxe_doc>
	</unknown>
	<init public="1" get="inline" set="null" line="477" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An internal system init event</haxe_doc>
	</init>
	<ready public="1" get="inline" set="null" line="479" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An internal system ready event</haxe_doc>
	</ready>
	<update public="1" get="inline" set="null" line="481" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An internal system update event</haxe_doc>
	</update>
	<shutdown public="1" get="inline" set="null" line="483" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An system shutdown event</haxe_doc>
	</shutdown>
	<window public="1" get="inline" set="null" line="485" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An system window event</haxe_doc>
	</window>
	<input public="1" get="inline" set="null" line="487" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An system input event</haxe_doc>
	</input>
	<quit public="1" get="inline" set="null" line="492" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An system quit event. Initiated by user, can be cancelled/ignored</haxe_doc>
	</quit>
	<app_terminating public="1" get="inline" set="null" line="494" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An system terminating event, called by the OS (mobile specific)</haxe_doc>
	</app_terminating>
	<app_lowmemory public="1" get="inline" set="null" line="496" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An system low memory event, clear memory if you can. Called by the OS (mobile specific)</haxe_doc>
	</app_lowmemory>
	<app_willenterbackground public="1" get="inline" set="null" line="498" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for just before the app enters the background, called by the OS (mobile specific)</haxe_doc>
	</app_willenterbackground>
	<app_didenterbackground public="1" get="inline" set="null" line="500" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the app enters the background, called by the OS (mobile specific)</haxe_doc>
	</app_didenterbackground>
	<app_willenterforeground public="1" get="inline" set="null" line="502" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for just before the app enters the foreground, called by the OS (mobile specific)</haxe_doc>
	</app_willenterforeground>
	<app_didenterforeground public="1" get="inline" set="null" line="504" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the app enters the foreground, called by the OS (mobile specific)</haxe_doc>
	</app_didenterforeground>
	<file public="1" get="inline" set="null" line="506" static="1">
		<x path="snow.types.SystemEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the a file watch notification occurs</haxe_doc>
	</file>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.SystemEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="475" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An unknown system event</haxe_doc>
		</unknown>
		<init public="1" get="inline" set="null" line="477" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An internal system init event</haxe_doc>
		</init>
		<ready public="1" get="inline" set="null" line="479" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An internal system ready event</haxe_doc>
		</ready>
		<update public="1" get="inline" set="null" line="481" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An internal system update event</haxe_doc>
		</update>
		<shutdown public="1" get="inline" set="null" line="483" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An system shutdown event</haxe_doc>
		</shutdown>
		<window public="1" get="inline" set="null" line="485" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An system window event</haxe_doc>
		</window>
		<input public="1" get="inline" set="null" line="487" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An system input event</haxe_doc>
		</input>
		<quit public="1" get="inline" set="null" line="492" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An system quit event. Initiated by user, can be cancelled/ignored</haxe_doc>
		</quit>
		<app_terminating public="1" get="inline" set="null" line="494" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An system terminating event, called by the OS (mobile specific)</haxe_doc>
		</app_terminating>
		<app_lowmemory public="1" get="inline" set="null" line="496" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An system low memory event, clear memory if you can. Called by the OS (mobile specific)</haxe_doc>
		</app_lowmemory>
		<app_willenterbackground public="1" get="inline" set="null" line="498" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for just before the app enters the background, called by the OS (mobile specific)</haxe_doc>
		</app_willenterbackground>
		<app_didenterbackground public="1" get="inline" set="null" line="500" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the app enters the background, called by the OS (mobile specific)</haxe_doc>
		</app_didenterbackground>
		<app_willenterforeground public="1" get="inline" set="null" line="502" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for just before the app enters the foreground, called by the OS (mobile specific)</haxe_doc>
		</app_willenterforeground>
		<app_didenterforeground public="1" get="inline" set="null" line="504" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the app enters the foreground, called by the OS (mobile specific)</haxe_doc>
		</app_didenterforeground>
		<file public="1" get="inline" set="null" line="506" static="1">
			<x path="snow.types.SystemEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the a file watch notification occurs</haxe_doc>
		</file>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.types.WindowEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.WindowEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="518" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An unknown window event</haxe_doc>
	</unknown>
	<created public="1" get="inline" set="null" line="520" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is created</haxe_doc>
	</created>
	<shown public="1" get="inline" set="null" line="522" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is shown</haxe_doc>
	</shown>
	<hidden public="1" get="inline" set="null" line="524" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is hidden</haxe_doc>
	</hidden>
	<exposed public="1" get="inline" set="null" line="526" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is exposed</haxe_doc>
	</exposed>
	<moved public="1" get="inline" set="null" line="528" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is moved</haxe_doc>
	</moved>
	<resized public="1" get="inline" set="null" line="530" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is resized, by the user or code.</haxe_doc>
	</resized>
	<size_changed public="1" get="inline" set="null" line="532" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is resized, by the OS or internals.</haxe_doc>
	</size_changed>
	<minimized public="1" get="inline" set="null" line="534" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is minimized</haxe_doc>
	</minimized>
	<maximized public="1" get="inline" set="null" line="536" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is maximized</haxe_doc>
	</maximized>
	<restored public="1" get="inline" set="null" line="538" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is restored</haxe_doc>
	</restored>
	<enter public="1" get="inline" set="null" line="540" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is entered by a mouse</haxe_doc>
	</enter>
	<leave public="1" get="inline" set="null" line="542" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is left by a mouse</haxe_doc>
	</leave>
	<focus_gained public="1" get="inline" set="null" line="544" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window has gained focus</haxe_doc>
	</focus_gained>
	<focus_lost public="1" get="inline" set="null" line="546" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window has lost focus</haxe_doc>
	</focus_lost>
	<close public="1" get="inline" set="null" line="548" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is being closed/hidden</haxe_doc>
	</close>
	<destroy public="1" get="inline" set="null" line="550" static="1">
		<x path="snow.types.WindowEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>A window is being destroyed</haxe_doc>
	</destroy>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.WindowEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="518" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An unknown window event</haxe_doc>
		</unknown>
		<created public="1" get="inline" set="null" line="520" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is created</haxe_doc>
		</created>
		<shown public="1" get="inline" set="null" line="522" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is shown</haxe_doc>
		</shown>
		<hidden public="1" get="inline" set="null" line="524" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is hidden</haxe_doc>
		</hidden>
		<exposed public="1" get="inline" set="null" line="526" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is exposed</haxe_doc>
		</exposed>
		<moved public="1" get="inline" set="null" line="528" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is moved</haxe_doc>
		</moved>
		<resized public="1" get="inline" set="null" line="530" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is resized, by the user or code.</haxe_doc>
		</resized>
		<size_changed public="1" get="inline" set="null" line="532" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is resized, by the OS or internals.</haxe_doc>
		</size_changed>
		<minimized public="1" get="inline" set="null" line="534" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is minimized</haxe_doc>
		</minimized>
		<maximized public="1" get="inline" set="null" line="536" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is maximized</haxe_doc>
		</maximized>
		<restored public="1" get="inline" set="null" line="538" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is restored</haxe_doc>
		</restored>
		<enter public="1" get="inline" set="null" line="540" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is entered by a mouse</haxe_doc>
		</enter>
		<leave public="1" get="inline" set="null" line="542" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is left by a mouse</haxe_doc>
		</leave>
		<focus_gained public="1" get="inline" set="null" line="544" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window has gained focus</haxe_doc>
		</focus_gained>
		<focus_lost public="1" get="inline" set="null" line="546" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window has lost focus</haxe_doc>
		</focus_lost>
		<close public="1" get="inline" set="null" line="548" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is being closed/hidden</haxe_doc>
		</close>
		<destroy public="1" get="inline" set="null" line="550" static="1">
			<x path="snow.types.WindowEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>A window is being destroyed</haxe_doc>
		</destroy>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.types.InputEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.InputEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="562" static="1">
		<x path="snow.types.InputEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An unknown input event</haxe_doc>
	</unknown>
	<key public="1" get="inline" set="null" line="564" static="1">
		<x path="snow.types.InputEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An keyboard input event</haxe_doc>
	</key>
	<mouse public="1" get="inline" set="null" line="566" static="1">
		<x path="snow.types.InputEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An mouse input event</haxe_doc>
	</mouse>
	<touch public="1" get="inline" set="null" line="568" static="1">
		<x path="snow.types.InputEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An touch input event</haxe_doc>
	</touch>
	<joystick public="1" get="inline" set="null" line="570" static="1">
		<x path="snow.types.InputEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An joystick input event. On mobile, accellerometer is a joystick (for now)</haxe_doc>
	</joystick>
	<controller public="1" get="inline" set="null" line="572" static="1">
		<x path="snow.types.InputEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An controller input event. Use these instead of joystick on desktop.</haxe_doc>
	</controller>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.InputEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="562" static="1">
			<x path="snow.types.InputEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An unknown input event</haxe_doc>
		</unknown>
		<key public="1" get="inline" set="null" line="564" static="1">
			<x path="snow.types.InputEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An keyboard input event</haxe_doc>
		</key>
		<mouse public="1" get="inline" set="null" line="566" static="1">
			<x path="snow.types.InputEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An mouse input event</haxe_doc>
		</mouse>
		<touch public="1" get="inline" set="null" line="568" static="1">
			<x path="snow.types.InputEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An touch input event</haxe_doc>
		</touch>
		<joystick public="1" get="inline" set="null" line="570" static="1">
			<x path="snow.types.InputEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An joystick input event. On mobile, accellerometer is a joystick (for now)</haxe_doc>
		</joystick>
		<controller public="1" get="inline" set="null" line="572" static="1">
			<x path="snow.types.InputEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An controller input event. Use these instead of joystick on desktop.</haxe_doc>
		</controller>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="snow.types.FileEventType" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" module="snow.types.Types">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="snow.types._Types.FileEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
	<unknown public="1" get="inline" set="null" line="584" static="1">
		<x path="snow.types.FileEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An unknown watch event</haxe_doc>
	</unknown>
	<modify public="1" get="inline" set="null" line="586" static="1">
		<x path="snow.types.FileEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the a file is modified</haxe_doc>
	</modify>
	<remove public="1" get="inline" set="null" line="588" static="1">
		<x path="snow.types.FileEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the a file is removed</haxe_doc>
	</remove>
	<create public="1" get="inline" set="null" line="590" static="1">
		<x path="snow.types.FileEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the a file is created</haxe_doc>
	</create>
	<drop public="1" get="inline" set="null" line="592" static="1">
		<x path="snow.types.FileEventType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>An event for when the a file is dropped on a window</haxe_doc>
	</drop>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="snow.types._Types.FileEventType_Impl_" params="" file="/Users/sven/dev/snow/snow/types/Types.hx" private="1" module="snow.types.Types">
		<unknown public="1" get="inline" set="null" line="584" static="1">
			<x path="snow.types.FileEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An unknown watch event</haxe_doc>
		</unknown>
		<modify public="1" get="inline" set="null" line="586" static="1">
			<x path="snow.types.FileEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the a file is modified</haxe_doc>
		</modify>
		<remove public="1" get="inline" set="null" line="588" static="1">
			<x path="snow.types.FileEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the a file is removed</haxe_doc>
		</remove>
		<create public="1" get="inline" set="null" line="590" static="1">
			<x path="snow.types.FileEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the a file is created</haxe_doc>
		</create>
		<drop public="1" get="inline" set="null" line="592" static="1">
			<x path="snow.types.FileEventType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>An event for when the a file is dropped on a window</haxe_doc>
		</drop>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="snow.utils._AbstractClass.StringMap" params="T" file="/Users/sven/dev/snow/snow/utils/AbstractClass.hx" private="1" module="snow.utils.AbstractClass"><x path="Map">
	<c path="String"/>
	<c path="snow.utils._AbstractClass.StringMap.T"/>
</x></typedef>
	<class path="snow.utils.AbstractClassBuilder" params="" file="/Users/sven/dev/snow/snow/utils/AbstractClass.hx" module="snow.utils.AbstractClass"><meta><m n=":noCompletion"/></meta></class>
	<typedef path="snow.utils.ArrayBuffer" params="" file="/Users/sven/dev/snow/snow/utils/ArrayBuffer.hx"><t path="snow.platform.native.utils.ArrayBuffer"/></typedef>
	<typedef path="snow.utils.ArrayBufferView" params="" file="/Users/sven/dev/snow/snow/utils/ArrayBufferView.hx"><c path="snow.platform.native.utils.ArrayBufferView"/></typedef>
	<typedef path="snow.utils.ByteArray" params="" file="/Users/sven/dev/snow/snow/utils/ByteArray.hx"><c path="snow.platform.native.utils.ByteArray"/></typedef>
	<typedef path="snow.utils.Float32Array" params="" file="/Users/sven/dev/snow/snow/utils/Float32Array.hx"><c path="snow.platform.native.utils.Float32Array"/></typedef>
	<typedef path="snow.utils.Int32Array" params="" file="/Users/sven/dev/snow/snow/utils/Int32Array.hx"><c path="snow.platform.native.utils.Int32Array"/></typedef>
	<class path="snow.utils.Timer" params="" file="/Users/sven/dev/snow/snow/utils/Timer.hx">
		<running_timers line="8" static="1"><c path="Array"><c path="snow.utils.Timer"/></c></running_timers>
		<measure public="1" params="T" set="method" line="23" static="1"><f a="f:?pos" v=":null">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<update public="1" set="method" line="46" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>* @private</haxe_doc>
		</update>
		<delay public="1" set="method" line="62" static="1"><f a="_time:_f">
	<x path="Float"/>
	<f a=""><x path="Void"/></f>
	<c path="snow.utils.Timer"/>
</f></delay>
		<stamp public="1" set="method" line="75" static="1"><f a=""><x path="Float"/></f></stamp>
		<time public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</time>
		<fire_at public="1">
			<x path="Float"/>
			<meta><m n=":noCompletion"/></meta>
		</fire_at>
		<running public="1">
			<x path="Bool"/>
			<meta><m n=":noCompletion"/></meta>
		</running>
		<run public="1" set="dynamic" line="31"><f a=""><x path="Void"/></f></run>
		<stop public="1" set="method" line="33"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method" line="14"><f a="_time">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="snow.utils.UInt8Array" params="" file="/Users/sven/dev/snow/snow/utils/UInt8Array.hx"><c path="snow.platform.native.utils.UInt8Array"/></typedef>
	<class path="snow.window.Window" params="" file="/Users/sven/dev/snow/snow/window/Window.hx">
		<id public="1">
			<x path="Int"/>
			<haxe_doc>the window id, for tracking events to each window</haxe_doc>
		</id>
		<manager public="1">
			<c path="snow.window.Windowing"/>
			<haxe_doc>the manager this window belongs to</haxe_doc>
		</manager>
		<asked_config public="1">
			<t path="snow.types.WindowConfig"/>
			<haxe_doc>the requested window config</haxe_doc>
		</asked_config>
		<config public="1">
			<t path="snow.types.WindowConfig"/>
			<haxe_doc>the actual returned window config</haxe_doc>
		</config>
		<handle public="1">
			<t path="snow.types.WindowHandle"/>
			<haxe_doc>the native window handle</haxe_doc>
		</handle>
		<onevent public="1">
			<f a="">
				<t path="snow.types.WindowEvent"/>
				<x path="Void"/>
			</f>
			<haxe_doc>the window event handler callback</haxe_doc>
		</onevent>
		<onrender public="1">
			<f a="">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<haxe_doc>the window render handler callback</haxe_doc>
		</onrender>
		<title public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window title `(read/write)`</haxe_doc>
		</title>
		<bordered public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window bordered state `(read/write)`</haxe_doc>
		</bordered>
		<grab public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window grab state `(read/write)`</haxe_doc>
		</grab>
		<fullscreen public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window fullscreen state `(read/write)`</haxe_doc>
		</fullscreen>
		<x public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window position `(read/write)`</haxe_doc>
		</x>
		<y public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</y>
		<width public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</width>
		<height public="1" set="accessor">
			<x path="Int"/>
			<meta><m n=":isVar"/></meta>
		</height>
		<max_size public="1" get="accessor" set="accessor">
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
			</a>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window maximum size `(read/write)`</haxe_doc>
		</max_size>
		<min_size public="1" get="accessor" set="accessor">
			<a>
				<y><x path="Int"/></y>
				<x><x path="Int"/></x>
			</a>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>The window minimum size `(read/write)`</haxe_doc>
		</min_size>
		<auto_swap public="1">
			<x path="Bool"/>
			<haxe_doc>set this if you want to control when a window calls swap()</haxe_doc>
		</auto_swap>
		<auto_render public="1">
			<x path="Bool"/>
			<haxe_doc>set this if you want to control when a window calls render()</haxe_doc>
		</auto_render>
		<closed public="1">
			<x path="Bool"/>
			<haxe_doc>A flag for whether this window is open or closed</haxe_doc>
		</closed>
		<minimized><x path="Bool"/></minimized>
		<internal_position><x path="Bool"/></internal_position>
		<internal_resize><x path="Bool"/></internal_resize>
		<on_window_created set="method" line="88"><f a="_handle:_id:_configs">
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
	<a>
		<render_config><t path="snow.types.RenderConfig"/></render_config>
		<config><t path="snow.types.WindowConfig"/></config>
	</a>
	<x path="Void"/>
</f></on_window_created>
		<on_event public="1" set="method" line="134">
			<f a="_event">
				<t path="snow.types.WindowEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</on_event>
		<update public="1" set="method" line="186">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</update>
		<render public="1" set="method" line="196">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Called for you automatically, unless auto_render is disabled.</haxe_doc>
		</render>
		<swap public="1" set="method" line="233">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Swap the back buffer of the window, call after rendering to update the window view</haxe_doc>
		</swap>
		<destroy public="1" set="method" line="244">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy the window. To recreate it create must be used, show will not work.</haxe_doc>
		</destroy>
		<close public="1" set="method" line="261">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the window, hiding it (not destroying it). Calling show() will unhide it.</haxe_doc>
		</close>
		<show public="1" set="method" line="274">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Show the window, unhiding it. If destroyed, nothing happens.</haxe_doc>
		</show>
		<simple_message public="1" set="method" line="287">
			<f a="message:?title" v=":''">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Display a cross platform message on this window</haxe_doc>
		</simple_message>
		<get_fullscreen set="method" line="297"><f a=""><x path="Bool"/></f></get_fullscreen>
		<set_fullscreen set="method" line="304"><f a="_enable">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_fullscreen>
		<get_bordered set="method" line="314"><f a=""><x path="Bool"/></f></get_bordered>
		<get_grab set="method" line="320"><f a=""><x path="Bool"/></f></get_grab>
		<get_max_size set="method" line="326"><f a=""><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></f></get_max_size>
		<get_min_size set="method" line="332"><f a=""><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></f></get_min_size>
		<get_title set="method" line="338"><f a=""><c path="String"/></f></get_title>
		<set_title set="method" line="344"><f a="_title">
	<c path="String"/>
	<c path="String"/>
</f></set_title>
		<set_x set="method" line="354"><f a="_x">
	<x path="Int"/>
	<x path="Int"/>
</f></set_x>
		<set_y set="method" line="366"><f a="_y">
	<x path="Int"/>
	<x path="Int"/>
</f></set_y>
		<set_width set="method" line="378"><f a="_width">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<set_height set="method" line="390"><f a="_height">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<set_cursor_position public="1" set="method" line="402"><f a="_x:_y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_cursor_position>
		<set_position public="1" set="method" line="410"><f a="_x:_y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_position>
		<set_size public="1" set="method" line="428"><f a="_width:_height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set_size>
		<set_max_size set="method" line="445"><f a="_size">
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
</f></set_max_size>
		<set_min_size set="method" line="455"><f a="_size">
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
	<a>
		<y><x path="Int"/></y>
		<x><x path="Int"/></x>
	</a>
</f></set_min_size>
		<set_bordered set="method" line="465"><f a="_bordered">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bordered>
		<set_grab set="method" line="475"><f a="_grab">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_grab>
		<new public="1" set="method" line="66"><f a="_manager:_config">
	<c path="snow.window.Windowing"/>
	<t path="snow.types.WindowConfig"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="snow.window.WindowSystem" params="" file="/Users/sven/dev/snow/snow/window/WindowSystem.hx">
		<c path="snow.platform.native.window.sdl.WindowSystem"/>
		<meta><m n=":noCompletion"/></meta>
	</typedef>
	<class path="snow.window.Windowing" params="" file="/Users/sven/dev/snow/snow/window/Windowing.hx">
		<window_list public="1">
			<x path="Map">
				<x path="Int"/>
				<c path="snow.window.Window"/>
			</x>
			<haxe_doc>The list of windows in this manager</haxe_doc>
		</window_list>
		<window_handles public="1">
			<c path="snow.window._Windowing.WindowHandleMap"/>
			<haxe_doc>The list of window handles, pointing to id's in the `window_list`</haxe_doc>
		</window_handles>
		<window_count public="1">
			<x path="Int"/>
			<haxe_doc>The number of windows in this manager</haxe_doc>
		</window_count>
		<lib public="1">
			<c path="snow.Snow"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>access to snow for subsystems/windows</haxe_doc>
		</lib>
		<platform public="1">
			<t path="snow.window.WindowSystem"/>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>The concrete implementation of the window system</haxe_doc>
		</platform>
		<create public="1" set="method" line="43">
			<f a="_config">
				<t path="snow.types.WindowConfig"/>
				<c path="snow.window.Window"/>
			</f>
			<haxe_doc>Create a window with the given config.</haxe_doc>
		</create>
		<remove public="1" set="method" line="67">
			<f a="_window">
				<c path="snow.window.Window"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Remove a window from the system, stopping events, etc.
            Called from window.destroy()! Don't use manually unless manually controlling the list.</haxe_doc>
		</remove>
		<window_from_handle public="1" set="method" line="82">
			<f a="_handle">
				<t path="snow.types.WindowHandle"/>
				<c path="snow.window.Window"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Get a window instance from an window handle.</haxe_doc>
		</window_from_handle>
		<window_from_id public="1" set="method" line="94">
			<f a="_id">
				<x path="Int"/>
				<c path="snow.window.Window"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Get a window instance from an ID.</haxe_doc>
		</window_from_id>
		<enable_vsync public="1" set="method" line="103">
			<f a="_enable">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Toggle vertical refresh. This is not window specific but context wide</haxe_doc>
		</enable_vsync>
		<enable_cursor public="1" set="method" line="110">
			<f a="_enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Toggle the OS cursor. This is not window specific but application wide, when inside a window, the OS cursor is hidden.</haxe_doc>
		</enable_cursor>
		<enable_cursor_lock public="1" set="method" line="117">
			<f a="_enable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Lock the OS cursor to the foreground window. This hides the cursor and prevents it from leaving, reporting relative coordinates.</haxe_doc>
		</enable_cursor_lock>
		<display_count public="1" set="method" line="128">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Get the number of displays present</haxe_doc>
		</display_count>
		<display_mode_count public="1" set="method" line="133">
			<f a="display">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Get the number of display modes present</haxe_doc>
		</display_mode_count>
		<display_native_mode public="1" set="method" line="138">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the native mode information of the display by index</haxe_doc>
		</display_native_mode>
		<display_current_mode public="1" set="method" line="143">
			<f a="display">
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the current mode information of the display by index</haxe_doc>
		</display_current_mode>
		<display_mode public="1" set="method" line="148">
			<f a="display:mode_index">
				<x path="Int"/>
				<x path="Int"/>
				<t path="snow.types.DisplayMode"/>
			</f>
			<haxe_doc>Get the information from a specific mode index, the index is obtained by iterating with a `display_mode_count` as the loop value</haxe_doc>
		</display_mode>
		<display_bounds public="1" set="method" line="153">
			<f a="display">
				<x path="Int"/>
				<a>
					<y><x path="Int"/></y>
					<x><x path="Int"/></x>
					<width><x path="Int"/></width>
					<height><x path="Int"/></height>
				</a>
			</f>
			<haxe_doc>Get the bounds of the display by index</haxe_doc>
		</display_bounds>
		<display_name public="1" set="method" line="158">
			<f a="display">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the name of the display by index, where available</haxe_doc>
		</display_name>
		<on_event set="method" line="167">
			<f a="_event">
				<t path="snow.types.SystemEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow when a system event is dispatched</haxe_doc>
		</on_event>
		<update set="method" line="185">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow, process any window handling</haxe_doc>
		</update>
		<destroy set="method" line="203">
			<f a=""><x path="Void"/></f>
			<meta><m n=":allow"><e>'???'</e></m></meta>
			<haxe_doc>Called by Snow, destroy everything.</haxe_doc>
		</destroy>
		<new public="1" set="method" line="28">
			<f a="_lib">
				<c path="snow.Snow"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>constructed internally, use `app.windowing`</haxe_doc>
		</new>
		<haxe_doc>A window manager, accessed via `app.window`</haxe_doc>
	</class>
	<class path="snow.window._Windowing.WindowHandleMap" params="" file="/Users/sven/dev/snow/snow/window/Windowing.hx" private="1" module="snow.window.Windowing">
		<extends path="haxe.ds.BalancedTree">
			<t path="snow.types.WindowHandle"/>
			<x path="Int"/>
		</extends>
		<compare set="method" line="221" override="1"><f a="k1:k2">
	<t path="snow.types.WindowHandle"/>
	<t path="snow.types.WindowHandle"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="219"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="sys.FileStat" params="" file="/usr/lib/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>the user id for the file</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>the size of the file</haxe_doc>
			</size>
			<rdev><x path="Int"/></rdev>
			<nlink><x path="Int"/></nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>the last modification time for the file</haxe_doc>
			</mtime>
			<mode><x path="Int"/></mode>
			<ino><x path="Int"/></ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>the user group id for the file</haxe_doc>
			</gid>
			<dev><x path="Int"/></dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>the creation time for the file</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>the last access time for the file (when enabled by the file system)</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File informations, as given by [sys.FileSystem.stat]</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="/usr/lib/haxe/std/cpp/_std/sys/FileSystem.hx">
		<fullPath public="1" set="method" line="52" static="1">
			<f a="relPath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the full path of the file or directory specified by `relPath`,
		which is relative to the current working directory.

		If `relPath` is null, the result is unspecified.</haxe_doc>
		</fullPath>
		<sys_exists line="93" static="1"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></sys_exists>
		<file_full_path line="101" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></file_full_path>
		<haxe_doc>This class allows you to get information about the files and directories.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
</haxe>