{
  "source": "luxe.tween.Actuate",
  "doc": "",
  "links": [],
  "toplinks": [],
  "sections": [
    {
      "name": "Members",
      "link": "#Members",
      "values": [
        {
          "name": "defaultEase",
          "meta": [],
          "public": true,
          "inline": false,
          "static": true,
          "signature": "defaultEase : luxe.tween.easing.IEasing",
          "type": "luxe.tween.easing.IEasing",
          "doc": ""
        },
        {
          "name": "defaultActuator",
          "meta": [],
          "public": true,
          "inline": false,
          "static": true,
          "signature": "defaultActuator : Class<luxe.tween.actuators.GenericActuator>",
          "type": "Class<luxe.tween.actuators.GenericActuator>",
          "doc": ""
        },
        {
          "name": "targetLibraries",
          "meta": [],
          "public": false,
          "inline": false,
          "static": true,
          "signature": "targetLibraries : luxe.tween.ObjectHash<Array>",
          "type": "luxe.tween.ObjectHash<Array>",
          "doc": ""
        }
      ]
    },
    {
      "name": "Methods",
      "link": "#Methods",
      "values": [
        {
          "name": "reset",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "* Resets Actuate by stopping and removing tweens for all objects",
          "signature": "reset() : Void",
          "return": ": Void",
          "args": []
        },
        {
          "name": "resume",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "* Resumes paused tweens for the specified target objects\n     * @param   ... targets     The target objects which will have their tweens resumed. Passing no value resumes tweens for all objects",
          "signature": "resume(target:Dynamic) : Void",
          "return": ": Void",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            }
          ]
        },
        {
          "name": "resumeAll",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "",
          "signature": "resumeAll() : Void",
          "return": ": Void",
          "args": []
        },
        {
          "name": "stop",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "* Stops all tweens for an individual object\n     * @param   target      The target object which will have its tweens stopped, or a generic actuator instance\n     * @param   properties      A string, array or object which contains the properties you wish to stop, like \"alpha\", [ \"x\", \"y\" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)\n     * @param   complete        If tweens should apply their final target values before stopping. Default is false (Optional) \n     * @param   sendEvent   If a complete() event should be dispatched for the specified target. Default is true (Optional)",
          "signature": "stop(target:Dynamic, ?properties:Dynamic, ?complete:Bool, ?sendEvent:Bool) : Void",
          "return": ": Void",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            },
            {
              "name": "?properties",
              "type": "Dynamic"
            },
            {
              "name": "?complete",
              "type": "Bool"
            },
            {
              "name": "?sendEvent",
              "type": "Bool"
            }
          ]
        },
        {
          "name": "unload",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "",
          "signature": "unload(actuator:luxe.tween.actuators.GenericActuator) : Void",
          "return": ": Void",
          "args": [
            {
              "name": "actuator",
              "type": "luxe.tween.actuators.GenericActuator"
            }
          ]
        },
        {
          "name": "pause",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "* Pauses tweens for the specified target objects\n     * @param   ... targets     The target objects which will have their tweens paused. Passing no value pauses tweens for all objects",
          "signature": "pause(target:Dynamic) : Void",
          "return": ": Void",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            }
          ]
        },
        {
          "name": "pauseAll",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "",
          "signature": "pauseAll() : Void",
          "return": ": Void",
          "args": []
        },
        {
          "name": "update",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "<![CDATA[* Creates a new tween that updates a method rather than setting the properties of an object\n     * @example     <code>Actuate.update (trace, 1, [\"Value: \", 0], [\"\", 1]).onComplete (trace, [ \"Finished tracing values between 0 and 1\" ]);</code>\n     * @param   target      The method to update        \n     * @param   duration        The length of the tween in seconds\n     * @param   start       The starting parameters of the method call. You may use both numeric and non-numeric values\n     * @param   end     The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters\n     * @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)\n     * @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]>",
          "signature": "update(target:Dynamic, duration:Float, ?start:Array<Dynamic>, ?end:Array<Dynamic>, ?overwrite:Bool) : luxe.tween.actuators.IGenericActuator",
          "return": ": luxe.tween.actuators.IGenericActuator",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            },
            {
              "name": "duration",
              "type": "Float"
            },
            {
              "name": "?start",
              "type": "Array<Dynamic>"
            },
            {
              "name": "?end",
              "type": "Array<Dynamic>"
            },
            {
              "name": "?overwrite",
              "type": "Bool"
            }
          ]
        },
        {
          "name": "tween",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "<![CDATA[* Creates a new tween\n     * @example     <code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ \"MyClip is now visible\" ]);</code>\n     * @param   target      The object to tween\n     * @param   duration        The length of the tween in seconds\n     * @param   properties      The end values to tween the target to\n     * @param   overwrite           Sets whether previous tweens for the same target and properties will be overwritten (Default is true)\n     * @param   customActuator      A custom actuator to use instead of the default (Optional)\n     * @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]>",
          "signature": "tween(target:Dynamic, duration:Float, properties:Dynamic, ?overwrite:Bool, ?customActuator:Class<luxe.tween.actuators.GenericActuator>) : luxe.tween.actuators.IGenericActuator",
          "return": ": luxe.tween.actuators.IGenericActuator",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            },
            {
              "name": "duration",
              "type": "Float"
            },
            {
              "name": "properties",
              "type": "Dynamic"
            },
            {
              "name": "?overwrite",
              "type": "Bool"
            },
            {
              "name": "?customActuator",
              "type": "Class<luxe.tween.actuators.GenericActuator>"
            }
          ]
        },
        {
          "name": "getLibrary",
          "meta": [],
          "public": false,
          "static": true,
          "inline": false,
          "doc": "",
          "signature": "getLibrary(target:Dynamic) : Array<luxe.tween.actuators.GenericActuator>",
          "return": ": Array<luxe.tween.actuators.GenericActuator>",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            }
          ]
        },
        {
          "name": "apply",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "<![CDATA[* Copies properties from one object to another. Conflicting tweens are stopped automatically\n     * @example     <code>Actuate.apply (MyClip, { alpha: 1 } );</code>\n     * @param   target      The object to copy to\n     * @param   properties      The object to copy from\n     * @param   customActuator      A custom actuator to use instead of the default (Optional)\n     * @return      The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers]]>",
          "signature": "apply(target:Dynamic, properties:Dynamic, ?customActuator:Class<luxe.tween.actuators.GenericActuator>) : luxe.tween.actuators.IGenericActuator",
          "return": ": luxe.tween.actuators.IGenericActuator",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            },
            {
              "name": "properties",
              "type": "Dynamic"
            },
            {
              "name": "?customActuator",
              "type": "Class<luxe.tween.actuators.GenericActuator>"
            }
          ]
        },
        {
          "name": "motionPath",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "* Creates a new MotionPath tween\n     * @param   target      The object to tween\n     * @param   duration        The length of the tween in seconds\n     * @param   properties      An object containing a motion path for each property you wish to tween\n     * @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)\n     * @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate",
          "signature": "motionPath(target:Dynamic, duration:Float, properties:Dynamic, ?overwrite:Bool) : luxe.tween.actuators.IGenericActuator",
          "return": ": luxe.tween.actuators.IGenericActuator",
          "args": [
            {
              "name": "target",
              "type": "Dynamic"
            },
            {
              "name": "duration",
              "type": "Float"
            },
            {
              "name": "properties",
              "type": "Dynamic"
            },
            {
              "name": "?overwrite",
              "type": "Bool"
            }
          ]
        },
        {
          "name": "timer",
          "meta": [],
          "public": true,
          "static": true,
          "inline": false,
          "doc": "<![CDATA[* Creates a tween-based timer, which is useful for synchronizing function calls with other animations\n     * @example     <code>Actuate.timer (1).onComplete (trace, [ \"Timer is now complete\" ]);</code>\n     * @param   duration        The length of the timer in seconds\n     * @param   customActuator      A custom actuator to use instead of the default (Optional)\n     * @return      The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object]]>",
          "signature": "timer(duration:Float, ?customActuator:Class<luxe.tween.actuators.GenericActuator>) : luxe.tween.actuators.IGenericActuator",
          "return": ": luxe.tween.actuators.IGenericActuator",
          "args": [
            {
              "name": "duration",
              "type": "Float"
            },
            {
              "name": "?customActuator",
              "type": "Class<luxe.tween.actuators.GenericActuator>"
            }
          ]
        }
      ]
    }
  ]
}